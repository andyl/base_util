" VIM-PLUG - ALTERNATIVE PLUGIN MANAGER
" Cmds - :PlugInstall / :PlugClean / :PlugStatus / :PlugUpdate / :PlugUpgrade
" Docco at http://github.com/junegunn/vim-plug 
call plug#begin('~/.vim/plugged')
" -- SNIPPETS ----- 
Plug 'SirVer/ultisnips'                  " snipmate replacement
" -- ALE (LINT/LSC/COMPLETION) -----
Plug 'w0rp/ale'
" -- FZF -----
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'lvht/fzf-mru'
" -- NERDTREE ----- 
Plug 'scrooloose/nerdtree'               " file browser
Plug 'dsimidzija/vim-nerdtree-ignore'    " file browser
Plug 'vim-scripts/nerdtree-ack'          " search from directory
" -- SEARCH AND NAV ----- 
Plug 'mileszs/ack.vim'                   " file search
Plug 'tpope/vim-projectionist'           " src/test file nav
" -- DOCKER -----
Plug 'ekalinin/Dockerfile.vim'           " Dockerfile editing
" -- TEXT MANIPULATION -----
Plug 'vim-scripts/tComment'              " toggle comments on/off
Plug 'kana/vim-textobj-user'             " customikzable text objects
Plug 'mattn/vim-textobj-url'             " au/iu
Plug 'tpope/vim-surround'                " edit containing objects
Plug 'tpope/vim-repeat'                  " repeat support for plugins
" -- LANG ELIXIR -----
Plug 'powerman/vim-plugin-AnsiEsc'       " docco with ANSI colors
Plug 'elixir-lang/vim-elixir'            " syntax highlighting
Plug 'mattreduce/vim-mix'                " mix helpers
Plug 'mhinz/vim-mix-format'              " :VimMixFormat
Plug 'andyl/vim-snipmate-elixir'         " snippets for elixir
Plug 'andyl/vim-projectionist-elixir'    " source/test file navigation
Plug 'andyl/vim-textobj-elixir'          " elixir text objects
Plug 'GrzegorzKozub/vim-elixirls', { 'do': ':ElixirLsCompileSync' }
" -- LANG RUBY ----- 
Plug 'vim-ruby/vim-ruby'                 " syntax highlighting
Plug 'tpope/vim-rails'                   " rails support
Plug 'nelstrom/vim-textobj-rubyblock'    " ruby text objects
Plug 'bronson/vim-ruby-block-conv'       " toggle {} to begin/end
" -- LANG JAVASCRIPT -----
Plug 'mxw/vim-jsx'                       " ReactJS/JSX
Plug 'kchmck/vim-coffee-script'          " coffeescript
Plug 'tomlion/vim-solidity'              " solidity
" -- LANG CRYSTAL -----
Plug 'rhysd/vim-crystal'                 " syntax highlighting
" -- LANG RUST -----
Plug 'rust-lang/rust.vim'                " syntax highlighting
" -- LEDGER -----    
Plug 'ledger/vim-ledger'                 " ledger-cli accounting
" -- GRAPHQL -----    
Plug 'jparise/vim-graphql'               " graphql syntax highlighting
" -- CODING UTILITIES -----
Plug 'milkypostman/vim-togglelist'       " toggle quicklist and location list
Plug 'tpope/vim-unimpaired'              " jump leading/trailing paren
Plug 'tmhedberg/matchit'                 " % matching
Plug 'vim-scripts/SyntaxRange'           " vimdeck syntax highlighting
" -- EDITING UTILS -----
Plug 'dhruvasagar/vim-table-mode'        " vim table mode
Plug 'junegunn/vim-easy-align'           " column alignment
" -- FILE FORMATS -----
Plug 'vimoutliner/vimoutliner'           " outline files
Plug 'pearofducks/ansible-vim'           " ansible yaml files
Plug 'slim-template/vim-slim'            " slim files
Plug 'jtratner/vim-flavored-markdown'    " markdown files
" -- TMUX/TERMINAL -----
Plug 'benmills/vimux'                    " tmux integration
Plug 'kassio/neoterm'                    " terminal management
" -- NGINX -----
Plug 'chr4/nginx.vim'                    " nginx syntax highlighting 
" -- COLORSCHEMES -----
Plug 'junegunn/seoul256.vim'             " seoul256
Plug 'NLKNguyen/papercolor-theme'        " PaperColor
Plug 'noahfrederick/vim-hemisu'          " hemisu 
Plug 'sjl/badwolf'                       " badwolf
Plug 'tomasr/molokai'                    " molokai
Plug 'morhetz/gruvbox'                   " gruvbox
" -- LAYOUTS -----
Plug 'vim-airline/vim-airline'           " status bar
Plug 'vim-airline/vim-airline-themes'    " vim-airline themes
Plug 'andyl/zoomwintab.vim'              " pane zooming
Plug 'kshenoy/vim-signature'             " show marks
" -- MISC -----
Plug 'terryma/vim-multiple-cursors'      " multiple cursors
Plug 'itchyny/calendar.vim'              " vim calendars
Plug 'tpope/vim-fugitive'                " git integration
Plug 'vim-scripts/bats.vim'              " bats editing
Plug 'mattn/gist-vim'                    " post github gists
Plug 'mattn/webapi-vim'                  " required by gist-vim
" -- VIM RELATIONIST -----
" Plug 'andyl/vim-relationist'             " related file nav
" Plug 'andyl/vim-relationist-phoenix'     " controller/view/template navigation
call plug#end()

" === FILE MODES
autocmd BufRead,BufNewFile *.thor    set filetype=ruby
autocmd BufRead,BufNewFile *.gtd     set filetype=gtd
autocmd BufRead,BufNewFile *.gta     set filetype=gtd

" === ELIMINATING MODE TRANSMISSION DELAYS
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=0

" === CLEAN UP JUNK DATA FILE
autocmd VimLeave * if filereadable(expand("~/.vim/.netrwhist"))|call delete(expand("~/.vim/.netrwhist"))|endif 

" === ENCRYPTION (vim only...)
if !has('nvim')
  set cryptmethod=blowfish2
endif

" === TOGGLELIST
let g:toggle_list_no_mappings = 1

" nmap <script> <silent> <leader>l :call ToggleLocationList()<CR>
" nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>

" === FILE BACKUPS - disable file backups
set updatecount=0     
set nobackup
set noswapfile

set shortmess+=I

" === LEDGER
" https://github.com/ledger/ledger/wiki/Getting-started-with-Vim
" https://github.com/ledger/vim-ledger
au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
filetype plugin indent on
syntax on

" For ledger
let g:ledger_maxwidth = 100
let g:ledger_fold_blanks = 1
function LedgerSort()
  :%! ledger -f - print --sort 'date, amount'
  :%LedgerAlign
endfunction
command LedgerSort call LedgerSort()

" === ALE / LSP / LSC / LINT

set completeopt=menu,menuone,preview,noselect,noinsert

let g:ale_completion_enabled=1
let g:ale_completion_delay=200
let g:ale_elixir_elixir_ls_release = expand('~/.vim/plugged/vim-elixirls/elixir-ls/release')

let g:ale_linters        = {}
let g:ale_linters.elixir = ['elixir-ls']
let g:ale_linters.ruby   = ['solargraph', 'rubocop', 'ruby']
let g:ale_set_balloons   = 1

let g:ale_fixers                  = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_fixers.javascript       = ['eslint']
let g:ale_fixers.scss             = ['stylelint']
let g:ale_fixers.css              = ['stylelint']
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_fixers.ruby             = ['rubocop']
let g:ale_fixers.elixir           = ['mix_format']

" https://github.com/JakeBecker/elixir-ls/issues/54
let g:ale_elixir_elixir_ls_config = { 'elixirLS': { 'dialyzerEnabled': v:false } }

nnoremap <silent> \gd :wa<CR>:ALEGoToDefinition<CR>
nnoremap <silent> \gt :wa<CR>:ALEGoToDefinitionInTab<CR>
nnoremap <silent> \gs :wa<CR>:ALEGoToDefinitionInSplit<CR>
nnoremap <silent> \gv :wa<CR>:ALEGoToDefinitionInVSplit<CR>
nnoremap <silent> \gr :wa<CR>:ALEFindReferences<CR>
nnoremap <silent> \wh :wa<CR>:ALEHover<CR>          
nnoremap <silent> \wn :wa<CR>:ALENext<CR>
nnoremap <silent> \wp :wa<CR>:ALEPrevious<CR>

nnoremap <leader>d :ALEHover<CR>

augroup UseALEToFormatElixirFiles
  autocmd FileType elixir,eelixir nnoremap <leader>f :ALEFix<CR>
augroup END

" === MATCHIT
runtime macros/matchit.vim

" === ABBREV / TYPO FIXES
abbrev teh the
abbrev tihs this

" === WEB PREVIEW
command! Preview :!firefox %<cr>

" === WRITE THE CURRENT BUFFER, THEN CLOSE IT
command! Wc write|bdelete

" === CURSORLINE
" note: cursorline also set in the `focus` function
set cursorline
set nocursorcolumn
nmap <F2> :set cursorline! cursorline?<cr>
imap <F2> <esc>:set cursorline! cursorline?<cr>i<right>

" === SEARCH AND REPLACE
" 1) search for a pattern
" 2) hit F3 then type the replacement
vmap <F3> :s///g<left><left>
nmap <F3> :%s///g<left><left>

" === SEARCH HIGHLIGHT
set hlsearch
nmap <leader>h :set hlsearch!<cr>
nmap <F4> :set hlsearch! hlsearch?<cr>
imap <F4> <esc>:set hlsearch! hlsearch?<cr>i<right>
nnoremap / :set hlsearch<cr>/

" search for selected text, forwards or backwards
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" === MISC STUFF
let mapleader=","
set directory=~/.vimtmp,/tmp,.
set splitright
set splitbelow
set number
set nowritebackup
set incsearch
set visualbell
set ignorecase
set smartcase
set nocompatible
set laststatus=2
set printoptions=duplex:long,number:y
let g:otl_text_view = 1
nmap <space> i~<esc>r
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [%{hostname()}]\ [%l,%v]\ [%p%%]\ [LEN=%L]\ [%{$PWDS}]
set title titlestring=<vim>\ %{$USER}@%{hostname()}\ %t\ %m%r%h%w

" === MODE TRANSITION
" use jk or kj as a single keystroke to escape
autocmd InsertLeave * :normal `^
imap kj <esc>
imap kk <esc>
imap jj <esc>
imap :w <esc>:w
imap :q <esc>:q

" === TABLE MODE
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'

" === MOVE LINE UP/DOWN
nmap <A-Up> [e
nmap <A-Down> ]e

" === MOVE REGION UP/DOWN
vmap <A-Up> [egv
vmap <A-Down> ]egv

" === FOR EDITING HELP OUTLINES - OPENS TARGET FILE IN VERTICAL SPLIT WINDOW
map <F8> :vertical wincmd f<CR>

" === AUTORUN - autoexec vim script on VimEnter
function! LoadAutorun()
  if filereadable(getcwd() . '/.autorun.vim')
    exec "source " . getcwd() . "/.autorun.vim"
  endif
endfunction

autocmd VimEnter * call LoadAutorun()

" === INDENTATION AND TABS
filetype plugin indent on
set softtabstop=2
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set backspace=start,indent

" === MARKDOWN
" tpope/markdown highlights in underscore in snake_case words
" jtratner/vim-flavored-markdown fixes this
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" === FORMATTING AND PAGINATION

" Underline the current line 
nmap <leader>u yyp<c-v>$r-
nmap <leader>U yyp<c-v>$r=

" Insert header line
nmap <leader>h o<Esc>65i-<Esc>
nmap <leader>H o<Esc>65i=<Esc>

" Pagination helpers (for putting page breaks in text printouts)
nmap <leader>pc gg:%s///g<cr>gg
nmap <leader>ps /<cr>zz
nmap <leader>pd 73jzz
nmap <leader>pi i<esc>

" === PRINT COMMANDS
nmap <leader>pp :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 %<cr>
nmap <leader>p1 :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --portrait  --columns=1 --font-size=9 %<cr>
nmap <leader>pl :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --landscape --columns=1 --font-size=9 %<cr>

" === PROJECTIONIST
nmap <leader>aa :A<cr>
nmap <leader>av :AV<cr>
nmap <leader>as :AS<cr>
nmap <leader>at :AT<cr>

" === FZF - fast file finding

" We override the default fzf commands with extra ripgrep options
" see: https://github.com/junegunn/fzf/blob/master/README-VIM.md
" see: https://github.com/junegunn/fzf/wiki/Examples-(vim)
" see: https://www.mankier.com/1/rg
" see: https://github.com/junegunn/fzf.vim/issues/825
"
" These are the function signitures of the functions being called:
"   fzf#vim#grep(command, with_column, [options], [fullscreen])

" -- regular find --
"   * exclude node_modules (--glob "!node_modules/*")
"   * exclude elixir build dir (--glob "!_build/*")
"   * show line number in results (--line-number)
"   * dont group results by file (--no-heading)
"   * use literal strings for search not regex so we dont need to escape
"     special chars (--fixed-strings)
"   * search case insensitive if all lowercase, otherwise case sensitive (--smart-case)
"   * trim whitespace at start of line in results (--trim)
"   * search hidden/dot files aswell e.g. '.example_file', '.env' (--hidden)
"   * follow symlinks, dunno if we need but why not (--follow)
"   * always use colors to display results (--color "always")
"   * ignores deps #TODO
"   * shows preview to the right (fzf#vim#with_preview)
"     need second arg to be 1, see: https://github.com/junegunn/fzf.vim/issues/732

" set max lenght for the mru file list
let g:fzf_mru_file_list_size = 10 " 10 is default value

" key bindings to open file in split window
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit' }

" ----- custom FZF Commands

command! -bang -nargs=* FzFind call fzf#vim#grep('rg --ignore-file . --line-number --no-heading --fixed-strings --smart-case --trim --hidden --follow --color "always" '.shellescape(<q-args>), 0, fzf#vim#with_preview(), <bang>0)

" ----- FZF keymappings

nmap \f :FzFind<cr>
nmap <C-p> :wa<CR>:<C-u>FZF<CR>
nmap <C-m> :wa<CR>:<C-u>FZFMru<CR>
nmap <C-e> :wa<CR>:call fzf#run({'down': 10, 'source': 'fd -t d -d 5', 'sink': 'NERDTreeFind'})<CR>

" === ACK.VIM 
nmap <leader>k :Ack 
let g:ackprg = 'rg --vimgrep --no-heading'

" === NERD TREE
let g:NERDTreeMapOpenVSplit = "v"
let g:NERDTreeMapOpenSplit  = "s"
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeSortHiddenFirst = 1
let g:NerdTreeIdle = 1

" returns true iff is NERDTree open/active
function! s:IsNTOpen()        
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! <SID>ToggleNerd()
  let g:NerdTreeIdle = 0
  if s:IsNTOpen() || strlen(expand('%')) == 0
    NERDTreeToggle
  else
    NERDTreeFind
  endif
  let g:NerdTreeIdle = 1
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a
" modifiable file, and we're not in vimdiff

function! <SID>SyncTree()
  if g:NerdTreeIdle && &modifiable && s:IsNTOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

nnoremap <silent> <leader>e :call <SID>ToggleNerd()<cr>

autocmd BufEnter * call <SID>SyncTree()

" === ViMux
function! s:IsVimuxOpen()
  return exists("g:VimuxRunnerIndex")
endfunction

function! <SID>ToggleVimuxTerminal()
  if s:IsVimuxOpen()
    call VimuxCloseRunner()
  else
    call VimuxRunCommand("clear")
  endif
endfunction

nnoremap <silent> <leader>c :call <SID>ToggleVimuxTerminal()<cr>

" === TMP FILE - copy between vim instances using tmp file
nmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>tp :r /tmp/vimtmp<cr>

" === VIM EASY ALIGN
vmap at :EasyAlign *\|<cr>
vmap ac <Plug>(EasyAlign)
nmap ac <Plug>(EasyAlign)

" at = align table
" usage: vipat
" ac = align character
" usage: vipac=

let g:easy_align_delimiters = {
\  '^': {'pattern': ',', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0}
\}

" === TAB MANIPULATION AND NAVIGATION
nmap <leader>tn :tabnew<CR>
nmap <leader>tx :tabclose<CR>
nmap <leader>th :tabp<CR>
nmap <leader>tl :tabn<CR>
nmap <leader>t1 1gt
nmap <leader>t2 2gt
nmap <leader>t3 3gt
nmap <leader>t4 4gt
nmap <leader>t5 5gt
nmap <leader>t6 6gt
nmap <leader>t7 7gt
nmap <leader>t8 8gt
nmap <leader>t9 9gt

" === PANE SPLITTING
nmap <leader>s :sp<cr>
nmap <leader>v :vsp<cr>
nmap <leader>q :q<cr>
nmap <leader>o :wa<cr>:only<cr>
nmap <leader>i :wa<cr>:only<cr>:call <SID>ToggleNerd()<cr>

" === PANE LAYOUT
" layout split
nmap <leader>ls <C-w>J
" layout vertical
nmap <leader>lv <C-w>L
" layout rotate
nmap <leader>lr <C-w>r

" === SESSION
" window-save
nmap <leader>ws :mksession! .session.vim<CR>
" window-restore
nmap <leader>wr :source .session.vim<CR>

" === PANE NAVIGATION
nmap <silent> <C-k> :wincmd k<cr>
nmap <silent> <C-j> :wincmd j<cr>
nmap <silent> <C-h> :wincmd h<cr>
nmap <silent> <C-l> :wincmd l<cr>

" === PANE RESIZING (Up/Down)
fun! BarUp(lines)
  let curwindow = winnr()   " save current window
  wincmd k                  " move to a upper-window
  if winnr() == curwindow   " if top-most window
    execute 'resize -' . a:lines 
  else
    wincmd j              " else move to the lower-window
    execute 'resize +' . a:lines 
  endif
endfun

fun! BarDown(lines)
  let curwindow = winnr() " save current window
  wincmd j                " move to a lower-window
  if winnr() == curwindow " if bottom-most window
    execute 'resize -' . a:lines 
  else
    wincmd k              " else move to the upper-window
    execute 'resize +' . a:lines 
  endif
endfun

nnoremap <silent> <C-Up>   :call BarUp(2)<cr>
nnoremap <silent> <C-Down> :call BarDown(2)<cr>
nnoremap <silent> \<Up>    :call BarUp(10)<cr>
nnoremap <silent> \<Down>  :call BarDown(10)<cr>

" === PANE RESIZING (Left/Right)
fun! BarLeft(lines)
  let curwindow = winnr() " === save current window
  wincmd h                " move to a left-window
  if winnr() == curwindow " if left-most window
    execute 'vertical resize -' . a:lines 
  else
    wincmd l              " else move to the right-window
    execute 'vertical resize +' . a:lines 
  endif
endfun

fun! BarRight(lines)
  let curwindow = winnr() " save current window
  wincmd l                " move to a right-window
  if winnr() == curwindow " if right-most window
    execute 'vertical resize -' . a:lines 
  else
    wincmd h              " else move to the left-window
    execute 'vertical resize +' . a:lines 
  endif
endfun

nnoremap <silent> <C-Left>  :call BarLeft(2)<cr>
nnoremap <silent> <C-Right> :call BarRight(2)<cr>
nnoremap <silent> \<Left>   :call BarLeft(10)<cr>
nnoremap <silent> \<Right>  :call BarRight(10)<cr>

" === EDITING ~/.vimrc
nmap <leader>ce :split  ~/.vimrc<CR>
nmap <leader>cs :source ~/.vimrc<CR>

" AUTO-RELOAD .VIMRC
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" === SURROUND CUSTOMIZATION
" Select text in an ERb file with visual mode and then press s- or s=
" Or yss- to do entire line.
autocmd FileType eruby let g:surround_45 = "<% \r %>"    " -
autocmd FileType eruby let g:surround_61 = "<%= \r %>"   " =
autocmd FileType ruby  let g:surround_35  = "#{\r}"      " #

nmap vm' F'vf'
nmap vm" F"vf"

" === PANE ZOOMING
nmap <leader>z <C-w>o
vmap <leader>z <C-w>o

" === ZOOM STATE ON STATUS LINE
fun! SetZoomState()
  if g:airline_section_y != "ZOOM"
    let g:orig_zoom_state = g:airline_section_y
    let g:airline_section_y = "ZOOM"
    let g:airline_theme     = 'light'
  else
    let g:airline_section_y = g:orig_zoom_state
    let g:airline_theme = 'luna'
    let g:orig_zoom_state = ""
  endif
  AirlineRefresh
  AirlineRefresh
endfun

if !exists("g:ZoomWinFuncRef")
 let g:ZoomWinFuncRef = function("SetZoomState")
endif
 
" === VIM-AIRLINE 
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_theme = 'papercolor'
let g:airline_symbols_ascii = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#bufferline#enabled = 0
nmap <leader>1 :bl\|1bn<cr>
nmap <leader>2 :bl\|2bn<cr>
nmap <leader>3 :bl\|3bn<cr>
nmap <leader>4 :bl\|4bn<cr>
nmap <leader>5 :bl\|5bn<cr>
nmap <leader>6 :bl\|6bn<cr>
nmap <leader>7 :bl\|7bn<cr>
nmap <leader>8 :bl\|8bn<cr>
nmap <leader>9 :bl\|9bn<cr>

" === BUFFER MANIPULATION 

" switch to buffer 5 by typing 5<CR>
" delete buffer 5 by typing d5<CR>

nmap <leader>bb :ls<cr>:b

nmap <leader>bn :bnext<cr>
nmap <leader>bp :bprev<cr>
nmap <leader>bd :bd<cr>
nmap <leader>bx :bd<cr>

" === LISTS  

" let g:syntastic_is_open = 0  
" function! ToggleSyntasticList()
"   if g:syntastic_is_open == 1
"       lclose
"       let g:syntastic_is_open = 0 
"   else
"       Errors
"       let g:syntastic_is_open = 1 
"   endif
" endfunction
"
" let g:toggle_list_no_mappings=1
" nmap <F6> :SyntasticToggleMode<cr>
" nmap <F7> :SyntasticCheck<cr>
" nmap <F8> :call ToggleSyntasticList()<cr>
" nmap <F9> :call ToggleQuickfixList()<cr>

" === SYNTASTIC 
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_enable_elixir_checker = 1
" let g:syntastic_elixir_checkers = ['elixir']
" let g:syntastic_ruby_checkers = ['rubocop']
" let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_mode_map = {'mode': 'passive'}
"
" nmap <leader>sn :lnext<cr>
" nmap <leader>sp :lprev<cr>

" === ENCODING
if !exists('g:encoding_set')
  set encoding=utf-8
endif
let g:encoding_set=1

" === TERM-SPECIFIC ITEMS 
if exists('$TMUX')
  if !has('nvim')
    set term=screen-256color
  endif
endif

" === CURSOR CUSTOMIZATION
" http://vim.wikia.com/wiki/Change_cursor_color_in_different_modes
" http://stackoverflow.com/questions/6488683/how-do-i-change-the-vim-cursor-in-insert-normal-mode
" https://jonasjacek.github.io/colors/
" cursor shapes (where N = \033[N q): 
"   1 -> blinking block 
"   2 -> solid block 
"   3 -> blinking underscore 
"   4 -> solid underscore
"   5 -> blinking bar
"   6 -> solid bar
" test cursor shapes -> echo -ne "\e[5 q"
" test cursor colors -> echo -ne "\e]12;green\x7"

" Terminator terminal
if &term == "xterm-256color"  " xterms are gnu-term and terminator
  let &t_SI = "\e[5 q"      " when entering insert mode
  let &t_SR = "\e[3 q"      " when entering replace mode
  let &t_EI = "\e[2 q"      " when entering normal mode
  set mouse=a
endif

" Tmux settings
" See https://gist.github.com/1973419 (this works)
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
if &term == 'screen-256color'                                   " TMUX
  let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"                 " when entering replace mode
  let &t_SR = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"                 " when entering replace mode
  let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"                 " when entering replace mode
  nmap [1;5A [e
  nmap [1;5B ]e
  vmap [1;5A [egv
  vmap [1;5B ]egv
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif
 
" NeoVim
" https://github.com/neovim/neovim/wiki/FAQ#how-can-i-change-the-cursor-~"hape-in-the-terminal
if &term == "nvim" 
  set guicursor=i:ver25-iCursor
endif

" Experiment with JetBrains console (it doesn't work)
" The `JETBRAINS_TERM` var is setup in bashrc
if !empty($JETBRAINS_TERM)
  let &t_SI = "\e]12;green\x7"    " when entering insert mode
  let &t_SR = "\e]12;red\x7"      " when entering replace mode
  let &t_EI = "\e]12;white\x7"    " when entering normal mode
endif

" See http://arniealmighty.wordpress.com for screen/cursor color notes
" (doesn't seem to be working)
if &term == 'screen'                            " GNU Screen 
  let &t_SI = "\033P\033]12;green\007\033\\"    " when entering insert mode
  let &t_EI = "\033P\033]12;white\007\033\\"    " when entering normal mode
endif

" === STRIP TRAILING WHITESPACE 
" see http://vimcasts.org/episodes/tidying-whitespace/
" to show non-printable characters - :set list
" to hide non-printable characters - :set nolist

function! <SID>StripTrailingWhitespaces()
  " Prep: save last search and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business
  %s/\s\+$//e
  " Cleanup: restore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction

" call function before saving
autocmd BufWritePre *.rb,*.slim,*.rake,*.erb :call <SID>StripTrailingWhitespaces()

" === REFACTORING

" Find pattern to matching end, flags as per :h search()
function! <SID>get_range_for_block(pattern_start, flags)
  if !exists("g:loaded_matchit") 
    throw("matchit.vim required")
  endif
  let cursor_position = getpos(".")
  let block_start = search(a:pattern_start, a:flags)
  if (match(getline("."), "^\\s*it\\s\\+") == 0)
    normal $
  endif
  normal %
  let block_end = line(".")
  call setpos(".",cursor_position) 
  return [block_start, block_end]
endfunction

" Loop over the line range given, global replace pattern with replace
function! <SID>gsub_all_in_range(start_line, end_line, pattern, replace)
  let lnum = a:start_line
  while lnum <= a:end_line
    let oldline = getline(lnum)
    let newline = substitute(oldline,a:pattern,a:replace,'g')
    call setline(lnum, newline)
    let lnum = lnum + 1
  endwhile
endfunction!

" refactor extract
" v~,re
function! <SID>RefactorExtract()
  let varname = input('Variable name? ')
  if varname != ''
    execute "normal gvc".varname."\<ESC>O\<C-A> = \<ESC>p0"
  endif
endfunction

vnoremap <leader>re :call <SID>RefactorExtract()<CR>

" refactor inline
" <hover over variable>,ri
function! <SID>RefactorInline()
  " Copy the variable under the cursor into the 'a' register
  normal "ayiw
  " 4 diws to get the variable, = sign and whitespace
  normal 4diw
  " Copy the value into the 'b' register
  normal "bd$
  " Delete the remnants of the line
  normal dd
  " Store current line, that's where we will start searching from
  let current_line = line(".")
  " Find the start and end of the current block
  let [blk_start, blk_end] = <SID>get_range_for_block('\<def\|it\>','Wb')
  " Rename the variable within the range of the block
  call <SID>gsub_all_in_range(current_line, blk_end, '\<' . @a . '\>', @b)
endfunction

nnoremap <leader>ri :call <SID>RefactorInline()<CR>

