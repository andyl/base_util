module.exports=function(e){function t(o){if(i[o])return i[o].exports;var s=i[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var i={};return t.m=e,t.c=i,t.d=function(e,i,o){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t){e.exports=require("vscode")},function(e,t){e.exports=require("tslib")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("copy-paste")},function(e,t,i){"use strict";function o(e,t){return q.commands.executeCommand(oe.SetContext,e,t)}function s(e){const t=e.document.uri.scheme;return t!==re.Output&&t!==re.DebugConsole}function r(e){switch(e.type){case ce.Branch:return"Branch";case ce.Branches:return"Branches";case ce.Commit:return"Commit";case ce.File:return"File";case ce.Repo:return"Repository";case ce.Revision:return"Revision";default:return""}}function n(e){if(e.match(/[\\\/]/))return e;const t=xe.join(".",e);try{if(_e.statSync(t))return t}catch(e){}const i=process.env.PATH.split(Se?";":":");for(const t of i){const i=xe.join(t,e);try{if(_e.statSync(i))return i}catch(e){}}return e}function a(e,t){if(!Se)return{cmd:n(e),args:t};if(!_e.existsSync(e)){const i=[".exe",".bat",".cmd",".ps1"];for(const o of i){const i=n(`${e}${o}`);if(_e.existsSync(i))return a(i,t)}}if(e.match(/\.ps1$/i)){return{cmd:xe.join(process.env.SYSTEMROOT,"System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",e].concat(t)}}if(e.match(/\.(bat|cmd)$/i)){return{cmd:xe.join(process.env.SYSTEMROOT,"System32","cmd.exe"),args:["/C",e,...t]}}if(e.match(/\.(js)$/i)){return{cmd:process.execPath,args:[e].concat(t)}}return{cmd:e,args:t}}function h(e,t,i={}){const o=Object.assign({maxBuffer:10485760},i),{stdin:s,stdinEncoding:r}=o,n=P.__rest(o,["stdin","stdinEncoding"]);return new Promise((i,o)=>{const a=Object(ye.execFile)(e,t,n,(s,r,a)=>{if(!s)return a&&we.warn(`Warning(${e} ${t.join(" ")}): ${a}`),void i(r);"stdout maxBuffer exceeded"===s.message&&o(new Error(`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${n.maxBuffer} bytes`)),we.warn(`Error(${e} ${t.join(" ")}):  (${s.code}) ${a}`),o(s)});s&&a.stdin.end(s,r||"utf8")})}function c(e){return P.__awaiter(this,void 0,void 0,function*(){const t=yield h(e,["--version"]);return e&&"git"!==e||(e=a(e,["--version"]).cmd),{path:e,version:function(e){return e.replace(/^git version /,"")}(t.trim())}})}function l(e){return e?c(xe.join(e,"Git","cmd","git.exe")):Promise.reject(new Error("Unable to find git"))}function d(e){return P.__awaiter(this,void 0,void 0,function*(){try{return yield c(e||"git")}catch(e){try{switch(process.platform){case"darwin":return yield function(){return P.__awaiter(this,void 0,void 0,function*(){try{let e=yield h("which",["git"]);if("/usr/bin/git"!==(e=e.replace(/^\s+|\s+$/g,"")))return c(e);try{return yield h("xcode-select",["-p"]),c(e)}catch(t){return 2===t.code?Promise.reject(new Error("Unable to find git")):c(e)}}catch(e){return Promise.reject(new Error("Unable to find git"))}})}();case"win32":return yield l(process.env.ProgramW6432).then(null,()=>l(process.env["ProgramFiles(x86)"])).then(null,()=>l(process.env.ProgramFiles)).then(null,()=>c("git"));default:return Promise.reject("Unable to find git")}}catch(e){return Promise.reject(new Error("Unable to find git"))}}})}function u(){Le.clear()}function m(e,t=ne.Space.repeat(4)){return Ve[e]||t}function g(e){return Ke[e]||Ke.X}function p(e,...t){return P.__awaiter(this,void 0,void 0,function*(){try{return yield f(e,...t)}catch(i){return v(i,e,...t)}})}function f(e,...t){return P.__awaiter(this,void 0,void 0,function*(){t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false");const i=e.encoding||"utf8",o=Object.assign({},e,{encoding:"utf8"===i?"utf8":"binary",env:Object.assign({},e.env||process.env,{GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE"})}),s=`(${o.cwd}): git ${t.join(" ")}`;let r=gt.get(s);void 0===r?(we.log(`Running${s}`),r=h(ct.path,t,o),gt.set(s,r)):we.log(`Awaiting${s}`);let n;try{n=yield r}finally{gt.delete(s),we.log(`Completed${s}`)}return"utf8"===i||"binary"===i?n:$e.decode(Buffer.from(n,"binary"),i)})}function v(e,t,...i){const o=e&&e.toString();if(o)for(const e of mt)if(e.test(o))return we.warn("git",...i,`  cwd='${t.cwd}'`,`\n  ${o.replace(/\r?\n|\r/g," ")}`),"";throw we.error(e,"git",...i,`  cwd='${t.cwd}'`,o&&`\n  ${o.replace(/\r?\n|\r/g," ")}`),e}function w(e,t){if(e instanceof q.Uri)return e;if(void 0!==t&&void 0!==t.document)return t.document.uri}function C(e){return"view"===e.type&&e.node.branch&&e.node.branch instanceof Te}function b(e){return"view"===e.type&&e.node.commit&&e.node.commit instanceof ke}function y(e){return"view"===e.type&&e.node.remote&&e.node.remote instanceof We}function _(e){return void 0!==e&&(void 0!==e.id&&(void 0!==e.handle||void 0!==e.label||void 0!==e.resourceStates))}function x(e){return void 0!==e&&void 0!==e.resourceUri}function S(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){const{rethrow:i}=t,o=P.__rest(t,["rethrow"]);try{e instanceof Fe&&(e=e.fileUri(!1));const t=yield q.workspace.openTextDocument(e);return q.window.showTextDocument(t,Object.assign({preserveFocus:!1,preview:!0,viewColumn:q.window.activeTextEditor&&q.window.activeTextEditor.viewColumn||1},o))}catch(e){if(i)throw e;return void we.error(e,"openEditor")}})}function $(){return!ds.get(ds.name("advanced")("quickPick")("closeOnFocusOut").value)}function D(e,t){const i=new q.CancellationTokenSource;return function(e,t,i){P.__awaiter(this,void 0,void 0,function*(){const o=i&&(yield Jt.instance.beginScope(i));try{yield q.window.showQuickPick(function(e){return new Promise((t,i)=>{const o=e.token.onCancellationRequested(()=>{o.dispose(),t([])})})}(t),{placeHolder:e,ignoreFocusOut:$()},t.token)}catch(e){}finally{t.cancel(),o&&o.dispose()}})}(e,i,t),i}Object.defineProperty(t,"__esModule",{value:!0});var F,P=i(1);!function(e){function t(e,i,o,s=!1){if(Object(o)!==o)e[i]=s?null==o?null:"string"==typeof o?o:JSON.stringify(o):o;else if(Array.isArray(o)){const r=o.length;for(let n=0;n<r;n++)t(e,`${i}[${n}]`,o[n],s);0===r&&(e[i]=null)}else{let r=!0;for(const n in o)r=!1,t(e,i?`${i}.${n}`:n,o[n],s);r&&i&&(e[i]=null)}}e.entries=function*(e){for(const t in e)yield[t,e[t]]},e.flatten=function(e,i="",o=!1){const s=Object.create(null);return t(s,i,e,o),s},e.values=function*(e){for(const t in e)yield e[t]}}(F||(F={}));var k;!function(e){function t(e,i,o=!0){if(void 0===e.children)return e;const s=[...F.values(e.children)];for(const e of s)t(e,i,!1);if(!o&&1===s.length){const t=s[0];void 0===t.value&&(e.name=i(e.name,t.name),e.relativePath=t.relativePath,e.children=t.children)}return e}e.countUniques=function(e,t){const i=Object.create(null);for(const o of e){const e=t(o);i[e]=(i[e]||0)+1}return i},e.filterMap=function(e,t){return e.reduce((e,i)=>{const o=t(i);return null!=o&&e.push(o),e},[])},e.filterMapAsync=function(e,t){return P.__awaiter(this,void 0,void 0,function*(){return e.reduce((e,i)=>P.__awaiter(this,void 0,void 0,function*(){const o=yield t(i);return null!=o&&e.push(o),e}),[])})},e.groupBy=function(e,t){return e.reduce((e,i)=>{const o=t(i);return e[o]=e[o]||[],e[o].push(i),e},Object.create(null))},e.makeHierarchical=function(e,i,o,s=!1){const r={name:"",relativePath:"",children:Object.create(null),descendants:[]},n=e.reduce((e,t)=>{let s=e,r="";for(const e of i(t)){r=o(r,e),void 0===s.children&&(s.children=Object.create(null));let i=s.children[e];void 0===i&&(s.children[e]=i={name:e,relativePath:r,children:void 0,descendants:void 0}),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(t),s=i}return s.value=t,e},r);return s?t(n,o,!0):n},e.compactHierarchy=t,e.uniqueBy=function(e,t,i){const o=Object.create(null);return e.filter(e=>{const s=t(e);return!o[s]&&(o[s]=t,!i||i(e))})}}(k||(k={}));var R=i(6),T=i(7);const E=6e4,N=864e5,B=T;B.distanceInWords=function(){const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"a few seconds",other:"less than {{count}} minutes"},xMinutes:{one:"a minute",other:"{{count}} minutes"},aboutXHours:{one:"an hour",other:"{{count}} hours"},xHours:{one:"an hour",other:"{{count}} hours"},xDays:{one:"a day",other:"{{count}} days"},aboutXMonths:{one:"a month",other:"{{count}} months"},xMonths:{one:"a month",other:"{{count}} months"},aboutXYears:{one:"a year",other:"{{count}} years"},xYears:{one:"a year",other:"{{count}} years"},overXYears:{one:"a year",other:"{{count}} years"},almostXYears:{one:"a year",other:"{{count}} years"}};return{localize:function(t,i,o){o=o||{},12===i&&"xMonths"===t&&(t="aboutXYears",i=1);const s=e[t];let r;return r="string"==typeof s?s:1===i?s.one:s.other.replace("{{count}}",i.toString()),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}();const U={addSuffix:!0,locale:B};var L;!function(e){function t(e){const t=new Date("number"==typeof e?e:e.getTime());return t.setHours(0,0,0,0),t}e.dateDaysFromNow=function(e,i=Date.now()){const o=t(i),s=t(e),r=o.getTime()-o.getTimezoneOffset()*E,n=s.getTime()-s.getTimezoneOffset()*E;return Math.round((r-n)/N)},e.startOfDay=t,e.toFormatter=function(e){return{fromNow:()=>Object(R.distanceInWordsToNow)(e,U),format:t=>Object(R.format)(e,t)}}}(L||(L={}));const A=i(8),O=i(9);var W;!function(e){e.debounce=function(e,t,i){return A(e,t,i)},e.once=function(e){return O(e)},e.propOf=function(e,t){const i=(e,t)=>{const o=void 0===i.value?t:`${i.value}.${t}`;return i.value=o,Object.assign(o=>i(e[t],o),{value:o})};return i(e,t)},e.seeded=function(e,t){let i=t;return(...t)=>{if(void 0!==i){const e=Promise.resolve(i);return i=void 0,e}return e(...t)}},e.wait=function(e){return P.__awaiter(this,void 0,void 0,function*(){yield new Promise(t=>setTimeout(t,e))})}}(W||(W={}));var M;!function(e){function t(e,t){for(const i of e)if(t(i))return!0;return!1}e.every=function(e,t){for(const i of e)if(!t(i))return!1;return!0},e.filter=function*(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)},e.filterMap=function*(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}},e.forEach=function(e,t){let i=0;for(const o of e)t(o,i),i++},e.find=function(e,t){for(const i of e)if(t(i))return i;return null},e.first=function(e){return e[Symbol.iterator]().next().value},e.flatMap=function*(e,t){for(const i of e)yield*t(i)},e.has=function(e,i){return t(e,e=>e===i)},e.isIterable=function(e){return"function"==typeof e[Symbol.iterator]},e.join=function(e,t){let i="";const o=e[Symbol.iterator]();let s=o.next();if(s.done)return i;for(;;){const e=s.value.toString();if((s=o.next()).done){i+=e;break}i+=`${e}${t}`}return i},e.last=function(e){let t=null;for(t of e);return t},e.map=function*(e,t){for(const i of e)yield t(i)},e.next=function(e){return e.next().value},e.skip=function*(e,t){let i=0;for(const o of e)i>=t&&(yield o),i++},e.some=t,e.take=function*(e,t){if(t>0){let i=0;for(const o of e)if(yield o,++i>=t)break}},e.union=function*(...e){for(const t of e)for(const e of t)yield e}}(M||(M={}));class I{constructor(){this._value="",this._pos=0}reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}join(e){return e.join("")}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class H{reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}join(e){return e.join("/")}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===H._fwd||t===H._bwd){if(!e)break;this._from++}else e=!1}return this}cmp(e){let t=0;const i=e.length;let o=this._from;for(;t<i&&o<this._to;){const i=e.charCodeAt(t)-this._value.charCodeAt(o);if(0!==i)return i;t+=1,o+=1}return i===this._to-this._from?0:t<i?-1:1}value(){return this._value.substring(this._from,this._to)}}H._fwd="/".charCodeAt(0),H._bwd="\\".charCodeAt(0);class j{isEmpty(){return void 0===this.left&&void 0===this.mid&&void 0===this.right&&void 0===this.element}}class G{constructor(e){this._iter=e}static forPaths(){return new G(new H)}static forStrings(){return new G(new I)}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let o;for(this._root||(this._root=new j,this._root.str=i.value()),o=this._root;;){const e=i.cmp(o.str);if(e>0)o.left||(o.left=new j,o.left.str=i.value()),o=o.left;else if(e<0)o.right||(o.right=new j,o.right.str=i.value()),o=o.right;else{if(!i.hasNext())break;i.next(),o.mid||(o.mid=new j,o.mid.str=i.value()),o=o.mid}}o.element=t}get(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i?i.element:void 0}delete(e){const t=this._iter.reset(e),i=[];let o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)i.push([1,o]),o=o.left;else if(e<0)i.push([-1,o]),o=o.right;else{if(!t.hasNext()){for(o.element=void 0;i.length>0&&o.isEmpty();){const[e,t]=i.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}o=t}break}t.next(),i.push([0,o]),o=o.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)o=o.left;else if(e<0)o=o.right;else{if(!t.hasNext())break;t.next(),i=o.element||i,o=o.mid}}return o&&o.element||i}findSuperstr(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext()){if(!i.mid)return;const e=new G(this._iter);return e._root=i.mid,e}t.next(),i=i.mid}}}forEach(e){this._forEach(this._root,[],e)}_forEach(e,t,i){void 0!==e&&(this._forEach(e.left,t,i),t.push(e.str),e.element&&i(e.element,this._iter.join(t)),this._forEach(e.mid,t,i),t.pop(),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}entries(){return this._iterator(this._root,[])}values(){return M.map(this.entries(),e=>e[0])}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,o=0;for(;!(t=e.next()).done;)if(i=t.value,++o>1)return;return i}*_iterator(e,t){void 0!==e&&(yield*this._iterator(e.left,t),t.push(e.str),e.element&&(yield[e.element,this._iter.join(t)]),yield*this._iterator(e.mid,t),t.pop(),yield*this._iterator(e.right,t))}}var Q,V=i(10);!function(e){function t(e,t,i=" "){const o=t-s(e);return o<=0?e:i.repeat(o)+e}function i(e,t,i=" "){const o=t-s(e);return o<=0?e:e+i.repeat(o)}function o(e,t,i="…"){if(!e)return e;const o=s(e);if(o<=t)return e;if(o===e.length)return`${e.substring(0,t-1)}${i}`;let r=Math.floor(t/(o/e.length)),n=s(e.substring(0,r));for(;n<t;)n+=s(e[r++]);return n>=t&&r--,`${e.substring(0,r)}${i}`}function s(e){if(!e||0===e.length)return 0;let t=0,i=0,o=0;const s=[...e=e.replace(h,"")];for(let e=0;e<s.length;e++){const r=s[e].codePointAt(0);if(!(r<=31||r>=127&&r<=159)&&!(r>=768&&r<=879))if(r>=128512&&r<=128591||r>=127744&&r<=128511||r>=128640&&r<=128767||r>=9728&&r<=9983||r>=9984&&r<=10175||r>=65024&&r<=65039||r>=129280&&r<=129535||r>=65024&&r<=65039||r>=8400&&r<=8447){if(r>=127995&&r<=127999)continue;i++,t+=2}else 8205!==r?(r>65535&&e++,t+=function(e){if(e>=4352&&(e<=4447||9001===e||9002===e||11904<=e&&e<=12871&&12351!==e||12880<=e&&e<=19903||19968<=e&&e<=42182||43360<=e&&e<=43388||44032<=e&&e<=55203||63744<=e&&e<=64255||65040<=e&&e<=65049||65072<=e&&e<=65131||65281<=e&&e<=65376||65504<=e&&e<=65510||110592<=e&&e<=110593||127488<=e&&e<=127569||131072<=e&&e<=262141))return!0;return!1}(r)?2:1):(o++,t-=2)}const r=i-o;return r>1&&(t+=r-1),t}const r=/\$\{([^|]*?)(?:\|(\d+)(\-|\?)?)?\}/g,n=/\$\{(\w*?)(?:\W|\d)*?\}/g;e.getTokensFromTemplate=function(e){const t=[];let i=r.exec(e);for(;null!=i;){const o=i[2],s=i[3];t.push({key:i[1],options:{truncateTo:null==o?void 0:parseInt(o,10),padDirection:"-"===s?"left":"right",collapseWhitespace:"?"===s}}),i=r.exec(e)}return t},e.interpolate=function(e,t){return e?void 0===t?e.replace(n,""):(e=e.replace(n,"$${this.$1}"),new Function(`return \`${e}\`;`).call(t)):e},e.lines=function*(e){let t=0;for(;t<e.length;){let i=e.indexOf("\n",t);-1===i&&(i=e.length),yield e.substring(t,i),t=i+1}},e.md5=function(e,t="base64"){return Object(V.createHash)("md5").update(e).digest(t)},e.pad=function(e,t=0,i=0,o=" "){return 0===t&&0===i?e:`${0===t?"":o.repeat(t)}${e}${0===i?"":o.repeat(i)}`},e.padLeft=t,e.padLeftOrTruncate=function(e,i,r){const n=s(e);return n<i?t(e,i,r):n>i?o(e,i):e},e.padRight=i,e.padOrTruncate=function(e,r,n){const a=r<0;r=Math.abs(r);const h=s(e);return h<r?a?t(e,r,n):i(e,r,n):h>r?o(e,r):e},e.padRightOrTruncate=function(e,t,r){const n=s(e);return n<t?i(e,t,r):n>t?o(e,t):e};const a=/[\\/:*?"<>|\x00-\x1f\x80-\x9f]/g;e.sanitizeForFileSystem=function(e,t="_"){return e?e.replace(a,t):e},e.sha1=function(e,t="base64"){return Object(V.createHash)("sha1").update(e).digest(t)},e.truncate=o;const h=/[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))/g;e.width=s}(Q||(Q={}));var K;!function(e){function t(e,t,i){return{major:"string"==typeof e?parseInt(e,10):e,minor:"string"==typeof t?parseInt(t,10):t,patch:"string"==typeof i?parseInt(i,10):i}}e.compare=function(e,t){return e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:0},e.from=t,e.fromString=function(e){const[i,o,s]=e.split(".");return t(i,o,s)}}(K||(K={}));var q=i(0);class z{}const Y=new class extends z{equals(e,t){return e===t}},X=new class extends z{equals(e,t,i={useId:!1,usePosition:!1}){return e===t||void 0!==e&&void 0!==t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&(!i.useId||e.document&&t.document?Y.equals(e.document,t.document):e.id===t.id)}},Z=new class extends z{equals(e,t){return e===t||void 0!==e&&void 0!==t&&e.scheme===t.scheme&&e.fsPath===t.fsPath}},J="gitlens",ee="GitLens",te="GitLens",ie="eamodio.gitlens";var oe;!function(e){e.CloseActiveEditor="workbench.action.closeActiveEditor",e.CloseAllEditors="workbench.action.closeAllEditors",e.CursorMove="cursorMove",e.Diff="vscode.diff",e.EditorScroll="editorScroll",e.ExecuteDocumentSymbolProvider="vscode.executeDocumentSymbolProvider",e.ExecuteCodeLensProvider="vscode.executeCodeLensProvider",e.Open="vscode.open",e.NextEditor="workbench.action.nextEditor",e.PreviewHtml="vscode.previewHtml",e.RevealLine="revealLine",e.SetContext="setContext",e.ShowReferences="editor.action.showReferences"}(oe||(oe={}));var se;!function(e){e.ActiveHasRemote="gitlens:activeHasRemote",e.ActiveIsBlameable="gitlens:activeIsBlameable",e.ActiveFileIsTracked="gitlens:activeIsTracked",e.ActiveIsRevision="gitlens:activeIsRevision",e.AnnotationStatus="gitlens:annotationStatus",e.CanToggleCodeLens="gitlens:canToggleCodeLens",e.Enabled="gitlens:enabled",e.ExplorersCanCompare="gitlens:explorers:canCompare",e.GitExplorer="gitlens:gitExplorer",e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.HasRemotes="gitlens:hasRemotes",e.HasRepository="gitlens:hasRepository",e.Key="gitlens:key",e.KeyMap="gitlens:keymap",e.ResultsExplorer="gitlens:resultsExplorer",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(se||(se={}));var re;!function(e){e.DebugConsole="debug",e.File="file",e.Git="git",e.GitLensGit="gitlens-git",e.Output="output"}(re||(re={}));var ne;!function(e){e.ArrowBack="↩",e.ArrowDown="↓",e.ArrowDropRight="⤷",e.ArrowLeft="←",e.ArrowLeftRight="↔",e.ArrowRight="→",e.ArrowRightHollow="⇨",e.ArrowUp="↑",e.ArrowUpRight="↗",e.Asterisk="∗",e.Check="✓",e.Dash="—",e.Dot="•",e.DoubleArrowLeft="≪",e.DoubleArrowRight="⋘",e.Ellipsis="…",e.MiddleEllipsis="⋯",e.Pensil="✎",e.Space=" ",e.SquareWithBottomShadow="❏",e.SquareWithTopShadow="❐",e.ZeroWidthSpace="​"}(ne||(ne={}));var ae;(ae||(ae={})).GitLensVersion="gitlensVersion";var he;!function(e){e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(he||(he={}));var ce;!function(e){e.Branch="branch",e.Branches="branches",e.Commit="commit",e.File="file",e.Repo="repo",e.Revision="revision"}(ce||(ce={}));class le{constructor(e,t,i="https",o,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=o}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return void 0!==this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}openUrl(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)return q.commands.executeCommand(oe.Open,q.Uri.parse(e))})}open(e){switch(e.type){case ce.Branch:return this.openBranch(e.branch);case ce.Branches:return this.openBranches();case ce.Commit:return this.openCommit(e.sha);case ce.File:return this.openFile(e.fileName,e.branch,void 0,e.range);case ce.Repo:return this.openRepo();case ce.Revision:return this.openFile(e.fileName,e.branch,e.sha,e.range)}}openRepo(){return this.openUrl(this.getUrlForRepository())}openBranches(){return this.openUrl(this.getUrlForBranches())}openBranch(e){return this.openUrl(this.getUrlForBranch(e))}openCommit(e){return this.openUrl(this.getUrlForCommit(e))}openFile(e,t,i,o){return this.openUrl(this.getUrlForFile(e,t,i,o))}}class de extends le{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/branch/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${e}-${o.start.line}`:`#${e}-${o.start.line}:${o.end.line}`),i?`${this.baseUrl}/src/${i}/${e}${s}`:t?`${this.baseUrl}/src/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}class ue extends le{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket Server")}get baseUrl(){const[e,t]=super.splitPath();return`https://${this.domain}/projects/${e}/repos/${t}`}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits?until=${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${o.start.line}`:`#${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/browse/${e}?at=${i}${s}`:t?`${this.baseUrl}/browse/${e}?at=${t}${s}`:`${this.baseUrl}/browse/${e}${s}`}}class me extends le{constructor(e,t,i,o,s){super(e,t,o,s,!0),this.urls=i}get name(){return this.formatName("Custom")}getUrlForRepository(){return Q.interpolate(this.urls.repository,{repo:this.path})}getUrlForBranches(){return Q.interpolate(this.urls.branches,{repo:this.path})}getUrlForBranch(e){return Q.interpolate(this.urls.branch,{repo:this.path,branch:e})}getUrlForCommit(e){return Q.interpolate(this.urls.commit,{repo:this.path,id:e})}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?Q.interpolate(this.urls.fileLine,{line:o.start.line}):Q.interpolate(this.urls.fileRange,{start:o.start.line,end:o.end.line})),i?Q.interpolate(this.urls.fileInCommit,{repo:this.path,id:i,file:e,line:s}):t?Q.interpolate(this.urls.fileInBranch,{repo:this.path,branch:t,file:e,line:s}):Q.interpolate(this.urls.file,{repo:this.path,file:e,line:s})}}class ge extends le{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitHub")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-L${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}class pe extends le{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitLab")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}const fe=`[${ee}]`;var ve;!function(e){e.Silent="silent",e.Errors="errors",e.Verbose="verbose"}(ve||(ve={}));class we{static configure(e){e.subscriptions.push(ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}static onConfigurationChanged(e){const t=ds.initializing(e);let i=ds.name("debug").value;(t||ds.changed(e,i))&&(this.debug=ds.get(i)),i=ds.name("outputLevel").value,(t||ds.changed(e,i))&&(this.level=ds.get(i),this.level===ve.Silent?void 0!==this.output&&(this.output.dispose(),this.output=void 0):this.output=this.output||q.window.createOutputChannel(ee))}static log(e,...t){this.debug&&console.log(this.timestamp,fe,e,...t),void 0!==this.output&&this.level===ve.Verbose&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static error(e,t,...i){this.debug&&console.error(this.timestamp,fe,t,e,...i),void 0!==this.output&&this.level!==ve.Silent&&this.output.appendLine((this.debug?[this.timestamp,t,e,...i]:[t,e,...i]).join(" "))}static warn(e,...t){this.debug&&console.warn(this.timestamp,fe,e,...t),void 0!==this.output&&this.level!==ve.Silent&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static get timestamp(){const e=new Date;return`[${e.toISOString().replace(/T/," ").replace(/\..+/,"")}:${("00"+e.getUTCMilliseconds()).slice(-3)}]`}}we.debug=!1,we.level=ve.Silent;const Ce=new Map([["bitbucket.org",(e,t)=>new de(e,t)],["github.com",(e,t)=>new ge(e,t)],["gitlab.com",(e,t)=>new pe(e,t)],["visualstudio.com",(e,t)=>new class extends le{constructor(e,t,i,o){super(e,t,i,o)}get name(){return"Visual Studio Team Services"}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/?version=GB${e}&_a=history`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`&line=${o.start.line}`:`&line=${o.start.line}&lineEnd=${o.end.line}`),i?`${this.baseUrl}/commit/${i}/?_a=contents&path=%2F${e}${s}`:t?`${this.baseUrl}/?path=%2F${e}&version=GB${t}&_a=contents${s}`:`${this.baseUrl}?path=%2F${e}${s}`}}(e,t)]]);class be{static factory(e){return(t,i)=>this.create(e,t,i)}static create(e,t,i){try{let o=t.toLowerCase();o.endsWith("visualstudio.com")&&(o="visualstudio.com");const s=e.get(o);if(void 0===s)return;return s(t,i)}catch(e){return void we.error(e,"RemoteProviderFactory")}}static createMap(e){const t=new Map(Ce);if(null!=e&&e.length>0)for(const i of e){const e=this.getCustomProvider(i);void 0!==e&&t.set(i.domain.toLowerCase(),e)}return t}static getCustomProvider(e){switch(e.type){case ss.Bitbucket:return(t,i)=>new de(t,i,e.protocol,e.name,!0);case ss.BitbucketServer:return(t,i)=>new ue(t,i,e.protocol,e.name,!0);case ss.Custom:return(t,i)=>new me(t,i,e.urls,e.protocol,e.name);case ss.GitHub:return(t,i)=>new ge(t,i,e.protocol,e.name,!0);case ss.GitLab:return(t,i)=>new pe(t,i,e.protocol,e.name,!0)}}}var ye=i(11),_e=i(3),xe=i(2);const Se="win32"===process.platform;var $e=i(12),De=i(13);class Fe extends q.Uri{constructor(e,t){if(void 0===e)return void super();if(e.scheme===re.GitLensGit){const t=JSON.parse(e.query),[i,o]=Fe.ensureValidUNCPath(e.authority,xe.resolve(t.repoPath,t.fileName));return super({scheme:e.scheme,authority:i,path:o,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,void(!Dt.isStagedUncommitted(t.sha)&&Dt.isUncommitted(t.sha)||(this.sha=t.sha))}if(void 0===t)return void super(e);if("string"==typeof t)return super(e),void(this.repoPath=t);const[i,o]=Fe.ensureValidUNCPath(e.authority,xe.resolve(t.repoPath,t.fileName||e.fsPath));super({scheme:e.scheme,authority:i,path:o,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,!Dt.isStagedUncommitted(t.sha)&&Dt.isUncommitted(t.sha)||(this.sha=t.sha)}get shortSha(){return this.sha&&Dt.shortenSha(this.sha)}fileUri(e=!0){return q.Uri.file(e&&this.sha?this.path:this.fsPath)}getFormattedPath(e=Q.pad(ne.Dot,2,2),t){let i=xe.dirname(this.fsPath);return this.repoPath&&(i=xe.relative(this.repoPath,i)),void 0!==t&&(i=xe.relative(t,i)),(i=Dt.normalizePath(i))&&"."!==i?`${xe.basename(this.fsPath)}${e}${i}`:xe.basename(this.fsPath)}getRelativePath(e){let t=xe.relative(this.repoPath||"",this.fsPath);return void 0!==e&&(t=xe.relative(e,t)),Dt.normalizePath(t)}static ensureValidUNCPath(e,t){if("\\"===t[0]&&"\\"===t[1]){const i=t.indexOf("\\",2);-1===i?(e=t.substring(2),t="\\"):(e=t.substring(2,i),t=t.substring(i)||"\\")}return[e,t]}static fromCommit(e,t=!1){return t?new Fe(e.previousUri,{repoPath:e.repoPath,sha:e.previousSha}):new Fe(e.uri,e)}static fromFileStatus(e,t,i,o=!1){const s=q.Uri.file(xe.resolve(t,o&&e.originalFileName||e.fileName));return new Fe(s,void 0===i?t:{repoPath:t,sha:i})}static fromRepoPath(e,t){return new Fe(q.Uri.file(e),void 0===t?e:{repoPath:e,sha:t})}static fromRevisionUri(e){return new Fe(e)}static fromUri(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(e instanceof Fe)return e;if(!t.isTrackable(e))return new Fe(e);if(e.scheme===re.GitLensGit)return new Fe(e);if(e.scheme===re.Git){const i=JSON.parse(e.query),o=yield t.getRepoPath(i.path);return new Fe(e,{fileName:i.path,repoPath:o,sha:""===i.ref||null==i.ref?void 0:i.ref})}const i=t.getGitUriForVersionedFile(e);return i||new Fe(e,yield t.getRepoPath(e))})}static getDirectory(e,t){let i=xe.dirname(e);return void 0!==t&&(i=xe.relative(t,i)),(i=Dt.normalizePath(i))&&"."!==i?i:""}static getFormattedPath(e,t=Q.pad(ne.Dot,2,2),i){let o;if(e instanceof q.Uri){if(e instanceof Fe)return e.getFormattedPath(t,i);o=e.fsPath}else o=e;const s=Fe.getDirectory(o,i);return s?`${xe.basename(o)}${t}${s}`:xe.basename(o)}static getRelativePath(e,t,i){let o;if(e instanceof q.Uri){if(e instanceof Fe)return e.getRelativePath(t);o=e.fsPath}else o=e;let s=xe.relative(i||"",o);return void 0!==t&&(s=xe.relative(t,s)),Dt.normalizePath(s)}static toRevisionUri(e,t,i){let o,s,r;"string"==typeof e?(o="string"==typeof t?t:xe.resolve(i,t.fileName),s=e,r=Dt.shortenSha(s)):(o=e.fsPath,i=e.repoPath,s=e.sha,r=e.shortSha);const n={fileName:Dt.normalizePath(xe.relative(i,o)),repoPath:i,sha:s},a=xe.parse(o);return q.Uri.parse(`${re.GitLensGit}:${xe.join(a.dir,a.name)}:${r}${a.ext}?${JSON.stringify(n)}`)}}var Pe;!function(e){e.Blame="blame",e.Branch="branch",e.File="file",e.Stash="stash",e.StashFile="stash-file"}(Pe||(Pe={}));class ke{constructor(e,t,i,o,s,r,n,a,h,c){this.repoPath=t,this.sha=i,this.author=o,this.date=s,this.message=r,this.type=e,this._fileName=n||"",this.originalFileName=a,this._previousSha=h,this.previousFileName=c}get fileName(){return this.isFile?this._fileName:""}get shortSha(){return void 0===this._shortSha&&(this._shortSha=pt.shortenSha(this.sha)),this._shortSha}get isFile(){return this.type===Pe.Blame||this.type===Pe.File||this.type===Pe.StashFile}get isStash(){return this.type===Pe.Stash||this.type===Pe.StashFile}get isStagedUncommitted(){return void 0===this._isStagedUncommitted&&(this._isStagedUncommitted=pt.isStagedUncommitted(this.sha)),this._isStagedUncommitted}get isUncommitted(){return void 0===this._isUncommitted&&(this._isUncommitted=pt.isUncommitted(this.sha)),this._isUncommitted}get previousFileShortSha(){return pt.shortenSha(this.previousFileSha)}get previousSha(){return this._previousSha}set previousSha(e){e!==this._previousSha&&(this._previousSha=e,this._resolvedPreviousFileSha=void 0)}get previousShortSha(){return this.previousSha&&pt.shortenSha(this.previousSha)}get previousUri(){return this.previousFileName?q.Uri.file(xe.resolve(this.repoPath,this.previousFileName||this.originalFileName)):this.uri}get uri(){return q.Uri.file(xe.resolve(this.repoPath,this.fileName))}formatDate(e){return void 0===this._dateFormatter&&(this._dateFormatter=L.toFormatter(this.date)),this._dateFormatter.format(e)}fromNow(){return void 0===this._dateFormatter&&(this._dateFormatter=L.toFormatter(this.date)),this._dateFormatter.fromNow()}getFormattedPath(e=Q.pad(ne.Dot,2,2)){return Fe.getFormattedPath(this.fileName,e)}resolvePreviousFileSha(e){return P.__awaiter(this,void 0,void 0,function*(){void 0===this._resolvedPreviousFileSha&&(this._resolvedPreviousFileSha=yield e.resolveReference(this.repoPath,this.previousFileSha,this.fileName?this.previousUri:void 0))})}toGitUri(e=!1){return Fe.fromCommit(this,e)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}}class Re extends ke{constructor(e,t,i,o,s,r,n,a,h,c){super(Pe.Blame,e,t,i,o,s,r,n,a,h),this.lines=c}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:`${this.sha}^`}with(e){return new Re(this.repoPath,e.sha||this.sha,this.author,this.date,this.message,e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),this.getChangedValue(e.lines,e.sha||e.fileName?[]:this.lines)||[])}}class Te{constructor(e,t,i=!1,o,s=0,r=0){this.repoPath=e,t.startsWith("remotes/")&&(t=t.substring(8),this.remote=!0),this.current=i,this.name=t,this.tracking=""===o||null==o?void 0:o,this.state={ahead:s,behind:r}}getName(){return this.remote?this.name.substring(this.name.indexOf("/")+1):this.name}getRemote(){return this.remote?Te.getRemote(this.name):void 0!==this.tracking?Te.getRemote(this.tracking):void 0}static getRemote(e){return e.substring(0,e.indexOf("/"))}}const Ee=/^(.*?)\t(.*?)(?:\t(.*?))?$/gm,Ne=/^\s*(\d+)\sfiles? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,Be=/^@@ -([\d]+),([\d]+) [+]([\d]+),([\d]+) @@([\s\S]*?)(?=^@@)/gm;class Ue{static parse(e,t=!1){if(!e)return;const i=[];let o,s,r,n=null;do{if(null==(n=Be.exec(`${e}\n@@`)))break;o=(" "+n[5]).substr(1),s=parseInt(n[3],10),r=parseInt(n[1],10),i.push(new class{constructor(e,t,i){this.currentPosition=t,this.previousPosition=i,this._chunk=e}get lines(){return void 0===this._lines&&(this._lines=Ue.parseChunk(this._chunk),this._chunk=void 0),this._lines}}(o,{start:s,end:s+parseInt(n[4],10)},{start:r,end:r+parseInt(n[2],10)}))}while(null!=n);if(!i.length)return;return{diff:t?e:void 0,chunks:i}}static parseChunk(e){const t=M.skip(Q.lines(e),1),i=[],o=[];let s=0;for(const e of t)switch(e[0]){case"+":i.push({line:` ${e.substring(1)}`,state:"added"}),s>0?s--:o.push(void 0);break;case"-":s++,o.push({line:` ${e.substring(1)}`,state:"removed"});break;default:for(;s>0;)s--,i.push(void 0);i.push({line:e,state:"unchanged"}),o.push({line:e,state:"unchanged"})}const r=[];let n=void 0,a=void 0;for(let e=0;e<i.length;e++)if(void 0!==(a=i[e]))n={line:a.line,state:a.state,previous:[o[e]]},r.push(n);else{if(void 0===n)continue;if(void 0===n.previous){n.previous=[o[e]];continue}n.previous.push(o[e])}return r}static parseNameStatus(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=Ee.exec(e)))break;i.push(at.parseStatusFile(t,o[1],o[2],o[3]))}while(null!=o);if(i.length)return i}static parseShortStat(e){if(!e)return;const t=Ne.exec(e);if(null==t)return;const i=t[1],o=t[2],s=t[3];return{files:null==i?0:parseInt(i,10),insertions:null==o?0:parseInt(o,10),deletions:null==s?0:parseInt(s,10)}}}const Le=new Map;class Ae extends ke{constructor(e,t,i,o,s,r,n,a,h,c,l,d,u,m){super(e,t,i,o,r,n,a,l,d,u),this.email=s,this.fileStatuses=h,this.status=c,this.parentShas=m}get isMerge(){return this.parentShas&&this.parentShas.length>1}get nextShortSha(){return this.nextSha&&pt.shortenSha(this.nextSha)}get nextUri(){return this.nextFileName?q.Uri.file(xe.resolve(this.repoPath,this.nextFileName)):this.uri}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:this.isFile&&this.previousSha?this.previousSha:`${this.sha}^`}getDiffStatus(){let e=0,t=0,i=0;for(const o of this.fileStatuses)switch(o.status){case"A":case"?":e++;break;case"D":t++;break;default:i++}return`+${e} ~${i} -${t}`}getGravatarUri(e){const t=this.email?`${this.email.trim().toLowerCase()}`:"";let i=Le.get(t);if(void 0!==i)return i;const o=(i=q.Uri.parse(`https://www.gravatar.com/avatar/${this.email?Q.md5(this.email,"hex"):"00000000000000000000000000000000"}.jpg?s=22&d=${e}`)).toString;return i.toString=function(e){return o.call(i,!0)},Le.set(t,i),i}toFileCommit(e){let t;if("string"==typeof e){const i=pt.normalizePath(xe.relative(this.repoPath,e));if(void 0===(t=this.fileStatuses.find(e=>e.fileName===i)))return}else t=e;const i=this.isFile?this.previousSha:`${this.sha}^`;return this.with({type:this.isStash?Pe.StashFile:Pe.File,fileName:t.fileName,originalFileName:t.originalFileName,previousSha:i,previousFileName:t.originalFileName||t.fileName,status:t.status,fileStatuses:[t]})}with(e){return new Ae(e.type||this.type,this.repoPath,this.getChangedValue(e.sha,this.sha),e.author||this.author,e.email||this.email,e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),void 0)}}var Oe;!function(e){e.Fetch="fetch",e.Push="push"}(Oe||(Oe={}));class We{constructor(e,t,i,o,s,r){this.repoPath=e,this.name=t,this.domain=i,this.path=o,this.provider=s,this.types=r}}var Me;!function(e){e.Config="config",e.Remotes="remotes",e.Repository="repository",e.Stashes="stashes"}(Me||(Me={}));class Ie{constructor(e){this.repository=e,this.changes=[]}changed(e,t=!1){return t?1===this.changes.length&&this.changes[0]===e:this.changes.includes(e)}}var He;(He||(He={})).StatusNode="statusNode";class je extends q.Disposable{constructor(e,t,i,o,s,r){super(()=>this.dispose()),this.folder=e,this.path=t,this.root=i,this.git=o,this.onAnyRepositoryChanged=s,this._onDidChange=new q.EventEmitter,this._onDidChangeFileSystem=new q.EventEmitter,this._fireChangeDebounced=void 0,this._fireFileSystemChangeDebounced=void 0,this._fsWatchCounter=0,this._pendingChanges={},this.formattedName=i?e.name:`${e.name} (${xe.relative(e.uri.fsPath,t)})`,this.index=e.index,this.name=e.name,this.normalizedPath=(this.path.endsWith("/")?this.path:`${this.path}/`).toLowerCase(),this._suspended=r;const n=q.workspace.createFileSystemWatcher(new q.RelativePattern(e,"**/.git/{config,index,HEAD,refs/stash,refs/heads/**,refs/remotes/**}"));this._disposable=q.Disposable.from(n,n.onDidChange(this.onRepositoryChanged,this),n.onDidCreate(this.onRepositoryChanged,this),n.onDidDelete(this.onRepositoryChanged,this),ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}get onDidChange(){return this._onDidChange.event}get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}dispose(){this.stopWatchingFileSystem(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=ds.initializing(e),i=ds.name("remotes").value;(t||ds.changed(e,i,this.folder.uri))&&(this._providerMap=be.createMap(ds.get(i,this.folder.uri)),t||(this._remotes=void 0,this.fireChange(Me.Remotes)))}onFileSystemChanged(e){/\.git/.test(e.fsPath)||this.fireFileSystemChange(e)}onRepositoryChanged(e){if(void 0!==e&&e.path.endsWith("refs/stash"))this.fireChange(Me.Stashes);else{if(this._branch=void 0,void 0!==e&&e.path.endsWith("refs/remotes"))return this._remotes=void 0,void this.fireChange(Me.Remotes);if(void 0!==e&&e.path.endsWith("config"))return this._remotes=void 0,void this.fireChange(Me.Config,Me.Remotes);this.onAnyRepositoryChanged(),this.fireChange(Me.Repository)}}fireChange(...e){void 0===this._fireChangeDebounced&&(this._fireChangeDebounced=W.debounce(this.fireChangeCore,250)),void 0===this._pendingChanges.repo&&(this._pendingChanges.repo=new Ie(this));const t=this._pendingChanges.repo;for(const i of e)t.changes.includes(i)||t.changes.push(i);this._suspended||this._fireChangeDebounced(t)}fireChangeCore(e){this._pendingChanges.repo=void 0,this._onDidChange.fire(e)}fireFileSystemChange(e){void 0===this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=W.debounce(this.fireFileSystemChangeCore,2500)),void 0===this._pendingChanges.fs&&(this._pendingChanges.fs={repository:this,uris:[]});const t=this._pendingChanges.fs;t.uris.push(e),this._suspended||this._fireFileSystemChangeDebounced(t)}fireFileSystemChangeCore(e){this._pendingChanges.fs=void 0,this._onDidChangeFileSystem.fire(e)}containsUri(e){return e instanceof Fe&&(e=void 0!==e.repoPath?q.Uri.file(e.repoPath):e.fileUri()),this.folder===q.workspace.getWorkspaceFolder(e)}getBranch(){return void 0===this._branch&&(this._branch=this.git.getBranch(this.path)),this._branch}getBranches(){return this.git.getBranches(this.path)}getChangedFilesCount(e){return this.git.getChangedFilesCount(this.path,e)}getRemotes(){if(void 0===this._remotes){if(void 0===this._providerMap){const e=ds.get(ds.name("remotes").value,this.folder.uri);this._providerMap=be.createMap(e)}this._remotes=this.git.getRemotesCore(this.path,this._providerMap)}return this._remotes}getStashList(){return this.git.getStashList(this.path)}getStatus(){return this.git.getStatusForRepo(this.path)}getTags(){return this.git.getTags(this.path)}hasRemote(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getBranch();return void 0!==e&&void 0!==e.tracking})}hasRemotes(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getRemotes();return void 0!==e&&e.length>0})}resume(){this._suspended&&(this._suspended=!1,void 0!==this._pendingChanges.repo&&this._fireChangeDebounced(this._pendingChanges.repo),void 0!==this._pendingChanges.fs&&this._fireFileSystemChangeDebounced(this._pendingChanges.fs))}startWatchingFileSystem(){if(this._fsWatchCounter++,void 0!==this._fsWatcherDisposable)return;const e=q.workspace.createFileSystemWatcher(new q.RelativePattern(this.folder,"**"));this._fsWatcherDisposable=q.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this))}stopWatchingFileSystem(){void 0!==this._fsWatcherDisposable&&(--this._fsWatchCounter>0||(this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}}class Ge extends Ae{constructor(e,t,i,o,s,r,n,a,h,c,l,d){super(e,i,o,"You",void 0,s,r,n,a,h,c,void 0===l?`${o}^`:l,d),this.stashName=t}get shortSha(){return this.stashName}with(e){return new Ge(e.type||this.type,this.stashName,this.repoPath,this.getChangedValue(e.sha,this.sha),e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName))}}class Qe{constructor(e,t,i,o,s){this.repoPath=e,this.indexStatus=t,this.workTreeStatus=i,this.fileName=o,this.originalFileName=s}get status(){return this.indexStatus||this.workTreeStatus||"?"}get staged(){return void 0!==this.indexStatus}get uri(){return q.Uri.file(xe.resolve(this.repoPath,this.fileName))}getFormattedDirectory(e=!1){return Qe.getFormattedDirectory(this,e)}getFormattedPath(e=Q.pad(ne.Dot,2,2)){return Qe.getFormattedPath(this,e)}getOcticon(){return m(this.status)}with(e){return new Qe(this.repoPath,this.getChangedValue(e.indexStatus,this.indexStatus),this.getChangedValue(e.workTreeStatus,this.workTreeStatus),e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName))}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}static getFormattedDirectory(e,t=!1,i){const o=Fe.getDirectory(e.fileName,i);return t&&"R"===e.status&&e.originalFileName?`${o} ${Q.pad(ne.ArrowLeft,1,1)} ${e.originalFileName}`:o}static getFormattedPath(e,t=Q.pad(ne.Dot,2,2),i){return Fe.getFormattedPath(e.fileName,t,i)}static getRelativePath(e,t){return Fe.getRelativePath(e.fileName,t)}}const Ve={"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",C:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",T:"$(diff-modified)",U:"$(alert)",X:"$(question)",B:"$(question)"},Ke={"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",C:"icon-status-copied.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",T:"icon-status-modified.svg",U:"icon-status-conflict.svg",X:"icon-status-unknown.svg",B:"icon-status-unknown.svg"};class qe{constructor(e,t){this.repoPath=e,this.name=t}}class ze{static parse(e,t,i){if(!e)return;const o=new Map,s=new Map,r=[];let n,a,h=t&&i,c=void 0,l=!0;for(n of Q.lines(e))if(!((a=n.split(" ")).length<2))if(void 0!==c)switch(a[0]){case"author":c.author=pt.isUncommitted(c.sha)?"You":a.slice(1).join(" ").trim();break;case"author-time":c.authorDate=a[1];break;case"author-tz":c.authorTimeZone=a[1];break;case"summary":c.summary=a.slice(1).join(" ").trim();break;case"previous":c.previousSha=a[1],c.previousFileName=a.slice(2).join(" ");break;case"filename":c.fileName=a.slice(1).join(" "),l&&void 0===t&&(t=pt.normalizePath(i.replace(i.startsWith("/")?`/${c.fileName}`:c.fileName,"")),h=pt.normalizePath(xe.relative(t,i))),l=!1,ze.parseEntry(c,t,h,s,o,r),c=void 0}else c={sha:a[0],originalLine:parseInt(a[1],10)-1,line:parseInt(a[2],10)-1,lineCount:parseInt(a[3],10)};s.forEach(e=>{if(void 0===e.author)return;const t=o.get(e.author);void 0!==t&&(t.lineCount+=e.lines.length)});return{repoPath:t,authors:new Map([...o.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:s,lines:r}}static parseEntry(e,t,i,o,s,r){let n=o.get(e.sha);if(void 0===n){if(void 0!==e.author){let t=s.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},s.set(e.author,t))}n=new Re(t,e.sha,e.author,new Date(1e3*e.authorDate),e.summary,i,i!==e.fileName?e.fileName:void 0,e.previousSha,e.previousSha&&e.previousFileName,[]),o.set(e.sha,n)}for(let t=0,i=e.lineCount;t<i;t++){const i={sha:e.sha,line:e.line+t,originalLine:e.originalLine+t};n.previousSha&&(i.previousSha=n.previousSha),n.lines.push(i),r[i.line]=i}}}const Ye=/^(\*?)\s+(.+?)\s+([0-9,a-f]+)\s+(?:\[(.*?\/.*?)(?:\:\s(.*)\]|\]))?/gm,Xe=/^(?:ahead\s([0-9]+))?[,\s]*(?:behind\s([0-9]+))?/;class Ze{static parse(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=Ye.exec(e)))break;const[s,r]=this.parseState(o[5]);i.push(new Te(t,o[2],"*"===o[1],o[4],s,r))}while(null!=o);if(i.length)return i}static parseState(e){if(null==e)return[0,0];const t=Xe.exec(e);if(null==t)return[0,0];const i=parseInt(t[1],10),o=parseInt(t[2],10);return[isNaN(i)?0:i,isNaN(o)?0:o]}}const Je=/diff --git a\/(.*) b\/(.*)/;class et{static parse(e,t,i,o,s,r,n,a){if(!e)return;const h=new Map,c=new Map;let l,d=void 0;void 0!==i&&(i=pt.normalizePath(i));let u,m=void 0,g=void 0,p=void 0,f=0,v=!0,w=!1;const C=Q.lines(e);for(;;){if(w)w=!1;else{if((p=C.next()).done)break;g=p.value}if(n&&r&&f>=r)break;if(!((u=g.split(" ")).length<2))if(void 0!==m){switch(u[0]){case"author":m.author=pt.isUncommitted(m.sha)?"You":u.slice(1).join(" ").trim();break;case"author-email":m.authorEmail=u.slice(1).join(" ").trim();break;case"author-date":m.authorDate=u[1];break;case"parents":m.parentShas=u.slice(1);break;case"summary":for(m.summary=u.slice(1).join(" ").trim();!(p=C.next()).done&&(g=p.value);){if("filename ?"===g){w=!0;break}m.summary+=`\n${g}`}break;case"filename":if(t===Pe.Branch){if((p=C.next()).done)break;if((g=p.value)&&(pt.shaRegex.test(g)||g.startsWith("warning:"))){w=!0;continue}let e=!1;for(;!(p=C.next()).done;){if(g=p.value,u=g.split(" "),pt.shaRegex.test(u[0])||g.startsWith("warning:")){w=!0;break}if(e)continue;if("diff"===u[0]){e=!0;const t=Je.exec(g);if(null!=t){m.fileName=t[1];const e=t[2];m.fileName!==e&&(m.originalFileName=e)}continue}null==m.fileStatuses&&(m.fileStatuses=[]);const t={status:g[0],fileName:g.substring(1),originalFileName:void 0};this.parseFileName(t),t.fileName&&m.fileStatuses.push(t)}m.fileStatuses&&(m.fileName=k.filterMap(m.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", "))}else C.next(),void 0===(g=(p=C.next()).value)||g.startsWith("warning:")||(m.status=g[0],m.fileName=g.substring(1),this.parseFileName(m));v&&void 0===i&&t===Pe.File&&void 0!==o?(i=pt.normalizePath(o.replace(o.startsWith("/")?`/${m.fileName}`:m.fileName,"")),l=pt.normalizePath(xe.relative(i,o))):l=m.fileName,v=!1;const e=c.get(m.sha);void 0===e&&f++,d=et.parseEntry(m,e,t,i,l,c,h,d),m=void 0}if(p.done)break}else{if(!pt.shaRegex.test(u[0]))continue;m={sha:u[0]}}}return{repoPath:i,authors:h,commits:c,sha:s,count:f,maxCount:r,range:a,truncated:!!(r&&f>=r&&1!==r)}}static parseEntry(e,t,i,o,s,r,n,a){if(void 0===t){if(void 0!==e.author){let t=n.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},n.set(e.author,t))}const a=s!==e.fileName?e.fileName:void 0;i===Pe.File&&(e.fileStatuses=[{status:e.status,fileName:s,originalFileName:a}]),t=new Ae(i,o,e.sha,e.author,e.authorEmail,new Date(1e3*e.authorDate),e.summary,s,e.fileStatuses||[],e.status,a,void 0,void 0,e.parentShas),r.set(e.sha,t)}return void 0!==a&&(a.previousSha=t.sha,t.nextSha=t.sha!==a.sha?a.sha:a.nextSha,i===Pe.File&&(a.previousFileName=t.originalFileName||t.fileName,t.nextFileName=a.originalFileName||a.fileName)),t}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}const tt=/^(.*)\t(.*)\s\((.*)\)$/gm,it=/^(?:git:\/\/(.*?)\/|https:\/\/(.*?)\/|http:\/\/(.*?)\/|git@(.*):|ssh:\/\/(?:.*@)?(.*?)(?::.*?)?\/)(.*)$/;class ot{static parse(e,t,i){if(!e)return[];const o=[],s=Object.create(null);let r=null;do{if(null==(r=tt.exec(e)))break;const n=r[2],[a,h]=this.parseGitUrl(n),c=`${a}/${h}`;let l=s[c];void 0===l?(l=new We(t,r[1],a,h,i(a,h),[{url:n,type:r[3]}]),o.push(l),s[c]=l):l.types.push({url:n,type:r[3]})}while(null!=r);return o.length?o:[]}static parseGitUrl(e){const t=it.exec(e);return null==t?["",""]:[t[1]||t[2]||t[3]||t[4]||t[5],t[6].replace(/\.git\/?$/,"")]}}class st{static parse(e,t){const i=this.parseEntries(e);if(void 0===i)return;const o=new Map;for(let e=0,s=i.length;e<s;e++){const s=i[e];let r=o.get(s.sha);void 0===r&&(r=new Ge(Pe.Stash,s.stashName,t,s.sha,new Date(1e3*s.date),s.summary,s.fileNames,s.fileStatuses||[]),o.set(s.sha,r))}return{repoPath:t,commits:o}}static parseEntries(e){if(!e)return;const t=e.split("\n");if(0===t.length)return;const i=[];let o=void 0,s=-1;for(;++s<t.length;){let e=t[s].split(" ");if(!(e.length<2))if(void 0!==o)switch(e[0]){case"author-date":o.date=e[1];break;case"summary":for(o.summary=e.slice(1).join(" ").trim();++s<t.length;){const e=t[s];if(!e)break;if("filename ?"===e){s--;break}o.summary+=`\n${t[s]}`}break;case"reflog-selector":o.stashName=e.slice(1).join(" ").trim();break;case"filename":const r=t[s+1];if(r&&pt.shaRegex.test(r)){i.push(o),o=void 0;continue}for(s++;++s<t.length;){const i=t[s];if(e=i.split(" "),pt.shaRegex.test(e[0])){s--;break}null==o.fileStatuses&&(o.fileStatuses=[]);const r={status:i[0],fileName:i.substring(1),originalFileName:void 0};this.parseFileName(r),r.fileName&&o.fileStatuses.push(r)}o.fileStatuses&&(o.fileNames=k.filterMap(o.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", ")),i.push(o),o=void 0}else{if(!pt.shaRegex.test(e[0]))continue;o={sha:e[0]}}}return i}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}const rt=/(?:ahead ([0-9]+))/,nt=/(?:behind ([0-9]+))/;class at{static parse(e,t,i){if(!e)return;const o=e.split("\n").filter(e=>!!e);if(0===o.length)return;const s={branch:"",repoPath:pt.normalizePath(t),sha:"",state:{ahead:0,behind:0},files:[]};return i>=2?this.parseV2(o,t,s):this.parseV1(o,t,s),s}static parseV1(e,t,i){let o=-1;for(;++o<e.length;){const s=e[o];if(s.startsWith("##")){const e=s.split(" ");if([i.branch,i.upstream]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),o=rt.exec(t);i.state.ahead=null==o?0:+o[1]||0;const s=nt.exec(t);i.state.behind=null==s?0:+s[1]||0}}else{const e=s.substring(0,2),o=s.substring(3);if("R"===e[0]){const[s,r]=o.replace(/\"/g,"").split("->");i.files.push(this.parseStatusFile(t,e,r.trim(),s.trim()))}else i.files.push(this.parseStatusFile(t,e,o))}}}static parseV2(e,t,i){let o=-1;for(;++o<e.length;){const s=e[o];if(s.startsWith("#")){const e=s.split(" ");switch(e[1]){case"branch.oid":i.sha=e[2];break;case"branch.head":i.branch=e[2];break;case"branch.upstream":i.upstream=e[2];break;case"branch.ab":i.state.ahead=+e[2].substring(1),i.state.behind=+e[3].substring(1)}}else{const e=s.split(" ");switch(e[0][0]){case"1":i.files.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":const o=e.slice(9).join(" ").split("\t");i.files.push(this.parseStatusFile(t,e[1],o[0],o[1]));break;case"u":i.files.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":i.files.push(this.parseStatusFile(t," ?",e.slice(1).join(" ")))}}}}static parseStatusFile(e,t,i,o){let s="."!==t[0]?t[0].trim():void 0;""!==s&&null!==s||(s=void 0);let r=void 0;return t.length>1&&(""!==(r="."!==t[1]?t[1].trim():void 0)&&null!==r||(r=void 0)),new Qe(e,s,r,i,o)}}class ht{static parse(e,t){if(!e)return;const i=k.filterMap(e.split("\n"),e=>e?new qe(t,e):void 0);if(i.length)return i}}let ct;const lt=["blame","--root","--incremental"],dt=["log","--name-status","--full-history","-M","--format=%H -%nauthor %an%nauthor-email %ae%nauthor-date %at%nparents %P%nsummary %B%nfilename ?"],ut=["stash","list","--name-status","--full-history","-M","--format=%H -%nauthor-date %at%nreflog-selector %gd%nsummary %B%nfilename ?"],mt=[/Not a git repository/,/is outside repository/,/no such path/,/does not have any commits/,/Path \'.*?\' does not exist in/,/Path \'.*?\' exists on disk, but not in/,/no upstream configured for branch/,/ambiguous argument '.*?': unknown revision or path not in the working tree/],gt=new Map;class pt{static gitInfo(){return ct}static getEncoding(e){return void 0!==e&&$e.encodingExists(e)?e:"utf8"}static getGitInfo(e){return P.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();ct=yield d(e);const i=process.hrtime(t);return we.log(`Git found: ${ct.version} @ ${"git"===ct.path?"PATH":ct.path} in ${1e3*i[0]+Math.floor(i[1]/1e6)} ms`),ct})}static getVersionedFile(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){const o=yield pt.show(e,t,i,{encoding:"binary"});if(void 0===o)return;pt.isStagedUncommitted(i)&&(i="");const s=Q.truncate(Q.sanitizeForFileSystem(pt.isSha(i)?pt.shortenSha(i):i),50,""),r=xe.extname(t);return new Promise((n,a)=>{De.file({prefix:`${xe.basename(t,r)}-${s}__`,postfix:r},(s,r,h,c)=>{s?a(s):(we.log(`getVersionedFile[${r}]('${e}', '${t}', ${i})`),_e.appendFile(r,o,{encoding:"binary"},e=>{e?a(e):n(r)}))})})})}static isResolveRequired(e){return pt.isSha(e)&&!pt.shaStrictRegex.test(e)}static isSha(e){return pt.shaRegex.test(e)}static isStagedUncommitted(e){return void 0!==e&&pt.stagedUncommittedRegex.test(e)}static isUncommitted(e){return void 0!==e&&pt.uncommittedRegex.test(e)}static normalizePath(e){return e&&e.replace(/\\/g,"/")}static shortenSha(e){if(pt.isStagedUncommitted(e))return"index";if(pt.isUncommitted(e))return"";const t=e.indexOf("^");if(t>6){const i=e.substring(t).substring(0,5);return`${e.substring(0,8-i.length)}${i}`}return e.substring(0,8)}static splitPath(e,t,i=!0){if(t){e=this.normalizePath(e);const i=((t=this.normalizePath(t)).endsWith("/")?t:`${t}/`).toLowerCase();e.toLowerCase().startsWith(i)&&(e=e.substring(i.length))}else t=this.normalizePath(i?xe.dirname(e):t),e=this.normalizePath(i?xe.basename(e):e);return[e,t]}static validateVersion(e,t){const[i,o]=ct.version.split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}static blame(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){const[s,r]=pt.splitPath(t,e),n=[...lt];o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`);let a;return i&&(pt.isStagedUncommitted(i)?(n.push("--contents"),n.push("-"),a=yield pt.show(e,t,":")):n.push(i)),p({cwd:r,stdin:a},...n,"--",s)})}static blame_contents(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){const[s,r]=pt.splitPath(t,e),n=[...lt];return o.ignoreWhitespace&&n.push("-w"),null!=o.startLine&&null!=o.endLine&&n.push(`-L ${o.startLine},${o.endLine}`),n.push("--contents"),n.push("-"),p({cwd:r,stdin:i},...n,"--",s)})}static branch(e,t={all:!1}){const i=["branch","-vv"];return t.all&&i.push("-a"),p({cwd:e},...i)}static checkout(e,t,i){const[o,s]=pt.splitPath(t,e);return p({cwd:s},"checkout",i,"--",o)}static config_get(e,t){return P.__awaiter(this,void 0,void 0,function*(){try{return(yield f({cwd:t||""},"config","--get",e)).trim()}catch(e){return}})}static diff(e,t,i,o,s={}){const r=["diff","--diff-filter=M","-M","--no-ext-diff"];i&&r.push(pt.isStagedUncommitted(i)?"--staged":i),o&&r.push(pt.isStagedUncommitted(o)?"--staged":o);return p({cwd:e,encoding:"utf8"===s.encoding?"utf8":"binary"},...r,"--",t)}static diff_nameStatus(e,t,i,o={}){const s=["diff","--name-status","-M","--no-ext-diff"];return o&&o.filter&&s.push(`--diff-filter=${o.filter}`),t&&s.push(t),i&&s.push(i),p({cwd:e},...s)}static diff_shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];return t&&i.push(t),p({cwd:e},...i)}static difftool_dirDiff(e,t,i,o){const s=["difftool","--dir-diff",`--tool=${t}`,i];return o&&s.push(o),p({cwd:e},...s)}static difftool_fileDiff(e,t,i,o){const s=["difftool","--no-prompt",`--tool=${i}`];return o&&s.push("--staged"),s.push("--"),s.push(t),p({cwd:e},...s)}static log(e,t){const i=[...dt,"-m"];return t.maxCount&&!t.reverse&&i.push(`-n${t.maxCount}`),t.ref&&!pt.isStagedUncommitted(t.ref)&&(t.reverse?(i.push("--reverse"),i.push("--ancestry-path"),i.push(`${t.ref}..HEAD`)):i.push(t.ref)),p({cwd:e},...i)}static log_file(e,t,i={reverse:!1,skipMerges:!1}){const[o,s]=pt.splitPath(t,e),r=[...dt,"--follow"];return i.maxCount&&!i.reverse&&r.push(`-n${i.maxCount}`),i.skipMerges||!i.ref||i.maxCount>2?r.push("--no-merges"):r.push("-m"),i.ref&&!pt.isStagedUncommitted(i.ref)&&(i.reverse?(r.push("--reverse"),r.push("--ancestry-path"),r.push(`${i.ref}..HEAD`)):r.push(i.ref)),null!=i.startLine&&null!=i.endLine&&r.push(`-L ${i.startLine},${i.endLine}:${o}`),r.push("--"),r.push(o),p({cwd:s},...r)}static log_resolve(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){try{return(yield f({cwd:e},"log","--full-history","-M","-n1","--no-merges","--format=%H",i,"--",t)).trim()}catch(e){return}})}static log_search(e,t=[],i={}){const o=[...dt,"-m","-i"];return i.maxCount&&o.push(`-n${i.maxCount}`),p({cwd:e},...o,...t)}static log_shortstat(e,t){const i=["log","--shortstat","--oneline"];return t.ref&&!pt.isStagedUncommitted(t.ref)&&i.push(t.ref),p({cwd:e},...i)}static ls_files(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=["ls-files"];i.ref&&!pt.isStagedUncommitted(i.ref)&&o.push(`--with-tree=${i.ref}`);try{return(yield f({cwd:e},...o,t)).trim()}catch(e){return""}})}static merge_base(e,t,i,o={}){const s=["merge-base"];return o.forkPoint&&s.push("--fork-point"),p({cwd:e},...s,t,i)}static remote(e){return p({cwd:e},"remote","-v")}static remote_url(e,t){return p({cwd:e},"remote","get-url",t)}static revparse(e,t){return P.__awaiter(this,void 0,void 0,function*(){try{return(yield f({cwd:e},"rev-parse",t)).trim()}catch(e){return}})}static revparse_currentBranch(e){return P.__awaiter(this,void 0,void 0,function*(){const t=["rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}"],i={cwd:e};try{return yield f(i,...t)}catch(e){const o=e&&e.toString();if(/HEAD does not point to a branch/.test(o))return;if(/no upstream configured for branch/.test(o))return e.message.split("\n")[0];if(/ambiguous argument '.*?': unknown revision or path not in the working tree/.test(o))try{return yield f(i,...["symbolic-ref","-q","--short","HEAD"])}catch(e){return}return v(e,i,...t)}})}static revparse_toplevel(e){return P.__awaiter(this,void 0,void 0,function*(){try{return(yield f({cwd:e},"rev-parse","--show-toplevel")).trim()}catch(e){return}})}static show(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){const[s,r]=pt.splitPath(t,e);if(pt.isStagedUncommitted(i)&&(i=":"),pt.isUncommitted(i))throw new Error(`sha=${i} is uncommitted`);const n={cwd:r,encoding:o.encoding||"utf8"},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return yield f(n,"show",a)}catch(e){const t=e&&e.toString();if(/Path \'.*?\' does not exist in/.test(t)||/Path \'.*?\' exists on disk, but not in /.test(t))return;return v(e,n,a)}})}static stash_apply(e,t,i){if(t)return p({cwd:e},"stash",i?"pop":"apply",t)}static stash_delete(e,t){if(t)return p({cwd:e},"stash","drop",t)}static stash_list(e){return p({cwd:e},...ut)}static stash_push(e,t,i){const o=["stash","push","-u"];return i&&(o.push("-m"),o.push(i)),o.splice(o.length,0,"--",...t),p({cwd:e},...o)}static stash_save(e,t){const i=["stash","save","-u"];return t&&i.push(t),p({cwd:e},...i)}static status(e,t=1){const i=t>=2?`--porcelain=v${t}`:"--porcelain";return p({cwd:e,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",i,"--branch","-u")}static status_file(e,t,i=1){const[o,s]=pt.splitPath(t,e),r=i>=2?`--porcelain=v${i}`:"--porcelain";return p({cwd:s,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",r,o)}static tag(e){return p({cwd:e},...["tag","-l"])}}pt.shaRegex=/^[0-9a-f]{40}(\^[0-9]*?)??( -)?$/,pt.shaStrictRegex=/^[0-9a-f]{40}$/,pt.stagedUncommittedRegex=/^[0]{40}(\^[0-9]*?)??:$/,pt.stagedUncommittedSha="0000000000000000000000000000000000000000:",pt.uncommittedRegex=/^[0]{40}(\^[0-9]*?)??:??$/,pt.uncommittedSha="0000000000000000000000000000000000000000";class ft{constructor(e,t){this.collapsableWhitespace=0,this.reset(e,t)}reset(e,t){this._item=e,void 0===t&&void 0!==this._options||(void 0===t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:MMa"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}_padOrTruncate(e,t){void 0===t&&(t={truncateTo:void 0,padDirection:"left",collapseWhitespace:!1});let i=t.truncateTo;const o=Q.width(e);if(void 0===i){if(0===this.collapsableWhitespace)return e;const i=this.collapsableWhitespace-o;return this.collapsableWhitespace=0,i<=0?e:void 0===t.truncateTo?e:Q.padLeft(e,i)}i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const s=i-o;return s>0?(t.collapseWhitespace&&(this.collapsableWhitespace=s),"left"===t.padDirection?Q.padLeft(e,i):(t.collapseWhitespace&&(i-=s),Q.padRight(e,i))):s<0?Q.truncate(e,i):e}static fromTemplateCore(e,t,i,o){if(e instanceof ft)return Q.interpolate(t,e);let s=void 0;if(null==o||"string"==typeof o){s={dateFormat:o,tokenOptions:Q.getTokensFromTemplate(t).reduce((e,t)=>(e[t.key]=t.options,e),{})}}else s=o;return void 0===this._formatter?this._formatter=new e(i,s):this._formatter.reset(i,s),Q.interpolate(t,this._formatter)}}ft._formatter=void 0;class vt extends ft{get ago(){const e=this._item.fromNow();return this._padOrTruncate(e,this._options.tokenOptions.ago)}get author(){const e=this._item.author;return this._padOrTruncate(e,this._options.tokenOptions.author)}get authorAgo(){const e=`${this._item.author}, ${this._item.fromNow()}`;return this._padOrTruncate(e,this._options.tokenOptions.authorAgo)}get date(){const e=this._item.formatDate(this._options.dateFormat);return this._padOrTruncate(e,this._options.tokenOptions.date)}get id(){return this._item.isUncommitted&&!this._item.isStagedUncommitted?"00000000":this._item.shortSha}get message(){let e=this._item.isUncommitted?"Uncommitted change":this._item.message;if(this._options.truncateMessageAtNewLine){const t=e.indexOf("\n");-1!==t&&(e=`${e.substring(0,t)}${ne.Space}${ne.Ellipsis}`)}return this._padOrTruncate(e,this._options.tokenOptions.message)}get sha(){return this.id}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}class wt extends ft{get directory(){const e=Qe.getFormattedDirectory(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get file(){const e=xe.basename(this._item.fileName);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=Qe.getFormattedPath(this._item,void 0,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get path(){const e=Qe.getRelativePath(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get working(){const e=this._item.commit;return void 0!==e&&e.isUncommitted?`${ne.Pensil} ${ne.Space}`:""}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}var Ct;!function(e){e.BlameFailed="blame-failed",e.DocumentChanged="document-changed",e.EditorChanged="editor-changed",e.RepoChanged="repo-changed"}(Ct||(Ct={}));class bt extends q.Disposable{constructor(e){super(()=>this.dispose()),this.git=e,this._onDidChangeBlameability=new q.EventEmitter,this._context={state:{dirty:!1}},this._onDirtyStateChangedDebounced=W.debounce(this.onDirtyStateChanged,250),this._disposable=q.Disposable.from(q.workspace.onDidChangeConfiguration(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}get onDidChangeBlameability(){return this._onDidChangeBlameability.event}dispose(){this._listenersDisposable&&this._listenersDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){if(!ds.initializing(e)&&!e.affectsConfiguration("git.enabled",null))return;const t=q.workspace.getConfiguration("git",null).get("enabled",!0);void 0!==this._listenersDisposable&&(this._listenersDisposable.dispose(),this._listenersDisposable=void 0),o(se.Enabled,t),t?(this._listenersDisposable=q.Disposable.from(q.window.onDidChangeActiveTextEditor(W.debounce(this.onActiveTextEditorChanged,50),this),q.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),this.git.onDidBlameFail(this.onBlameFailed,this),this.git.onDidChange(this.onGitChanged,this)),this.updateContext(Ct.EditorChanged,q.window.activeTextEditor,!0)):this.updateContext(Ct.EditorChanged,q.window.activeTextEditor,!1)}onActiveTextEditorChanged(e){e!==this._context.editor&&(void 0===e||s(e))&&this.updateContext(Ct.EditorChanged,e,!0)}onBlameFailed(e){void 0!==this._context.editor&&e===this.git.getCacheEntryKey(this._context.editor.document.uri)&&this.updateBlameability(Ct.BlameFailed,!1)}onDirtyStateChanged(e){this._context.state.dirty=e,this.updateBlameability(Ct.DocumentChanged)}onGitChanged(e){e.reason===$t.Repositories&&this.updateRemotes()}onRepoChanged(e){this.updateContext(Ct.RepoChanged,this._context.editor),this.updateRemotes()}onTextDocumentChanged(e){if(void 0===this._context.editor||!Y.equals(this._context.editor.document,e.document))return;const t=e.document.isDirty;if(t!==this._context.state.dirty)return t?(this._onDirtyStateChangedDebounced.cancel(),void this.onDirtyStateChanged(t)):void this._onDirtyStateChangedDebounced(t);this._onDirtyStateChangedDebounced.cancel()}updateContext(e,t,i=!1){return P.__awaiter(this,void 0,void 0,function*(){try{let s=!1,r=!1;if(i||this._context.editor!==t)if(this._context.editor=t,this._context.repo=void 0,void 0!==this._context.repoDisposable&&(this._context.repoDisposable.dispose(),this._context.repoDisposable=void 0),void 0!==t){this._context.uri=yield Fe.fromUri(t.document.uri,this.git);const e=yield this.git.getRepository(this._context.uri);void 0!==e&&(this._context.repo=e,this._context.repoDisposable=e.onDidChange(this.onRepoChanged,this)),this._context.state.dirty=t.document.isDirty,s=!!this._context.uri.sha,r=yield this.git.isTracked(this._context.uri)}else this._context.uri=void 0,this._context.state.dirty=!1,this._context.state.blameable=!1;else void 0!==this._context.uri&&(s=!!this._context.uri.sha,r=yield this.git.isTracked(this._context.uri));this._context.state.revision!==s&&(this._context.state.revision=s,o(se.ActiveIsRevision,s)),this._context.state.tracked!==r&&(this._context.state.tracked=r,o(se.ActiveFileIsTracked,r)),this.updateBlameability(e,void 0,i),this.updateRemotes()}catch(e){we.error(e,"GitContextTracker.updateContext")}})}updateBlameability(e,t,i=!1){try{if(void 0===t&&(t=this._context.state.tracked&&!this._context.state.dirty),!i&&this._context.state.blameable===t)return;this._context.state.blameable=t,o(se.ActiveIsBlameable,t),this._onDidChangeBlameability.fire({blameable:t,editor:this._context&&this._context.editor,reason:e})}catch(e){we.error(e,"GitContextTracker.updateBlameability")}}updateRemotes(){return P.__awaiter(this,void 0,void 0,function*(){try{let e=!1;if(void 0!==this._context.repo&&(e=yield this._context.repo.hasRemote()),o(se.ActiveHasRemote,e),!e){const t=yield this.git.getRepositories();for(const i of t)if(i!==this._context.repo&&(e=yield i.hasRemotes()))break}o(se.HasRemotes,e)}catch(e){we.error(e,"GitContextTracker.updateRemotes")}})}}class yt{constructor(e){this.uri=e}}class _t{constructor(e){this.key=e,this.cache=new Map}get hasErrors(){return M.every(this.cache.values(),e=>void 0!==e.errorMessage)}get(e){return this.cache.get(e)}set(e,t){this.cache.set(e,t)}}var xt;!function(e){e[e.DocumentChanged=0]="DocumentChanged",e[e.DocumentClosed=1]="DocumentClosed"}(xt||(xt={}));var St;!function(e){e.Author="author",e.Changes="changes",e.ChangesOccurrences="changes-occurrences",e.Files="files",e.Message="message",e.Sha="sha"}(St||(St={}));var $t;!function(e){e.GitCache="git-cache",e.Repositories="repositories"}($t||($t={}));class Dt extends q.Disposable{constructor(){super(()=>this.dispose()),this._onDidBlameFail=new q.EventEmitter,this._onDidChange=new q.EventEmitter,this._suspended=!1,this._documentKeyMap=new Map,this._gitCache=new Map,this._repositoryTree=G.forPaths(),this._trackedCache=new Map,this._versionedUriCache=new Map,this._disposable=q.Disposable.from(q.window.onDidChangeWindowState(this.onWindowStateChanged,this),q.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent),this._repositoriesLoadingPromise=this.onWorkspaceFoldersChanged()}get onDidBlameFail(){return this._onDidBlameFail.event}get onDidChange(){return this._onDidChange.event}dispose(){this._repositoryTree.forEach(e=>e.dispose()),this._disposable&&this._disposable.dispose(),this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=void 0,this._documentKeyMap.clear(),this._gitCache.clear(),this._trackedCache.clear(),this._versionedUriCache.clear()}get UseCaching(){return this.config.advanced.caching.enabled}onAnyRepositoryChanged(){this._gitCache.clear(),this._trackedCache.clear()}onConfigurationChanged(e){const t=ds.initializing(e),i=ds.get();(t||ds.changed(e,ds.name("keymap").value))&&o(se.KeyMap,i.keymap),(t||ds.changed(e,ds.name("advanced")("caching")("enabled").value))&&(i.advanced.caching.enabled?(this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=q.Disposable.from(q.workspace.onDidChangeTextDocument(W.debounce(this.onTextDocumentChanged,50),this),q.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this))):(this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=void 0,this._documentKeyMap.clear(),this._gitCache.clear())),this.config=i,!t&&ds.changed(e,ds.name("blame")("ignoreWhitespace").value,null)&&(this._gitCache.clear(),this.fireChange($t.GitCache))}onTextDocumentChanged(e){let t=this._documentKeyMap.get(e.document);void 0===t&&(t=this.getCacheEntryKey(e.document.uri),this._documentKeyMap.set(e.document,t));const i=this._gitCache.get(t);void 0===i||i.hasErrors||this._gitCache.delete(t)&&we.log(`Clear cache entry for '${t}', reason=${xt[xt.DocumentChanged]}`)}onTextDocumentClosed(e){this._documentKeyMap.delete(e);const t=this.getCacheEntryKey(e.uri);this._gitCache.delete(t)&&we.log(`Clear cache entry for '${t}', reason=${xt[xt.DocumentClosed]}`)}onWindowStateChanged(e){e.focused?this._repositoryTree.forEach(e=>e.resume()):this._repositoryTree.forEach(e=>e.suspend()),this._suspended=!e.focused}onWorkspaceFoldersChanged(e){return P.__awaiter(this,void 0,void 0,function*(){let t=!1;void 0===e&&(t=!0,e={added:q.workspace.workspaceFolders||[],removed:[]});for(const t of e.added){if(t.uri.scheme!==re.File)continue;const e=yield this.repositorySearch(t);for(const t of e)this._repositoryTree.set(t.path,t)}for(const t of e.removed){if(t.uri.scheme!==re.File)continue;const e=t.uri.fsPath,i=this._repositoryTree.findSuperstr(e),o=void 0!==i?[...M.map(i.entries(),([t,i])=>[t,xe.join(e,i)])]:[],s=this._repositoryTree.get(e);void 0!==s&&o.push([s,e]);for(const[e,t]of o)this._repositoryTree.delete(t),e.dispose()}yield o(se.HasRepository,this._repositoryTree.any()),t||setTimeout(()=>this.fireChange($t.Repositories),1)})}repositorySearch(e){return P.__awaiter(this,void 0,void 0,function*(){const t=e.uri,i=[],o=this.onAnyRepositoryChanged.bind(this),s=yield this.getRepoPathCore(t.fsPath,!0);void 0!==s&&i.push(new je(e,s,!0,this,o,this._suspended));const r=ds.get(ds.name("advanced")("repositorySearchDepth").value,t);if(r<=0)return i;let n=Object.assign({},q.workspace.getConfiguration("files",t).get("exclude",{}),q.workspace.getConfiguration("search",t).get("exclude",{}));n=[...M.filterMap(F.entries(n),([e,t])=>{if(t)return e.startsWith("**/")?e.substring(3):e})].reduce((e,t)=>(e[t]=!0,e),Object.create(null));const a=process.hrtime(),h=yield this.repositorySearchCore(t.fsPath,r,n),c=process.hrtime(a);we.log(`Searching (depth=${r}) for repositories in ${t.fsPath} took ${1e3*c[0]+Math.floor(c[1]/1e6)} ms`);for(let t of h){if(t=xe.dirname(t),pt.normalizePath(t)===s)continue;const r=yield this.getRepoPathCore(t,!0);void 0!==r&&i.push(new je(e,r,!1,this,o,this._suspended))}return i})}repositorySearchCore(e,t,i,o=[]){return P.__awaiter(this,void 0,void 0,function*(){return new Promise((s,r)=>{_e.readdir(e,(n,a)=>P.__awaiter(this,void 0,void 0,function*(){if(null!=n)return void r(n);if(0===a.length)return void s(o);const h=[],c=a.map(t=>{const s=xe.resolve(e,t);return new Promise((e,r)=>{_e.stat(s,(r,n)=>{".git"===t?o.push(s):null==r&&!0!==i[t]&&null!=n&&n.isDirectory()&&h.push(s),e()})})});if(yield Promise.all(c),t-- >0)for(const e of h)yield this.repositorySearchCore(e,t,i,o);s(o)}))})})}fireChange(e){this._onDidChange.fire({reason:e})}checkoutFile(e,t){return t=t||e.sha,we.log(`checkoutFile('${e.repoPath}', '${e.fsPath}', '${t}')`),pt.checkout(e.repoPath,e.fsPath,t)}fileExists(e,t){return P.__awaiter(this,void 0,void 0,function*(){return yield new Promise((i,o)=>_e.exists(xe.resolve(e,t),i))})}findNextCommit(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){let o=yield this.getLogForFile(e,t,{maxCount:1,ref:i,reverse:!0}),s=o&&M.first(o.commits.values());if(s)return s;const r=yield this.findNextFileName(e,t,i);return r&&(s=(o=yield this.getLogForFile(e,r,{maxCount:1,ref:i,reverse:!0}))&&M.first(o.commits.values())),s})}findNextFileName(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){return[t,e]=pt.splitPath(t,e),(yield this.fileExists(e,t))?t:yield this.findNextFileNameCore(e,t,i)})}findNextFileNameCore(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===i){const o=yield this.getLogCommit(e,t);if(void 0===o)return;i=o.sha}const o=yield this.getLogForRepo(e,{maxCount:1,ref:i});if(void 0===o)return;const s=M.first(o.commits.values()).fileStatuses.find(e=>e.originalFileName===t);return void 0!==s?s.fileName:void 0})}findWorkingFileName(e,t){return P.__awaiter(this,void 0,void 0,function*(){let i;if(void 0===e||"string"==typeof e){if(i=e,void 0===t)throw new Error("Invalid fileName");[t]=pt.splitPath(t,i)}else{const o=e;if(i=o.repoPath,o.workingFileName&&(yield this.fileExists(i,o.workingFileName)))return o.workingFileName;t=o.fileName}for(;;){if(yield this.fileExists(i,t))return t;if(void 0===(t=yield this.findNextFileNameCore(i,t)))return}})}getActiveRepoPath(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e){const e=this.getHighlanderRepoPath();if(void 0!==e)return e}if(void 0!==(e=e||q.window.activeTextEditor))return this.getRepoPath(e.document.uri)})}getHighlanderRepoPath(){const e=this._repositoryTree.highlander();if(void 0===e)return;const[t]=e;return t.path}getBlameability(e){return P.__awaiter(this,void 0,void 0,function*(){if(!this.UseCaching)return yield this.isTracked(e);const t=this.getCacheEntryKey(e),i=this._gitCache.get(t);return void 0===i?yield this.isTracked(e):!i.hasErrors})}getBlameForFile(e){return P.__awaiter(this,void 0,void 0,function*(){let t="blame";void 0!==e.sha&&(t+=`:${e.sha}`);let i;if(this.UseCaching){const o=this.getCacheEntryKey(e);if(void 0!==(i=this._gitCache.get(o))){const o=i.get(t);if(void 0!==o)return we.log(`getBlameForFile[Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),o.item}we.log(`getBlameForFile[Not Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),void 0===i&&(i=new _t(o),this._gitCache.set(i.key,i))}else we.log(`getBlameForFile('${e.repoPath}', '${e.fsPath}', '${e.sha}')`);const o=this.getBlameForFileCore(e,i,t);return i&&(we.log(`Add blame cache for '${i.key}:${t}'`),i.set(t,{item:o})),o})}getBlameForFileCore(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(e)))return we.log(`Skipping blame; '${e.fsPath}' is not tracked`),t&&t.key&&this._onDidBlameFail.fire(t.key),Dt.emptyPromise;const[o,s]=pt.splitPath(e.fsPath,e.repoPath,!1);try{const r=yield pt.blame(s,o,e.sha,{ignoreWhitespace:this.config.blame.ignoreWhitespace});return ze.parse(r,s,o)}catch(e){if(t){const o=e&&e.toString();return we.log(`Replace blame cache with empty promise for '${t.key}:${i}'`),t.set(i,{item:Dt.emptyPromise,errorMessage:o}),this._onDidBlameFail.fire(t.key),Dt.emptyPromise}return}})}getBlameForFileContents(e,t){return P.__awaiter(this,void 0,void 0,function*(){const i=`blame:${Q.sha1(t)}`;let o;if(this.UseCaching){const t=this.getCacheEntryKey(e);if(void 0!==(o=this._gitCache.get(t))){const t=o.get(i);if(void 0!==t)return we.log(`getBlameForFileContents[Cached(${i})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),t.item}we.log(`getBlameForFileContents[Not Cached(${i})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),void 0===o&&(o=new _t(t),this._gitCache.set(o.key,o))}else we.log(`getBlameForFileContents('${e.repoPath}', '${e.fsPath}', '${e.sha}')`);const s=this.getBlameForFileContentsCore(e,t,o,i);return o&&(we.log(`Add blame cache for '${o.key}:${i}'`),o.set(i,{item:s})),s})}getBlameForFileContentsCore(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(e)))return we.log(`Skipping blame; '${e.fsPath}' is not tracked`),i&&i.key&&this._onDidBlameFail.fire(i.key),Dt.emptyPromise;const[s,r]=pt.splitPath(e.fsPath,e.repoPath,!1);try{const e=yield pt.blame_contents(r,s,t,{ignoreWhitespace:this.config.blame.ignoreWhitespace});return ze.parse(e,r,s)}catch(e){if(i){const t=e&&e.toString();return we.log(`Replace blame cache with empty promise for '${i.key}:${o}'`),i.set(o,{item:Dt.emptyPromise,errorMessage:t}),this._onDidBlameFail.fire(i.key),Dt.emptyPromise}return}})}getBlameForLine(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(we.log(`getBlameForLine('${e.repoPath}', '${e.fsPath}', '${e.sha}', ${t})`),this.UseCaching){const i=yield this.getBlameForFile(e);if(void 0===i)return;let o=i.lines[t];if(void 0===o){if(i.lines.length!==t)return;o=i.lines[t-1]}const s=i.commits.get(o.sha);if(void 0===s)return;return{author:Object.assign({},i.authors.get(s.author),{lineCount:s.lines.length}),commit:s,line:o}}const i=t+1,o=e.fsPath;try{const s=yield pt.blame(e.repoPath,o,e.sha,{ignoreWhitespace:this.config.blame.ignoreWhitespace,startLine:i,endLine:i}),r=ze.parse(s,e.repoPath,o);if(void 0===r)return;return{author:M.first(r.authors.values()),commit:M.first(r.commits.values()),line:r.lines[t]}}catch(e){return}})}getBlameForLineContents(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(we.log(`getBlameForLineContents('${e.repoPath}', '${e.fsPath}', ${t})`),this.UseCaching){const o=yield this.getBlameForFileContents(e,i);if(void 0===o)return;let s=o.lines[t];if(void 0===s){if(o.lines.length!==t)return;s=o.lines[t-1]}const r=o.commits.get(s.sha);if(void 0===r)return;return{author:Object.assign({},o.authors.get(r.author),{lineCount:r.lines.length}),commit:r,line:s}}const o=t+1,s=e.fsPath;try{const r=yield pt.blame_contents(e.repoPath,s,i,{ignoreWhitespace:this.config.blame.ignoreWhitespace,startLine:o,endLine:o}),n=ze.parse(r,e.repoPath,s);if(void 0===n)return;return{author:M.first(n.authors.values()),commit:M.first(n.commits.values()),line:n.lines[t]}}catch(e){return}})}getBlameForRange(e,t){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getBlameForRange('${e.repoPath}', '${e.fsPath}', '${e.sha}', [${t.start.line}, ${t.end.line}])`);const i=yield this.getBlameForFile(e);if(void 0!==i)return this.getBlameForRangeSync(i,e,t)})}getBlameForRangeSync(e,t,i){if(we.log(`getBlameForRangeSync('${t.repoPath}', '${t.fsPath}', '${t.sha}', [${i.start.line}, ${i.end.line}])`),0===e.lines.length)return Object.assign({allLines:e.lines},e);if(0===i.start.line&&i.end.line===e.lines.length-1)return Object.assign({allLines:e.lines},e);const o=e.lines.slice(i.start.line,i.end.line+1),s=new Set(o.map(e=>e.sha)),r=new Map,n=new Map;for(const t of e.commits.values()){if(!s.has(t.sha))continue;const e=t.with({lines:t.lines.filter(e=>e.line>=i.start.line&&e.line<=i.end.line)});n.set(t.sha,e);let o=r.get(e.author);void 0===o&&(o={name:e.author,lineCount:0},r.set(o.name,o)),o.lineCount+=e.lines.length}return{authors:new Map([...r.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:n,lines:o,allLines:e.lines}}getBranch(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;we.log(`getBranch('${e}')`);const t=yield pt.revparse_currentBranch(e);if(void 0===t)return;const i=t.split("\n");return new Te(e,i[0],!0,i[1])})}getBranches(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];we.log(`getBranches('${e}')`);const t=yield pt.branch(e,{all:!0});if(""===t){const t=yield this.getBranch(e);return void 0!==t?[t]:[]}return Ze.parse(t,e)||[]})}getCacheEntryKey(e){return pt.normalizePath("string"==typeof e?e:e.fsPath).toLowerCase()}getChangedFilesCount(e,t){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getChangedFilesCount('${e}', '${t}')`);const i=yield pt.diff_shortstat(e,t);return Ue.parseShortStat(i)})}getConfig(e,t){return P.__awaiter(this,void 0,void 0,function*(){return we.log(`getConfig('${e}', '${t}')`),yield pt.config_get(e,t)})}getGitUriForVersionedFile(e){const t=this.getCacheEntryKey(e),i=this._versionedUriCache.get(t);return i&&i.uri}getDiffForFile(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){void 0!==t&&void 0===i&&void 0!==e.sha&&(i=e.sha);let o="diff";void 0!==t&&(o+=`:${t}`),void 0!==i&&(o+=`:${i}`);let s;if(this.UseCaching){const r=this.getCacheEntryKey(e);if(void 0!==(s=this._gitCache.get(r))){const r=s.get(o);if(void 0!==r)return we.log(`getDiffForFile[Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),r.item}we.log(`getDiffForFile[Not Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),void 0===s&&(s=new _t(r),this._gitCache.set(s.key,s))}else we.log(`getDiffForFile('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`);const r=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:Dt.getEncoding(e)},s,o);return s&&(we.log(`Add log cache for '${s.key}:${o}'`),s.set(o,{item:r})),r})}getDiffForFileCore(e,t,i,o,s,r,n){return P.__awaiter(this,void 0,void 0,function*(){const[a,h]=pt.splitPath(t,e,!1);try{const e=yield pt.diff(h,a,i,o,s);return Ue.parse(e)}catch(e){if(r){const t=e&&e.toString();return we.log(`Replace diff cache with empty promise for '${r.key}:${n}'`),r.set(n,{item:Dt.emptyPromise,errorMessage:t}),Dt.emptyPromise}return}})}getDiffForLine(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getDiffForLine('${e.repoPath}', '${e.fsPath}', ${t}, '${i}', '${o}')`);try{const s=yield this.getDiffForFile(e,i,o);if(void 0===s)return;const r=s.chunks.find(e=>e.currentPosition.start<=t&&e.currentPosition.end>=t);if(void 0===r)return;return r.lines[t-r.currentPosition.start+1]}catch(e){return}})}getDiffStatus(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getDiffStatus('${e}', '${t}', '${i}', ${o.filter})`);try{const s=yield pt.diff_nameStatus(e,t,i,o);return Ue.parseNameStatus(s,e)}catch(e){return}})}getLogCommit(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){let s=void 0;"string"==typeof i?s=i:void 0===o&&(o=i),o=o||{},we.log(`getLogCommit('${e}', '${t}', '${s}', ${o.firstIfMissing}, ${o.previous})`);const r=yield this.getLogForFile(e,t,{maxCount:o.previous?2:1,ref:s});if(void 0===r)return;const n=s&&r.commits.get(s);return void 0!==n||!s||o.firstIfMissing||pt.isResolveRequired(s)?n||M.first(r.commits.values()):void 0})}getLogForRepo(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){t=Object.assign({reverse:!1},t),we.log(`getLogForRepo('${e}', '${t.ref}', ${t.maxCount}, ${t.reverse})`);const i=null==t.maxCount?this.config.advanced.maxQuickHistory||0:t.maxCount;try{const o=yield pt.log(e,{maxCount:i,ref:t.ref,reverse:t.reverse}),s=et.parse(o,Pe.Branch,e,void 0,t.ref,i,t.reverse,void 0);if(void 0!==s){const i=Object.assign({},t);s.query=(t=>this.getLogForRepo(e,Object.assign({},i,{maxCount:t})))}return s}catch(e){return}})}getLogForRepoSearch(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getLogForRepoSearch('${e}', '${t}', '${i}', ${o.maxCount})`);let s=null==o.maxCount?this.config.advanced.maxQuickHistory||0:o.maxCount,r=void 0;switch(i){case St.Author:r=[`--author=${t}`];break;case St.Changes:r=[`-G${t}`];break;case St.ChangesOccurrences:r=[`-S${t}`,"--pickaxe-regex"];break;case St.Files:r=["--",`${t}`];break;case St.Message:r=[`--grep=${t}`];break;case St.Sha:r=[t],s=1}try{const n=yield pt.log_search(e,r,{maxCount:s}),a=et.parse(n,Pe.Branch,e,void 0,void 0,s,!1,void 0);if(void 0!==a){const s=Object.assign({},o);a.query=(o=>this.getLogForRepoSearch(e,t,i,Object.assign({},s,{maxCount:o})))}return a}catch(e){return}})}getLogForFile(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){let o="log";void 0!==(i=Object.assign({reverse:!1,skipMerges:!1},i)).ref&&(o+=`:${i.ref}`),void 0!==i.maxCount&&(o+=`:n${i.maxCount}`);let s;if(this.UseCaching&&void 0===i.range&&!i.reverse){const r=this.getCacheEntryKey(t);if(void 0!==(s=this._gitCache.get(r))){const r=s.get(o);if(void 0!==r)return we.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;if("log"!==o){const r=s.get("log");if(void 0!==r){if(void 0===i.ref)return we.log(`getLogForFile[Cached(~${o})]('${e}', '${t}', '', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;we.log(`getLogForFile[? Cache(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`);const s=yield r.item;if(void 0!==s&&s.commits.has(i.ref))return we.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item}}}we.log(`getLogForFile[Not Cached(${o})]('${e}', '${t}', ${i.ref}, ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),void 0===s&&(s=new _t(r),this._gitCache.set(s.key,s))}else we.log(`getLogForFile('${e}', '${t}', ${i.ref}, ${i.maxCount}, ${i.range&&`[${i.range.start.line}, ${i.range.end.line}]`}, ${i.reverse}, ${i.skipMerges})`);const r=this.getLogForFileCore(e,t,i,s,o);return s&&(we.log(`Add log cache for '${s.key}:${o}'`),s.set(o,{item:r})),r})}getLogForFileCore(e,t,i,o,s){return P.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(t,e,i.ref)))return we.log(`Skipping log; '${t}' is not tracked`),Dt.emptyPromise;const[r,n]=pt.splitPath(t,e,!1);try{const{range:a}=i,h=P.__rest(i,["range"]),c=null==i.maxCount?this.config.advanced.maxQuickHistory||0:i.maxCount,l=yield pt.log_file(n,r,Object.assign({},h,{maxCount:c,startLine:a&&a.start.line+1,endLine:a&&a.end.line+1})),d=et.parse(l,Pe.File,n,r,h.ref,c,h.reverse,a);if(void 0!==d){const o=Object.assign({},i);d.query=(i=>this.getLogForFile(e,t,Object.assign({},o,{maxCount:i})))}return d}catch(e){if(o){const t=e&&e.toString();return we.log(`Replace log cache with empty promise for '${o.key}:${s}'`),o.set(s,{item:Dt.emptyPromise,errorMessage:t}),Dt.emptyPromise}return}})}hasRemote(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemote()})}hasRemotes(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemotes()})}getMergeBase(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){try{const s=yield pt.merge_base(e,t,i,o);if(void 0===s)return;return s.split("\n")[0]}catch(e){return void we.error(e,"GitService.getMergeBase")}})}getRemotes(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];we.log(`getRemotes('${e}')`);const t=yield this.getRepository(e);return void 0!==t?t.getRemotes():this.getRemotesCore(e)})}getRemotesCore(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];we.log(`getRemotesCore('${e}')`),t=t||be.createMap(ds.get(ds.name("remotes").value,null));try{const i=yield pt.remote(e);return ot.parse(i,e,be.factory(t))}catch(e){return we.error(e,"GitService.getRemotesCore"),[]}})}getRepoPath(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return yield this.getActiveRepoPath();if(e instanceof Fe)return e.repoPath;const t=yield this.getRepository(e);if(void 0!==t)return t.path;const i=yield this.getRepoPathCore("string"==typeof e?e:e.fsPath,!1);if(void 0===i)return;if(void 0!==this._repositoryTree.get(i))return i;const s=this._repositoryTree.findSubstr(i),r=void 0===s?q.workspace.getWorkspaceFolder(q.Uri.file(i)):s.folder;if(void 0!==r){const e=new je(r,i,!1,this,this.onAnyRepositoryChanged.bind(this),this._suspended);this._repositoryTree.set(i,e),setTimeout(()=>P.__awaiter(this,void 0,void 0,function*(){yield o(se.HasRepository,this._repositoryTree.any()),this.fireChange($t.Repositories)}),0)}return i})}getRepoPathCore(e,t){return P.__awaiter(this,void 0,void 0,function*(){try{return yield pt.revparse_toplevel(t?e:xe.dirname(e))}catch(e){return void we.error(e,"GitService.getRepoPathCore")}})}getRepositories(){return P.__awaiter(this,void 0,void 0,function*(){return(yield this.getRepositoryTree()).values()})}getRepositoryTree(){return P.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoriesLoadingPromise&&(yield this._repositoriesLoadingPromise,this._repositoriesLoadingPromise=void 0),this._repositoryTree})}getRepository(e){return P.__awaiter(this,void 0,void 0,function*(){const t=yield this.getRepositoryTree();let i;if("string"==typeof e){const o=t.get(e);if(void 0!==o)return o;i=e}else if(e instanceof Fe){if(e.repoPath){const i=t.get(e.repoPath);if(void 0!==i)return i}i=e.fsPath}else i=e.fsPath;const o=t.findSubstr(i);if(void 0!==o&&(yield this.isTrackedCore(o.path,i)))return o})}getStashList(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;we.log(`getStashList('${e}')`);const t=yield pt.stash_list(e);return st.parse(t,e)})}getStatusForFile(e,t){return P.__awaiter(this,void 0,void 0,function*(){we.log(`getStatusForFile('${e}', '${t}')`);const i=pt.validateVersion(2,11)?2:1,o=yield pt.status_file(e,t,i),s=at.parse(o,e,i);if(void 0!==s&&s.files.length)return s.files[0]})}getStatusForRepo(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;we.log(`getStatusForRepo('${e}')`);const t=pt.validateVersion(2,11)?2:1,i=yield pt.status(e,t);return at.parse(i,e,t)})}getTags(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];we.log(`getTags('${e}')`);const t=yield pt.tag(e);return ht.parse(t,e)||[]})}getVersionedFile(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(we.log(`getVersionedFile('${e}', '${t}', '${i}')`),!i||pt.isUncommitted(i)&&!pt.isStagedUncommitted(i)){if(yield this.fileExists(e,t))return t;return}const o=yield pt.getVersionedFile(e,t,i);if(void 0===o)return;const s=this.getCacheEntryKey(o),r=new yt(new Fe(q.Uri.file(t),{sha:i,repoPath:e}));return this._versionedUriCache.set(s,r),o})}getVersionedFileText(e,t,i){return we.log(`getVersionedFileText('${e}', '${t}', ${i})`),pt.show(e,t,i,{encoding:Dt.getEncoding(e,t)})}hasGitUriForFile(e){if(void 0===e||void 0===e.document||void 0===e.document.uri)return!1;const t=this.getCacheEntryKey(e.document.uri);return this._versionedUriCache.has(t)}isEditorBlameable(e){return void 0!==e.viewColumn||this.isTrackable(e.document.uri)||this.hasGitUriForFile(e)}isTrackable(e){let t;return(t="string"==typeof e?e:e.scheme)===re.File||t===re.Git||t===re.GitLensGit}isTracked(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(i===Dt.deletedSha)return!1;let o,s;if("string"==typeof e)[s,t]=pt.splitPath(e,t),o=this.getCacheEntryKey(e);else{if(!this.isTrackable(e))return!1;s=e.fsPath,t=e.repoPath,i=e.sha,o=this.getCacheEntryKey(s)}void 0!==i&&(o+=`:${i}`),we.log(`isTracked('${s}', '${t}', '${i}')`);let r=this._trackedCache.get(o);return void 0!==r?"boolean"==typeof r?r:yield r:(r=this.isTrackedCore(void 0===t?"":t,s,i),this._trackedCache.set(o,r),r=yield r,this._trackedCache.set(o,r),r)})}isTrackedCore(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(i===Dt.deletedSha)return!1;try{let o=!!(yield pt.ls_files(void 0===e?"":e,t));return o||void 0===i||(o=!!(yield pt.ls_files(void 0===e?"":e,t,{ref:i})))||(o=!!(yield pt.ls_files(void 0===e?"":e,t,{ref:`${i}^`}))),o}catch(e){return we.error(e,"GitService.isTrackedCore"),!1}})}getDiffTool(e){return P.__awaiter(this,void 0,void 0,function*(){return(yield pt.config_get("diff.guitool",e))||(yield pt.config_get("diff.tool",e))})}openDiffTool(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){if(!o&&void 0===(o=yield this.getDiffTool(e)))throw new Error("No diff tool found");return we.log(`openDiffTool('${e}', '${t.fsPath}', ${i}, '${o}')`),pt.difftool_fileDiff(e,t.fsPath,o,i)})}openDirectoryDiff(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){if(!o&&void 0===(o=yield this.getDiffTool(e)))throw new Error("No diff tool found");return we.log(`openDirectoryDiff('${e}', '${t}', '${i}', '${o}')`),pt.difftool_dirDiff(e,o,t,i)})}resolveReference(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){return Dt.isResolveRequired(t)?(we.log(`resolveReference('${e}', '${t}', '${i&&i.toString()}')`),void 0===i?(yield pt.revparse(e,t))||t:(yield pt.log_resolve(e,pt.normalizePath(xe.relative(e,i.fsPath)),t))||t):t})}stopWatchingFileSystem(){this._repositoryTree.forEach(e=>e.stopWatchingFileSystem())}stashApply(e,t,i=!1){return we.log(`stashApply('${e}', '${t}', ${i})`),pt.stash_apply(e,t,i)}stashDelete(e,t){return we.log(`stashDelete('${e}', '${t}')`),pt.stash_delete(e,t)}stashSave(e,t,i){if(we.log(`stashSave('${e}', '${t}', ${i})`),void 0===i)return pt.stash_save(e,t);const o=i.map(t=>pt.splitPath(t.fsPath,e)[0]);return pt.stash_push(e,o,t)}static getEncoding(e,t){const i="string"==typeof e?q.Uri.file(xe.join(e,t)):e;return pt.getEncoding(q.workspace.getConfiguration("files",i).get("encoding"))}static initialize(e){return pt.getGitInfo(e)}static getGitPath(){return pt.gitInfo().path}static getGitVersion(){return pt.gitInfo().version}static isResolveRequired(e){return pt.isResolveRequired(e)}static isSha(e){return pt.isSha(e)}static isStagedUncommitted(e){return pt.isStagedUncommitted(e)}static isUncommitted(e){return pt.isUncommitted(e)}static normalizePath(e){return pt.normalizePath(e)}static shortenSha(e){if(void 0!==e)return e===Dt.deletedSha?"(deleted)":pt.isSha(e)||pt.isStagedUncommitted(e)?pt.shortenSha(e):e}static validateGitVersion(e,t){const[i,o]=this.getGitVersion().split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}}Dt.emptyPromise=Promise.resolve(void 0),Dt.deletedSha="ffffffffffffffffffffffffffffffffffffffff",Dt.stagedUncommittedSha=pt.stagedUncommittedSha,Dt.uncommittedSha=pt.uncommittedSha;var Ft;!function(e){e.ActiveEditorChanged="active-editor-changed",e.AutoRefreshChanged="auto-refresh-changed",e.Command="command",e.ConfigurationChanged="configuration",e.NodeCommand="node-command",e.RepoChanged="repo-changed",e.ViewChanged="view-changed",e.VisibleEditorsChanged="visible-editors-changed"}(Ft||(Ft={}));var Pt;!function(e){e.Branch="gitlens:branch",e.BranchWithTracking="gitlens:branch:tracking",e.Branches="gitlens:branches",e.BranchesWithRemotes="gitlens:branches:remotes",e.CurrentBranch="gitlens:current-branch",e.CurrentBranchWithTracking="gitlens:current-branch:tracking",e.RemoteBranch="gitlens:remote-branch",e.Commit="gitlens:commit",e.CommitOnCurrentBranch="gitlens:commit:current",e.CommitFile="gitlens:commit-file",e.Commits="gitlens:commits",e.ComparisonResults="gitlens:comparison-results",e.FileHistory="gitlens:file-history",e.Folder="gitlens:folder",e.History="gitlens:history",e.Message="gitlens:message",e.Pager="gitlens:pager",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.Results="gitlens:results",e.SearchResults="gitlens:search-results",e.Stash="gitlens:stash",e.StashFile="gitlens:stash-file",e.Stashes="gitlens:stashes",e.Status="gitlens:status",e.StatusFile="gitlens:status-file",e.StatusFiles="gitlens:status-files",e.StatusFileCommits="gitlens:status-file-commits",e.StatusUpstream="gitlens:status-upstream",e.Tag="gitlens:tag",e.Tags="gitlens:tags"}(Pt||(Pt={}));class kt extends q.Disposable{constructor(e){super(()=>this.dispose()),this.uri=e,this.supportsPaging=!1}dispose(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0),this.resetChildren()}getCommand(){}refresh(){}resetChildren(){void 0!==this.children&&(this.children.forEach(e=>e.dispose()),this.children=void 0)}}class Rt extends kt{get repoPath(){return this.uri.repoPath}}class Tt extends kt{constructor(e){super(new Fe),this.message=e}getChildren(){return[]}getTreeItem(){const e=new q.TreeItem(this.message,q.TreeItemCollapsibleState.None);return e.contextValue=Pt.Message,e}}class Et extends kt{constructor(e,t,i){super(new Fe),this.message=e,this.node=t,this.explorer=i,this.args={}}getChildren(){return[]}getTreeItem(){const e=new q.TreeItem(this.message,q.TreeItemCollapsibleState.None);return e.contextValue=Pt.Pager,e.command=this.getCommand(),e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-unfold.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-unfold.svg")},e}getCommand(){return{title:"Refresh",command:this.explorer.getQualifiedCommand("refreshNode"),arguments:[this.node,this.args]}}}class Nt extends Et{constructor(e,t,i){super(`${e} ${ne.Space}${ne.Dash}${ne.Space} this may take a while`,t,i),this.args={maxCount:0}}}var Bt;!function(e){e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.DiffDirectory="gitlens.diffDirectory",e.ExternalDiffAll="gitlens.externalDiffAll",e.DiffWith="gitlens.diffWith",e.DiffWithBranch="gitlens.diffWithBranch",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.ExternalDiff="gitlens.externalDiff",e.ExplorersOpenDirectoryDiff="gitlens.explorers.openDirectoryDiff",e.ExplorersOpenDirectoryDiffWithWorking="gitlens.explorers.openDirectoryDiffWithWorking",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenBranchesInRemote="gitlens.openBranchesInRemote",e.OpenBranchInRemote="gitlens.openBranchInRemote",e.OpenCommitInRemote="gitlens.openCommitInRemote",e.OpenFileInRemote="gitlens.openFileInRemote",e.OpenFileRevision="gitlens.openFileRevision",e.OpenInRemote="gitlens.openInRemote",e.OpenRepoInRemote="gitlens.openRepoInRemote",e.OpenWorkingFile="gitlens.openWorkingFile",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ShowCommitSearch="gitlens.showCommitSearch",e.ShowFileBlame="gitlens.showFileBlame",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineBlame="gitlens.showLineBlame",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickStashList="gitlens.showQuickStashList",e.StashApply="gitlens.stashApply",e.StashDelete="gitlens.stashDelete",e.StashSave="gitlens.stashSave",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileRecentChanges="gitlens.toggleFileRecentChanges",e.ToggleLineBlame="gitlens.toggleLineBlame"}(Bt||(Bt={}));class Ut extends q.Disposable{constructor(e){if(super(()=>this.dispose()),this.contextParsingOptions={editor:!1,uri:!1},"string"==typeof e)return void(this._disposable=q.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));const t=e.map(e=>q.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));this._disposable=q.Disposable.from(...t)}static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}dispose(){this._disposable&&this._disposable.dispose()}preExecute(e,...t){return P.__awaiter(this,void 0,void 0,function*(){return this.execute(...t)})}_execute(e,...t){const[i,o]=Ut.parseContext(e,this.contextParsingOptions,...t);return this.preExecute(i,...o)}static parseContext(e,t,...i){let o=void 0,s=i[0];if(t.editor&&(void 0===s||function(e){return void 0!==e&&void 0!==e.id&&(void 0!==e.edit||void 0!==e.document)}(s))&&(o=s,s=(i=i.slice(1))[0]),t.uri&&(void 0===s||s instanceof q.Uri)){const[t,...s]=i;return[{command:e,type:"uri",editor:o,uri:t},s]}if(s instanceof kt){const[t,...o]=i;return[{command:e,type:"view",node:t,uri:t.uri},o]}if(x(s)){const t=[];let o=0;for(const e of i){if(!x(e))break;o++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(o)]}if(_(s)){const t=[];let o=0;for(const e of i){if(!_(e))break;o++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(o)]}return[{command:e,type:"unknown",editor:o},i]}}class Lt extends Ut{constructor(e){super(e),this.contextParsingOptions={editor:!0,uri:!0}}preExecute(e,...t){return P.__awaiter(this,void 0,void 0,function*(){return this.execute(e.editor,e.uri,...t)})}_execute(e,...t){return super._execute(e,q.window.activeTextEditor,...t)}}let At=void 0;class Ot extends Lt{constructor(e){super(e)}_execute(e,...t){return At={command:e,args:t},super._execute(e,...t)}}class Wt extends q.Disposable{constructor(e){super(()=>this.dispose()),Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(q.commands.registerTextEditorCommand(i,(e,t,...o)=>this.executeCore(i,e,t,...o),this));this._disposable=q.Disposable.from(...t)}dispose(){this._disposable&&this._disposable.dispose()}executeCore(e,t,i,...o){return this.execute(t,i,...o)}}class Mt extends Wt{constructor(e){super(Bt.ClearFileAnnotations),this.annotationController=e}execute(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return this.annotationController.clear(e)}catch(e){return we.error(e,"ClearFileAnnotationsCommand"),q.window.showErrorMessage("Unable to clear file annotations. See output channel for more details")}})}}class It extends q.Disposable{constructor(){super(()=>this.dispose());const e=W.debounce(e=>this._resolver&&this._resolver(e),50);this._disposable=q.window.onDidChangeActiveTextEditor(e)}dispose(){this._disposable&&this._disposable.dispose()}awaitClose(e=500){return P.__awaiter(this,void 0,void 0,function*(){return this.close(),this.wait(e)})}awaitNext(e=500){return P.__awaiter(this,void 0,void 0,function*(){return this.next(),this.wait(e)})}close(){return P.__awaiter(this,void 0,void 0,function*(){return q.commands.executeCommand(oe.CloseActiveEditor)})}next(){return P.__awaiter(this,void 0,void 0,function*(){return q.commands.executeCommand(oe.NextEditor)})}wait(e=500){return P.__awaiter(this,void 0,void 0,function*(){const t=yield new Promise((t,i)=>{let o;this._resolver=(e=>{o&&(clearTimeout(o),o=0,t(e))}),o=setTimeout(()=>{t(q.window.activeTextEditor),o=0},e)});return this._resolver=void 0,t})}}var Ht;!function(e){e.CommitHasNoPreviousCommitWarning="suppressCommitHasNoPreviousCommitWarning",e.CommitNotFoundWarning="suppressCommitNotFoundWarning",e.FileNotUnderSourceControlWarning="suppressFileNotUnderSourceControlWarning",e.GitVersionWarning="suppressGitVersionWarning",e.LineUncommittedWarning="suppressLineUncommittedWarning",e.NoRepositoryWarning="suppressNoRepositoryWarning",e.UpdateNotice="suppressUpdateNotice",e.WelcomeNotice="suppressWelcomeNotice"}(Ht||(Ht={}));class jt{static showCommitHasNoPreviousCommitWarningMessage(e){return void 0===e?jt.showMessage("info","Commit has no previous commit",Ht.CommitHasNoPreviousCommitWarning):jt.showMessage("info",`Commit ${e.shortSha} (${e.author}, ${e.fromNow()}) has no previous commit`,Ht.CommitHasNoPreviousCommitWarning)}static showCommitNotFoundWarningMessage(e){return jt.showMessage("warn",`${e}. The commit could not be found`,Ht.CommitNotFoundWarning)}static showFileNotUnderSourceControlWarningMessage(e){return jt.showMessage("warn",`${e}. The file is probably not under source control`,Ht.FileNotUnderSourceControlWarning)}static showLineUncommittedWarningMessage(e){return jt.showMessage("warn",`${e}. The line has uncommitted changes`,Ht.LineUncommittedWarning)}static showNoRepositoryWarningMessage(e){return jt.showMessage("warn",`${e}. No repository could be found`,Ht.NoRepositoryWarning)}static showUnsupportedGitVersionErrorMessage(e){return jt.showMessage("error",`GitLens requires a newer version of Git (>= 2.2.0) than is currently installed (${e}). Please install a more recent version of Git.`,Ht.GitVersionWarning)}static showUpdateMessage(e){return P.__awaiter(this,void 0,void 0,function*(){const t="View Release Notes",i=yield jt.showMessage("info",`GitLens has been updated to v${e}`,Ht.UpdateNotice,void 0,t);return i===t&&q.commands.executeCommand(oe.Open,q.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens/changelog")),i})}static showWelcomeMessage(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield jt.showMessage("info","Thank you for choosing GitLens! GitLens is powerful, feature rich, and highly configurable, so please be sure to view the docs and tailor it to suit your needs.",Ht.WelcomeNotice,null,"View Docs");return"View Docs"===e&&q.commands.executeCommand(oe.Open,q.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens")),e})}static showMessage(e,t,i,o="Don't Show Again",...s){return P.__awaiter(this,void 0,void 0,function*(){if(we.log(`ShowMessage(${e}, '${t}', ${i}, ${o})`),ds.get(ds.name("advanced")("messages")(i).value))return void we.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) skipped`);null!==o&&s.push(o);let r=void 0;switch(e){case"info":r=yield q.window.showInformationMessage(t,...s);break;case"warn":r=yield q.window.showWarningMessage(t,...s);break;case"error":r=yield q.window.showErrorMessage(t,...s)}if(null===o||r===o){we.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) don't show again requested`);const s=ds.name("advanced")("messages").value,n=ds.get(s);if(n[i]=!0,yield ds.update(s,n,q.ConfigurationTarget.Global),r===o)return}return we.log(`ShowMessage(${e}, '${t}', ${i}, ${o}) returned ${r}`),r})}}class Gt extends Lt{constructor(e){super(Bt.CloseUnchangedFiles),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to close unchanged files");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return q.window.showWarningMessage("Unable to close unchanged files");i.uris=o.files.map(e=>e.uri)}if(0===i.uris.length)return q.commands.executeCommand(oe.CloseAllEditors);const e=new It;let o=0,s=void 0,r=q.window.activeTextEditor;for(;;){if(void 0!==r){if(X.equals(s,r,{useId:!0,usePosition:!0}))break;if(void 0!==r.document&&(r.document.isDirty||i.uris.some(e=>Z.equals(e,r.document&&r.document.uri)))){const t=s;if(s=r,r=yield e.awaitNext(500),X.equals(t,r,{useId:!0,usePosition:!0}))break;continue}}if(s=r,r=yield e.awaitClose(500),void 0===s&&void 0===r){if(++o>=4)break}else o=0}return void e.dispose()}catch(e){return we.error(e,"CloseUnchangedFilesCommand"),q.window.showErrorMessage("Unable to close unchanged files. See output channel for more details")}})}}var Qt=i(4);class Vt extends Lt{constructor(e){super(Bt.CopyMessageToClipboard),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield this.git.getActiveRepoPath(e);if(!t)return;const o=yield this.git.getLogForRepo(t,{maxCount:1});if(!o)return;return i.message=M.first(o.commits.values()).message,void Object(Qt.copy)(i.message)}const o=yield Fe.fromUri(t,this.git);if(void 0===i.message){if(void 0===i.sha){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=e&&e.selection.active.line||0;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(!e)return;if(e.commit.isUncommitted)return;i.sha=e.commit.sha,o.repoPath||(o.repoPath=e.commit.repoPath)}catch(e){return we.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to copy message. See output channel for more details")}}const t=yield this.git.getLogCommit(o.repoPath,o.fsPath,i.sha);if(void 0===t)return;i.message=t.message}return void Object(Qt.copy)(i.message)}catch(e){return we.error(e,"CopyMessageToClipboardCommand"),q.window.showErrorMessage("Unable to copy message. See output channel for more details")}})}}class Kt extends Lt{constructor(e){super(Bt.CopyShaToClipboard),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield this.git.getActiveRepoPath(e);if(!t)return;const o=yield this.git.getLogForRepo(t,{maxCount:1});if(!o)return;return i.sha=M.first(o.commits.values()).sha,void Object(Qt.copy)(i.sha)}const o=yield Fe.fromUri(t,this.git);if(void 0===i.sha){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=e&&e.selection.active.line||0;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return;i.sha=e.commit.sha}catch(e){return we.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}}return void Object(Qt.copy)(i.sha)}catch(e){return we.error(e,"CopyShaToClipboardCommand"),q.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}})}}const qt=Object.create(null),zt=["left","right",",",".","escape"],Yt=[];let Xt;class Zt extends q.Disposable{constructor(e){super(()=>this.dispose()),this.mapping=e;for(const t in e)e[t]=e[t]||qt}dispose(){return P.__awaiter(this,void 0,void 0,function*(){const e=Yt.indexOf(this.mapping);we.log("KeyboardScope.dispose",Yt.length,e),e===Yt.length-1?(Yt.pop(),yield this.updateKeyCommandsContext(Yt[Yt.length-1])):Yt.splice(e,1)})}begin(){return P.__awaiter(this,void 0,void 0,function*(){return Yt.push(this.mapping),yield this.updateKeyCommandsContext(this.mapping),this})}clearKeyCommand(e){return P.__awaiter(this,void 0,void 0,function*(){const t=Yt[Yt.length-1];t===this.mapping&&t[e]&&(we.log("KeyboardScope.clearKeyCommand",Yt.length,e),t[e]=void 0,yield o(`${se.Key}:${e}`,!1))})}setKeyCommand(e,t){return P.__awaiter(this,void 0,void 0,function*(){const i=Yt[Yt.length-1];i===this.mapping&&(we.log("KeyboardScope.setKeyCommand",Yt.length,e,!!i[e]),i[e]?i[e]=t:(i[e]=t,yield o(`${se.Key}:${e}`,!0)))})}updateKeyCommandsContext(e){return P.__awaiter(this,void 0,void 0,function*(){const t=[];for(const i of zt)t.push(o(`${se.Key}:${i}`,!(!e||!e[i])));yield Promise.all(t)})}}class Jt extends q.Disposable{static get instance(){return Xt}constructor(){super(()=>this.dispose()),Xt=this;const e=zt.map(e=>q.commands.registerCommand(`${J}.key.${e}`,()=>this.execute(e),this));this._disposable=q.Disposable.from(...e)}dispose(){this._disposable&&this._disposable.dispose()}beginScope(e){return P.__awaiter(this,void 0,void 0,function*(){return we.log("Keyboard.beginScope",Yt.length),yield new Zt(e?Object.assign(Object.create(null),e):Object.create(null)).begin()})}execute(e){return P.__awaiter(this,void 0,void 0,function*(){if(Yt.length)try{let t=Yt[Yt.length-1][e];if("function"==typeof t&&(t=yield t()),!t||"function"!=typeof t.onDidPressKey)return;return we.log("Keyboard.execute",e),yield t.onDidPressKey(e)}catch(e){return void we.error(e,"Keyboard.execute")}})}}class ei{constructor(e){this.branchOrTag=e,e instanceof Te?(this.label=`${e.current?`$(check)${ne.Space}`:ne.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${ne.Space.repeat(2)} remote branch`:""):(this.label=`${ne.Space.repeat(4)} ${e.name}`,this.description=`${ne.Space.repeat(2)} tag`)}get name(){return this.branchOrTag.name}get remote(){return this.branchOrTag instanceof Te&&this.branchOrTag.remote}}class ti{static showProgress(e){return D(e,{left:qt,",":qt,".":qt})}static show(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){const s=[...e.filter(e=>!e.remote).map(e=>new ei(e)),...t.map(e=>new ei(e)),...e.filter(e=>e.remote).map(e=>new ei(e))];if(void 0!==o.goBackCommand&&s.splice(0,0,o.goBackCommand),void 0!==o.progressCancellation&&o.progressCancellation.token.isCancellationRequested)return;const r=yield Jt.instance.beginScope({left:o.goBackCommand||qt});o.progressCancellation&&o.progressCancellation.cancel();const n=yield q.window.showQuickPick(s,{placeHolder:i,ignoreFocusOut:$()});return yield r.dispose(),n})}}let ii;class oi{constructor(e,t,i){this.context=e,this.explorerCommands=t,this.git=i,this._roots=[],this._onDidChangeTreeData=new q.EventEmitter,ii=this,q.commands.registerCommand("gitlens.resultsExplorer.refresh",this.refreshNodes,this),q.commands.registerCommand("gitlens.resultsExplorer.refreshNode",this.refreshNode,this),q.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(rs.Auto),this),q.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToList",()=>this.setFilesLayout(rs.List),this),q.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(rs.Tree),this),q.commands.registerCommand("gitlens.resultsExplorer.clearResultsNode",this.clearResultsNode,this),q.commands.registerCommand("gitlens.resultsExplorer.close",this.close,this),q.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOn",()=>this.setKeepResults(!0),this),q.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOff",()=>this.setKeepResults(!1),this),o(se.ResultsExplorerKeepResults,this.keepResults),e.subscriptions.push(ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}static get instance(){return ii}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}onConfigurationChanged(e){return P.__awaiter(this,void 0,void 0,function*(){const t=ds.initializing(e),i=ds.name("resultsExplorer");if(!t&&!ds.changed(e,i.value))return;t||!ds.changed(e,i("gravatars").value)&&!ds.changed(e,i("gravatarsDefault").value)||u();const o=ds.get(i.value);t||0===this._roots.length||this.refresh(Ft.ConfigurationChanged),this._config=o})}get config(){return this._config}get keepResults(){return this.context.workspaceState.get(he.ResultsExplorerKeepResults,!1)}close(){this.clearResults(),o(se.ResultsExplorer,!1)}getChildren(e){return P.__awaiter(this,void 0,void 0,function*(){return 0===this._roots.length?[new Tt("No results")]:void 0===e?this._roots:e.getChildren()})}getTreeItem(e){return P.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getQualifiedCommand(e){return`gitlens.resultsExplorer.${e}`}refresh(e){return P.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=Ft.Command),we.log("ResultsExplorer.refresh",`reason='${e}'`),this._onDidChangeTreeData.fire()})}refreshNode(e,t){we.log("ResultsExplorer.refreshNode"),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),e.refresh(),this._onDidChangeTreeData.fire(this._roots.includes(e)?void 0:e)}refreshNodes(){we.log("ResultsExplorer.refreshNodes"),this._roots.forEach(e=>e.refresh()),this._onDidChangeTreeData.fire()}showComparisonInResults(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){this.addResults(new zo(e,t,i,this)),o(se.ResultsExplorer,!0)})}showCommitInResults(e){this.addResults(new class extends kt{constructor(e,t,i=Pt.Results){super(e.toGitUri()),this.commit=e,this.explorer=t,this.contextValue=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield new Ro(this.commit,this.explorer).getChildren();return e.splice(0,0,new Tt(vt.fromTemplate("${message}",this.commit,{truncateMessageAtNewLine:!1}))),e})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=vt.fromTemplate(`Commit \${sha} ${Q.pad(ne.Dash,1,1)} \${authorAgo}`,this.commit,this.explorer.git.config.defaultDateFormat),t=new q.TreeItem(e,q.TreeItemCollapsibleState.Expanded);return t.contextValue=this.contextValue,t})}}(e,this)),o(se.ResultsExplorer,!0)}showCommitsInResults(e,t){const i=void 0===e.query?t=>Promise.resolve(e):e.query;this.addResults(new Vo(e.repoPath,e=>{if("string"==typeof t)return t;const i=void 0!==e?e.count:0,o=void 0!==e&&e.truncated,s=void 0===t.resultsType?{singular:"result",plural:"results"}:t.resultsType;return 1===i?`1 ${s.singular} for ${t.label}`:`${0===i?"No":`${i}${o?"+":""}`} ${s.plural} for ${t.label}`},W.seeded(i,e),this,Pt.SearchResults)),o(se.ResultsExplorer,!0)}addResults(e){return!this._roots.includes(e)&&(this._roots.length>0&&!this.keepResults&&this.clearResults(),this._roots.splice(0,0,e),this.refreshNode(e),!0)}clearResults(){0!==this._roots.length&&(this._roots.forEach(e=>e.dispose()),this._roots=[])}clearResultsNode(e){const t=this._roots.findIndex(t=>t===e);-1!==t&&(this._roots.splice(t,1),e.dispose(),this.refresh())}setFilesLayout(e){return P.__awaiter(this,void 0,void 0,function*(){return ds.update(ds.name("resultsExplorer")("files")("layout").value,e,q.ConfigurationTarget.Global)})}setKeepResults(e){this.context.workspaceState.update(he.ResultsExplorerKeepResults,e),o(se.ResultsExplorerKeepResults,e)}}class si{constructor(e,t,i){void 0===t?(this.command=void 0,this.args=i):"string"==typeof t?(this.command=t,this.args=i):(this.command=t[0],this.args=t.slice(1)),Object.assign(this,e)}execute(){return void 0===this.command?Promise.resolve(void 0):q.commands.executeCommand(this.command,...this.args||[])}onDidPressKey(e){return this.execute()}}class ri extends si{constructor(e){super({label:e,description:""})}}class ni extends si{constructor(e,t){super({label:"",description:""},e,t)}}class ai extends si{constructor(e,t){super(t,void 0,void 0),this.uri=e}execute(e){return P.__awaiter(this,void 0,void 0,function*(){return S(this.uri,e)})}onDidPressKey(e){return this.execute({preserveFocus:!0,preview:!1})}}class hi extends si{constructor(e,t){super(t,void 0,void 0),this.uris=e}execute(e={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){for(const t of this.uris)yield S(t,e)})}onDidPressKey(e){return P.__awaiter(this,void 0,void 0,function*(){return this.execute({preserveFocus:!0,preview:!1})})}}class ci{constructor(e){this.commit=e;let t=e.message;const i=t.indexOf("\n");-1!==i&&(t=`${t.substring(0,i)}${ne.Space}$(ellipsis)`),e.isStash?(this.label=t,this.description="",this.detail=`${ne.Space} ${e.stashName||e.shortSha} ${Q.pad(ne.Dot,1,1)} ${e.fromNow()} ${Q.pad(ne.Dot,1,1)} ${e.getDiffStatus()}`):(this.label=t,this.description=`${Q.pad("$(git-commit)",1,1)} ${e.shortSha}`,this.detail=`${ne.Space} ${e.author}, ${e.fromNow()}${e.isFile?"":` ${Q.pad(ne.Dot,1,1)} ${e.getDiffStatus()}`}`)}}class li extends si{constructor(e,t={label:"Show in Results",description:`${Q.pad(ne.Dash,2,2)} displays commit in the GitLens Results view`}){super(t,void 0,void 0),this.commit=e}execute(e={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){oi.instance.showCommitInResults(this.commit)})}}class di extends si{constructor(e,t,i={label:"Show in Results",description:`${Q.pad(ne.Dash,2,2)} displays commits in the GitLens Results view`}){super(i,void 0,void 0),this.results=e,this.resultsLabel=t}execute(e={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){oi.instance.showCommitsInResults(this.results,this.resultsLabel)})}}class ui extends di{constructor(e,t,i={label:"Show in Results",description:`${Q.pad(ne.Dash,2,2)} displays results in the GitLens Results view`}){super(e,{label:t},i),this.results=e,this.search=t}}class mi extends si{constructor(e,t,i,o,s={label:"Show Branches and Tags",description:`${Q.pad(ne.Dash,2,2)} displays branches and tags`}){super(s,void 0,void 0),this.repoPath=e,this.placeHolder=t,this.git=i,this.goBackCommand=o}execute(e={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const e=ti.showProgress(this.placeHolder);try{const[t,i]=yield Promise.all([this.git.getBranches(this.repoPath),this.git.getTags(this.repoPath)]);if(e.token.isCancellationRequested)return;return ti.show(t,i,this.placeHolder,{progressCancellation:e,goBackCommand:this.goBackCommand})}finally{e.dispose()}})}}class gi{constructor(e){this.branch=e,this.label=`${e.current?`$(check)${ne.Space}`:ne.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${ne.Space.repeat(2)} remote branch`:""}}class pi{static show(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=e.map(e=>new gi(e));void 0!==i.goBackCommand&&o.splice(0,0,i.goBackCommand);return yield q.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:$()})})}}class fi extends si{constructor(e,t){super({label:`$(link-external) Open ${r(t)} in ${e.provider.name}`,description:`${Q.pad(ne.Dash,2,3)} $(repo) ${e.provider.path}`},void 0,void 0),this.remote=e,this.resource=t}execute(){return P.__awaiter(this,void 0,void 0,function*(){return this.remote.provider.open(this.resource)})}}class vi extends si{constructor(e,t,i){const o=r(t);let s="";switch(t.type){case ce.Branch:s=`$(git-branch) ${t.branch}`;break;case ce.Branches:s="$(git-branch) Branches";break;case ce.Commit:s=`$(git-commit) ${Dt.shortenSha(t.sha)}`;break;case ce.File:s=`$(file-text) ${xe.basename(t.fileName)}`;break;case ce.Repo:s="$(repo) Repository";break;case ce.Revision:if(void 0!==t.commit&&t.commit instanceof Ae)"D"===t.commit.status?(t.sha=t.commit.previousSha,s=`$(file-text) ${xe.basename(t.fileName)} in ${ne.Space}$(git-commit) ${t.commit.previousShortSha} (deleted in ${ne.Space}$(git-commit) ${t.commit.shortSha})`):(t.sha=t.commit.sha,s=`$(file-text) ${xe.basename(t.fileName)} in ${ne.Space}$(git-commit) ${t.commit.shortSha}`);else{const e=void 0===t.sha?"":Dt.shortenSha(t.sha);s=`$(file-text) ${xe.basename(t.fileName)}${e?` in ${ne.Space}$(git-commit) ${e}`:""}`}}const n=e[0];if(1===e.length)return void super({label:`$(link-external) Open ${o} in ${n.provider.name}`,description:`${Q.pad(ne.Dash,2,3)} $(repo) ${n.provider.path} ${Q.pad(ne.Dot,1,1)} ${s}`},Bt.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}]);super({label:`$(link-external) Open ${o} in ${e.every(e=>void 0!==e.provider&&e.provider.name===n.provider.name)?n.provider.name:"Remote"}${ne.Ellipsis}`,description:`${Q.pad(ne.Dash,2,3)} ${s}`},Bt.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}])}}class wi{static show(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){const s=e.map(e=>new fi(e,i));o&&s.splice(0,0,o);const r=yield q.window.showQuickPick(s,{placeHolder:t,ignoreFocusOut:$()});if(void 0!==r)return r})}}class Ci extends ai{constructor(e,t){const i=m(t.status),o=Qe.getFormattedDirectory(t,!0);super(Fe.toRevisionUri(e.sha,t,e.repoPath),{label:`${Q.pad(i,4,2)} ${xe.basename(t.fileName)}`,description:o}),this.commit=e.toFileCommit(t),this.status=t.status}get sha(){return this.commit.sha}onDidPressKey(e){return void 0===this.commit.previousSha?super.onDidPressKey(e):q.commands.executeCommand(Bt.DiffWithPrevious,this.commit.toGitUri(),{commit:this.commit,showOptions:{preserveFocus:!0,preview:!1}})}}class bi extends hi{constructor(e,t=!1,i){const o=e.repoPath;super(k.filterMap(e.fileStatuses,e=>Fe.fromFileStatus(e,o)),i||{label:"$(file-symlink-file) Open Files",description:""})}}class yi extends hi{constructor(e,t){super(k.filterMap(e.fileStatuses,t=>Fe.toRevisionUri("D"===t.status?e.previousFileSha:e.sha,t,e.repoPath)),t||{label:"$(file-symlink-file) Open Revisions",description:`${Q.pad(ne.Dash,2,3)} in ${ne.Space}$(git-commit) ${e.shortSha}`})}}class _i{static show(e,t,i,o,s,r){return P.__awaiter(this,void 0,void 0,function*(){yield t.resolvePreviousFileSha(e);const n=t.fileStatuses.map(e=>new Ci(t,e)),a=t.isStash;let h=0;if(a)n.splice(h++,0,new si({label:"$(git-pull-request) Apply Stashed Changes",description:`${Q.pad(ne.Dash,2,3)} ${t.message}`},Bt.StashApply,[{confirm:!0,deleteAfter:!1,stashItem:t,goBackCommand:s}])),n.splice(h++,0,new si({label:"$(x) Delete Stashed Changes",description:`${Q.pad(ne.Dash,2,3)} ${t.message}`},Bt.StashDelete,[{confirm:!0,stashItem:t,goBackCommand:s}])),n.splice(h++,0,new li(t));else{n.splice(h++,0,new li(t));const i=(yield e.getRemotes(t.repoPath)).filter(e=>void 0!==e.provider);i.length&&n.splice(h++,0,new vi(i,{type:"commit",sha:t.sha},s))}n.splice(h++,0,new bi(t)),n.splice(h++,0,new yi(t)),n.splice(h++,0,new si({label:"$(git-compare) Open Directory Compare with Previous Revision",description:`${Q.pad(ne.Dash,2,3)} $(git-commit) ${t.previousFileShortSha} ${ne.Space} $(git-compare) ${ne.Space} $(git-commit) ${t.shortSha}`},Bt.DiffDirectory,[t.uri,{ref1:t.previousFileSha,ref2:t.sha}])),n.splice(h++,0,new si({label:"$(git-compare) Open Directory Compare with Working Tree",description:`${Q.pad(ne.Dash,2,3)} $(git-commit) ${t.shortSha} ${ne.Space} $(git-compare) ${ne.Space} $(file-directory) Working Tree`},Bt.DiffDirectory,[i,{ref1:t.sha}])),a||n.splice(h++,0,new si({label:"$(clippy) Copy Commit ID to Clipboard",description:`${Q.pad(ne.Dash,2,3)} ${t.shortSha}`},Bt.CopyShaToClipboard,[i,{sha:t.sha}])),n.splice(h++,0,new si({label:"$(clippy) Copy Commit Message to Clipboard",description:`${Q.pad(ne.Dash,2,3)} ${t.message}`},Bt.CopyMessageToClipboard,[i,{message:t.message,sha:t.sha}])),n.splice(h++,0,new si({label:"Changed Files",description:t.getDiffStatus()},Bt.ShowQuickCommitDetails,[i,{commit:t,repoLog:r,sha:t.sha,goBackCommand:o}])),o&&n.splice(0,0,o);let c=void 0,l=void 0;a||(void 0===r||r.truncated||void 0!==r.sha?(c=(()=>P.__awaiter(this,void 0,void 0,function*(){let i=r,s=i&&i.commits.get(t.sha);return void 0!==s&&void 0!==s.previousSha||(s=(i=yield e.getLogForRepo(t.repoPath,{maxCount:e.config.advanced.maxQuickHistory,ref:t.sha}))&&i.commits.get(t.sha))&&(s.nextSha=t.nextSha),void 0===s||void 0===s.previousSha?qt:new ni(Bt.ShowQuickCommitDetails,[s.previousUri,{repoLog:i,sha:s.previousSha,goBackCommand:o}])})),l=(()=>P.__awaiter(this,void 0,void 0,function*(){let i=r,s=i&&i.commits.get(t.sha);if(void 0===s||void 0===s.nextSha){i=void 0,s=void 0;const o=yield e.getLogForRepo(t.repoPath,{maxCount:1,reverse:!0,ref:t.sha}),r=o&&M.first(o.commits.values());void 0!==r&&r.sha!==t.sha&&((s=t).nextSha=r.sha)}return void 0===s||void 0===s.nextSha?qt:new ni(Bt.ShowQuickCommitDetails,[s.nextUri,{repoLog:i,sha:s.nextSha,goBackCommand:o}])}))):(c=void 0===t.previousSha?void 0:new ni(Bt.ShowQuickCommitDetails,[t.previousUri,{repoLog:r,sha:t.previousSha,goBackCommand:o}]),l=void 0===t.nextSha?void 0:new ni(Bt.ShowQuickCommitDetails,[t.nextUri,{repoLog:r,sha:t.nextSha,goBackCommand:o}])));const d=yield Jt.instance.beginScope({left:o,",":c,".":l}),u=yield q.window.showQuickPick(n,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${t.shortSha} ${Q.pad(ne.Dot,1,1)} ${t.author?`${t.author}, `:""}${t.fromNow()} ${Q.pad(ne.Dot,1,1)} ${t.message}`,ignoreFocusOut:$(),onDidSelectItem:e=>{d.setKeyCommand("right",e),"function"==typeof e.onDidSelect&&e.onDidSelect()}});return yield d.dispose(),u})}}class xi extends si{constructor(e,t,i){super(i||{label:"$(git-pull-request) Apply Changes",description:`${Q.pad(ne.Dash,2,3)} $(file-text) ${xe.basename(e.fileName)} in ${ne.Space}$(git-commit) ${e.shortSha}`},void 0,void 0),this.commit=e,this.git=t}execute(){return P.__awaiter(this,void 0,void 0,function*(){const e=this.commit.toGitUri();return yield this.git.checkoutFile(e),S(e,{preserveFocus:!0,preview:!1})})}}class Si extends ai{constructor(e,t){super(q.Uri.file(xe.resolve(e.repoPath,e.fileName)),t||{label:"$(file-symlink-file) Open File",description:`${Q.pad(ne.Dash,2,3)} ${xe.basename(e.fileName)}`})}}class $i extends ai{constructor(e,t){let i,o;"D"===e.status?(o=Fe.toRevisionUri(e.previousFileSha,e.previousUri.fsPath,e.repoPath),i=`${Q.pad(ne.Dash,2,3)} ${xe.basename(e.fileName)} in ${ne.Space}$(git-commit) ${e.previousShortSha} (deleted in ${ne.Space}$(git-commit) ${e.shortSha})`):(o=Fe.toRevisionUri(e.sha,e.uri.fsPath,e.repoPath),i=`${Q.pad(ne.Dash,2,3)} ${xe.basename(e.fileName)} in ${ne.Space}$(git-commit) ${e.shortSha}`),super(o,t||{label:"$(file-symlink-file) Open Revision",description:i})}}class Di{static show(e,t,i,o,s,r){return P.__awaiter(this,void 0,void 0,function*(){const n=[],a=t.isStash,h=t.workingFileName&&xe.basename(t.workingFileName)||xe.basename(t.fileName),c=t.isUncommitted;if(c){const i=yield e.getLogCommit(void 0,t.uri.fsPath,{previous:!0});if(void 0===i)return;t=i}yield t.resolvePreviousFileSha(e),a&&n.push(new xi(t,e)),t.previousFileShortSha&&n.push(new si({label:"$(git-compare) Open Changes",description:`${Q.pad(ne.Dash,2,3)} $(git-commit) ${t.previousFileShortSha} ${ne.Space} $(git-compare) ${ne.Space} $(git-commit) ${t.shortSha}`},Bt.DiffWithPrevious,[t.uri,{commit:t}])),t.workingFileName&&n.push(new si({label:"$(git-compare) Open Changes with Working Tree",description:`${Q.pad(ne.Dash,2,3)} $(git-commit) ${t.shortSha} ${ne.Space} $(git-compare) ${ne.Space} $(file-text) ${h}`},Bt.DiffWithWorking,[q.Uri.file(xe.resolve(t.repoPath,t.workingFileName)),{commit:t}])),t.workingFileName&&"D"!==t.status&&n.push(new Si(t)),n.push(new $i(t));const l=(yield e.getRemotes(t.repoPath)).filter(e=>void 0!==e.provider);if(l.length){if(t.workingFileName&&"D"!==t.status){const i=yield e.getBranch(t.repoPath);n.push(new vi(l,{type:"file",fileName:t.workingFileName,branch:i.name},s))}a||n.push(new vi(l,{type:"revision",fileName:t.fileName,commit:t},s))}a||(n.push(new xi(t,e)),n.push(new si({label:"$(clippy) Copy Commit ID to Clipboard",description:`${Q.pad(ne.Dash,2,3)} ${t.shortSha}`},Bt.CopyShaToClipboard,[i,{sha:t.sha}])),n.push(new si({label:"$(clippy) Copy Commit Message to Clipboard",description:`${Q.pad(ne.Dash,2,3)} ${t.message}`},Bt.CopyMessageToClipboard,[i,{message:t.message,sha:t.sha}]))),t.workingFileName&&n.push(new si({label:"$(history) Show File History",description:`${Q.pad(ne.Dash,2,3)} of ${xe.basename(t.fileName)}`},Bt.ShowQuickFileHistory,[q.Uri.file(xe.resolve(t.repoPath,t.workingFileName)),{fileLog:r,goBackCommand:s}])),a||(n.push(new si({label:`$(history) Show ${t.workingFileName?"Previous ":""}File History`,description:`${Q.pad(ne.Dash,2,3)} of ${xe.basename(t.fileName)} ${Q.pad(ne.Dot,1,1)} from ${ne.Space}$(git-commit) ${t.shortSha}`},Bt.ShowQuickFileHistory,[t.toGitUri(),{goBackCommand:s}])),n.push(new si({label:"$(git-commit) Show Commit Details",description:`${Q.pad(ne.Dash,2,3)} $(git-commit) ${t.shortSha}`},Bt.ShowQuickCommitDetails,[t.toGitUri(),{commit:t,sha:t.sha,goBackCommand:s}]))),o&&n.splice(0,0,o);let d=void 0,u=void 0;a||(void 0===r||r.truncated||void 0!==r.sha?(d=(()=>P.__awaiter(this,void 0,void 0,function*(){let s=r,n=s&&s.commits.get(t.sha);if(void 0===n||void 0===n.previousSha){if(void 0===(s=yield e.getLogForFile(t.repoPath,i.fsPath,{maxCount:e.config.advanced.maxQuickHistory,ref:t.sha})))return qt;void 0===(n=s&&s.commits.get(t.sha))&&t.isMerge&&(n=M.first(s.commits.values())),n&&(n.nextSha=t.nextSha,n.nextFileName=t.nextFileName)}return void 0===n||void 0===n.previousSha?qt:new ni(Bt.ShowQuickCommitFileDetails,[n.previousUri,{fileLog:s,sha:n.previousSha,goBackCommand:o}])})),u=(()=>P.__awaiter(this,void 0,void 0,function*(){let s=r,n=s&&s.commits.get(t.sha);if(void 0===n||void 0===n.nextSha){s=void 0,n=void 0;const o=yield e.findNextCommit(t.repoPath,i.fsPath,t.sha);void 0!==o&&o.sha!==t.sha&&((n=t).nextSha=o.sha,n.nextFileName=o.originalFileName||o.fileName)}return void 0===n||void 0===n.nextSha?qt:new ni(Bt.ShowQuickCommitFileDetails,[n.nextUri,{fileLog:s,sha:n.nextSha,goBackCommand:o}])}))):(d=void 0===t.previousSha?void 0:new ni(Bt.ShowQuickCommitFileDetails,[t.previousUri,{fileLog:r,sha:t.previousSha,goBackCommand:o}]),u=void 0===t.nextSha?void 0:new ni(Bt.ShowQuickCommitFileDetails,[t.nextUri,{fileLog:r,sha:t.nextSha,goBackCommand:o}])));const m=yield Jt.instance.beginScope({left:o,",":d,".":u}),g=yield q.window.showQuickPick(n,{matchOnDescription:!0,placeHolder:`${t.getFormattedPath()} ${Q.pad(ne.Dot,1,1)} ${c?`Uncommitted ${ne.ArrowRightHollow} `:""}${t.shortSha} ${Q.pad(ne.Dot,1,1)} ${t.author}, ${t.fromNow()} ${Q.pad(ne.Dot,1,1)} ${t.message}`,ignoreFocusOut:$(),onDidSelectItem:e=>{m.setKeyCommand("right",e)}});return yield m.dispose(),g})}}class Fi{static showProgress(e){return D(e,{left:qt,",":qt,".":qt})}static show(e,t,i,o,s){return P.__awaiter(this,void 0,void 0,function*(){const e=t&&[...M.map(t.commits.values(),e=>new ci(e))]||[new ri("No results found")];if(void 0!==s.showInResultsExplorerCommand&&e.splice(0,0,s.showInResultsExplorerCommand),void 0!==s.showAllCommand&&e.splice(0,0,s.showAllCommand),void 0!==s.goBackCommand&&e.splice(0,0,s.goBackCommand),o.token.isCancellationRequested)return;const r=yield Jt.instance.beginScope({left:s.goBackCommand});o.cancel();const n=yield q.window.showQuickPick(e,{matchOnDescription:!0,placeHolder:i,ignoreFocusOut:$()});return yield r.dispose(),n})}}class Pi{static showProgress(e){return D(`${e} history ${ne.Dash} search by commit message, filename, or commit id`,{left:qt,",":qt,".":qt})}static show(e,t,i,o,s,r,n){return P.__awaiter(this,void 0,void 0,function*(){const a=Array.from(M.map(t.commits.values(),e=>new ci(e))),h=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to ${ne.Space}$(git-branch) ${o} history`},Bt.ShowQuickBranchHistory,[i,{branch:o,log:t,maxCount:t.maxCount,goBackCommand:r}]),c=(yield e.getRemotes(i&&i.repoPath||t.repoPath)).filter(e=>void 0!==e.provider);c.length&&a.splice(0,0,new vi(c,{type:"branch",branch:o},h)),a.splice(0,0,new si({label:"$(search) Show Commit Search",description:`${Q.pad(ne.Dash,2,3)} search for commits by message, author, files, or commit id`},Bt.ShowCommitSearch,[Fe.fromRepoPath(t.repoPath),{goBackCommand:h}]));let l=void 0;if((t.truncated||t.sha)&&(t.truncated?a.splice(0,0,new si({label:"$(sync) Show All Commits",description:`${Q.pad(ne.Dash,2,3)} this may take a while`},Bt.ShowQuickBranchHistory,[Fe.fromRepoPath(t.repoPath),{branch:o,maxCount:0,goBackCommand:r}])):a.splice(0,0,new si({label:"$(history) Show Branch History",description:`${Q.pad(ne.Dash,2,3)} shows ${ne.Space}$(git-branch) ${o} history`},Bt.ShowQuickBranchHistory,[Fe.fromRepoPath(t.repoPath),{branch:o,goBackCommand:h}])),n&&a.splice(0,0,n),t.truncated)){const e=new si({label:"$(arrow-right) Show Next Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${t.maxCount} newer commits`},Bt.ShowQuickBranchHistory,[i,{branch:o,maxCount:t.maxCount,nextPageCommand:n}]),s=M.last(t.commits.values());null!=s&&(l=new si({label:"$(arrow-left) Show Previous Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${t.maxCount} older commits`},Bt.ShowQuickBranchHistory,[new Fe(i||s.uri,s),{branch:o,maxCount:t.maxCount,goBackCommand:r,nextPageCommand:e}]),a.splice(0,0,l))}if(r&&a.splice(0,0,r),s.token.isCancellationRequested)return;const d=yield Jt.instance.beginScope({left:r,",":l,".":n});s.cancel();const u=yield q.window.showQuickPick(a,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${o} history ${ne.Dash} search by commit message, filename, or commit id`,ignoreFocusOut:$()});return yield d.dispose(),u})}}class ki{static showProgress(e){return D(e,{left:qt,",":qt,".":qt})}static show(e,t,i,o,s={}){return P.__awaiter(this,void 0,void 0,function*(){s=Object.assign({pickerOnly:!1},s);const r=Array.from(M.map(t.commits.values(),e=>new ci(e)));let n=0;if(s.pickerOnly&&(n++,r.splice(0,0,new mi(t.repoPath,o,e,s.currentCommand))),void 0!==s.showInResultsExplorerCommand&&(n++,r.splice(0,0,s.showInResultsExplorerCommand)),t.truncated||t.sha){if(void 0!==s.showAllCommand)n++,r.splice(0,0,s.showAllCommand);else if(!s.pickerOnly){const o=yield e.findWorkingFileName(t.repoPath,xe.relative(t.repoPath,i.fsPath));o&&(n++,r.splice(0,0,new si({label:"$(history) Show File History",description:`${Q.pad(ne.Dash,2,3)} of ${xe.basename(o)}`},Bt.ShowQuickFileHistory,[q.Uri.file(xe.resolve(t.repoPath,o)),{goBackCommand:new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to history of ${ne.Space}$(file-text) ${xe.basename(i.fsPath)}${i.sha?` from ${ne.Space}$(git-commit) ${i.shortSha}`:""}`},Bt.ShowQuickFileHistory,[i,{log:t,maxCount:t.maxCount,range:t.range,goBackCommand:s.goBackCommand}])}])))}void 0!==s.nextPageCommand&&(n++,r.splice(0,0,s.nextPageCommand)),void 0!==s.previousPageCommand&&(n++,r.splice(0,0,s.previousPageCommand))}if(!s.pickerOnly){const o=yield e.getBranch(i.repoPath),a=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to history of ${ne.Space}$(file-text) ${xe.basename(i.fsPath)}${i.sha?` from ${ne.Space}$(git-commit) ${i.shortSha}`:""}`},Bt.ShowQuickFileHistory,[i,{log:t,maxCount:t.maxCount,range:t.range}]);void 0===s.goBackCommand&&r.splice(n++,0,new si({label:"$(history) Show Branch History",description:`${Q.pad(ne.Dash,2,3)} shows  ${ne.Space}$(git-branch) ${o.name} history`},Bt.ShowQuickCurrentBranchHistory,[void 0,{goBackCommand:a}]));const h=(yield e.getRemotes(i.repoPath)).filter(e=>void 0!==e.provider);if(h.length){const e=void 0!==i.sha?{type:"revision",branch:o.name,fileName:i.getRelativePath(),sha:i.sha}:{type:"file",branch:o.name,fileName:i.getRelativePath()};r.splice(n++,0,new vi(h,e,a))}s.goBackCommand&&r.splice(0,0,s.goBackCommand)}if(void 0!==s.progressCancellation&&s.progressCancellation.token.isCancellationRequested)return;const a=yield Jt.instance.beginScope({left:s.goBackCommand,",":s.previousPageCommand,".":s.nextPageCommand});s.progressCancellation&&s.progressCancellation.cancel();const h=yield q.window.showQuickPick(r,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:o,ignoreFocusOut:$()});return yield a.dispose(),h})}}class Ri{constructor(e){this.repository=e,this.label=e.name,this.description=e.path}get repoPath(){return this.repository.path}}class Ti{static show(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){const o=[...M.map(yield e.getRepositories(),e=>new Ri(e))];void 0!==i&&o.splice(0,0,i);return yield q.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:$()})})}}class Ei extends ai{constructor(e,t,i){const o=e.getOcticon(),s=e.getFormattedDirectory(!0);super(e.uri,i||{label:`${e.staged?"$(check)":ne.Space.repeat(3)}${Q.pad(o,2,2)} ${xe.basename(e.fileName)}`,description:s}),this.status=e,void 0!==e.indexStatus?this.commit=new Ae(Pe.File,e.repoPath,Dt.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName):this.commit=new Ae(Pe.File,e.repoPath,Dt.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,void 0!==t?Dt.stagedUncommittedSha:"HEAD",e.fileName)}onDidPressKey(e){return q.commands.executeCommand(Bt.DiffWithPrevious,Fe.fromFileStatus(this.status,this.status.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!1}})}}class Ni extends si{constructor(e,t){const i=e.map(e=>e.uri);super(t||{label:"$(file-symlink-file) Open Changed Files",description:""},Bt.OpenChangedFiles,[void 0,{uris:i}])}}class Bi{static computeStatus(e){let t=0,i=0,o=0,s=0,r=0,n=0;const a=[],h=[];for(const c of e){switch(c.indexStatus){case"A":case"?":t++,a.push(c);break;case"D":r++;break;case void 0:break;default:o++,a.push(c)}switch(c.workTreeStatus){case"A":case"?":i++,h.push(c);break;case"D":n++;break;case void 0:break;default:s++,h.push(c)}}const c=t+o+r,l=i+s+n;return{staged:c,stagedStatus:c>0?`+${t} ~${o} -${r}`:"",stagedAddsAndChanges:a,unstaged:l,unstagedStatus:l>0?`+${i} ~${s} -${n}`:"",unstagedAddsAndChanges:h}}static show(e,t){return P.__awaiter(this,void 0,void 0,function*(){const i=[...M.flatMap(e.files,e=>void 0!==e.workTreeStatus&&void 0!==e.indexStatus?[new Ei(e.with({indexStatus:null}),e.indexStatus),new Ei(e.with({workTreeStatus:null}))]:[new Ei(e)])];i.sort((e,t)=>(e.status.staged?-1:1)-(t.status.staged?-1:1)||e.status.fileName.localeCompare(t.status.fileName));const o=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to ${ne.Space}$(git-branch) ${e.branch} status`},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]),s=this.computeStatus(e.files);if(s.staged>0){let o=0;const r=s.unstaged>0?e.files.findIndex(e=>!e.staged):-1;r>-1&&(i.splice(r,0,new si({label:"Unstaged Files",description:s.unstagedStatus},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(r,0,new Ni(s.stagedAddsAndChanges,{label:`${ne.Space.repeat(4)} $(file-symlink-file) Open Staged Files`,description:""})),i.push(new Ni(s.unstagedAddsAndChanges,{label:`${ne.Space.repeat(4)} $(file-symlink-file) Open Unstaged Files`,description:""}))),i.splice(o++,0,new si({label:"Staged Files",description:s.stagedStatus},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]))}else e.files.some(e=>!e.staged)&&i.splice(0,0,new si({label:"Unstaged Files",description:s.unstagedStatus},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]));e.files.length?(i.push(new Ni(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges))),i.push(new si({label:"$(x) Close Unchanged Files",description:""},Bt.CloseUnchangedFiles))):i.push(new si({label:"No changes in the working tree",description:""},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(0,0,new si({label:"$(inbox) Show Stashed Changes",description:`${Q.pad(ne.Dash,2,3)} shows stashed changes in the repository`},Bt.ShowQuickStashList,[Fe.fromRepoPath(e.repoPath),{goBackCommand:o}])),e.upstream&&e.state.ahead&&i.splice(0,0,new si({label:`$(cloud-upload)${ne.Space} ${e.state.ahead} Commit${e.state.ahead>1?"s":""} ahead of ${ne.Space}$(git-branch) ${e.upstream}`,description:`${Q.pad(ne.Dash,2,3)} shows commits in ${ne.Space}$(git-branch) ${e.branch} but not ${ne.Space}$(git-branch) ${e.upstream}`},Bt.ShowQuickBranchHistory,[Fe.fromRepoPath(e.repoPath,`${e.upstream}..${e.branch}`),{branch:e.branch,maxCount:0,goBackCommand:o}])),e.upstream&&e.state.behind&&i.splice(0,0,new si({label:`$(cloud-download)${ne.Space} ${e.state.behind} Commit${e.state.behind>1?"s":""} behind ${ne.Space}$(git-branch) ${e.upstream}`,description:`${Q.pad(ne.Dash,2,3)} shows commits in ${ne.Space}$(git-branch) ${e.upstream} but not ${ne.Space}$(git-branch) ${e.branch}${e.sha?` (since ${ne.Space}$(git-commit) ${Dt.shortenSha(e.sha)})`:""}`},Bt.ShowQuickBranchHistory,[Fe.fromRepoPath(e.repoPath,`${e.branch}..${e.upstream}`),{branch:e.upstream,maxCount:0,goBackCommand:o}])),!e.upstream||e.state.ahead||e.state.behind||i.splice(0,0,new si({label:`$(git-branch) ${e.branch} is up-to-date with ${ne.Space}$(git-branch) ${e.upstream}`,description:""},Bt.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),t&&i.splice(0,0,t);const r=yield Jt.instance.beginScope({left:t}),n=yield q.window.showQuickPick(i,{matchOnDescription:!0,placeHolder:`status of ${e.branch}${e.upstream?` ${Q.pad(ne.ArrowLeftRight,1,1)} ${e.upstream}`:""}`,ignoreFocusOut:$(),onDidSelectItem:e=>{r.setKeyCommand("right",e)}});return yield r.dispose(),n})}}class Ui{static showProgress(e){return D("apply"===e?`Apply stashed changes to your working tree${ne.Ellipsis}`:`stashed changes ${ne.Dash} search by message, filename, or commit id`,{left:qt,",":qt,".":qt})}static show(e,t,i,o,s,r){return P.__awaiter(this,void 0,void 0,function*(){const e=t&&Array.from(M.map(t.commits.values(),e=>new ci(e)))||[];if("list"===i&&e.splice(0,0,new si({label:"$(plus) Stash Changes",description:`${Q.pad(ne.Dash,2,3)} stashes all changes`},Bt.StashSave,[{goBackCommand:r}])),s&&e.splice(0,0,s),o.token.isCancellationRequested)return;const n=yield Jt.instance.beginScope({left:s});o.cancel();const a=yield q.window.showQuickPick(e,{matchOnDescription:!0,placeHolder:"apply"===i?`Apply stashed changes to your working tree${ne.Ellipsis}`:`stashed changes ${ne.Dash} search by message, filename, or commit id`,ignoreFocusOut:$()});return yield n.dispose(),a})}}class Li extends Lt{constructor(e){super([Bt.DiffDirectory,Bt.ExternalDiffAll,Bt.ExplorersOpenDirectoryDiff,Bt.ExplorersOpenDirectoryDiffWithWorking]),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){switch(e.command){case Bt.ExternalDiffAll:t.ref1="HEAD",t.ref2=void 0;break;case Bt.ExplorersOpenDirectoryDiff:"view"===e.type&&e.node instanceof zo&&(t.ref1=e.node.ref1,t.ref2=e.node.ref2);break;case Bt.ExplorersOpenDirectoryDiffWithWorking:(function(e){return"view"===e.type&&e.node instanceof Rt})(e)&&(t.ref1=e.node.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);let o;try{const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to open directory compare");if(!i.ref1){i=Object.assign({},i);const t=`Compare Working Tree to ${ne.Ellipsis}`;o=ti.showProgress(t);const[s,r]=yield Promise.all([this.git.getBranches(e),this.git.getTags(e)]);if(o.token.isCancellationRequested)return;const n=yield ti.show(s,r,t,{progressCancellation:o});if(void 0===n)return;if(n instanceof si)return n.execute();if(i.ref1=n.name,void 0===i.ref1)return}return void this.git.openDirectoryDiff(e,i.ref1,i.ref2)}catch(e){if("No diff tool found"===(e&&e.toString())){if(!(yield q.window.showWarningMessage("Unable to open directory compare because there is no Git diff tool configured","View Git Docs")))return;return q.commands.executeCommand(oe.Open,q.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}return we.error(e,"DiffDirectoryCommand"),q.window.showErrorMessage("Unable to open directory compare. See output channel for more details")}finally{o&&o.dispose()}})}}class Ai extends Lt{constructor(e){super(Bt.DiffLineWithPrevious),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;const o=yield Fe.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Dt.isUncommitted(i.commit.sha)){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=i.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e.commit,i.commit.isUncommitted){const e=yield this.git.getStatusForFile(o.repoPath,o.fsPath);void 0!==e&&void 0!==e.indexStatus&&(i.commit=i.commit.with({sha:Dt.stagedUncommittedSha}))}}catch(e){return we.error(e,"DiffLineWithPreviousCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const s={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:Dt.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,s)})}}class Oi extends Lt{constructor(e){super(Bt.DiffLineWithWorking),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;const o=yield Fe.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Dt.isUncommitted(i.commit.sha)){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=i.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e.commit,i.commit.isUncommitted){const t=yield this.git.getStatusForFile(o.repoPath,o.fsPath);i.commit=i.commit.with({sha:void 0!==t&&void 0!==t.indexStatus?Dt.stagedUncommittedSha:i.commit.previousSha,fileName:i.commit.previousFileName,originalFileName:null,previousSha:null,previousFileName:null}),i.line=e.line.line+1}}catch(e){return we.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const s={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,s)})}}class Wi extends Lt{constructor(e){super(Bt.DiffWith),this.git=e}static getMarkdownCommandArgs(e,t){let i;if(e instanceof ke){const o=e;i=void 0===t?o.isUncommitted?{repoPath:o.repoPath,lhs:{sha:"HEAD",uri:o.uri},rhs:{sha:"",uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:void 0!==o.previousSha?o.previousSha:Dt.deletedSha,uri:o.previousUri},rhs:{sha:o.sha,uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:o.sha,uri:o.uri},rhs:{sha:t.sha,uri:t.uri}}}else i=e;return super.getMarkdownCommandArgsCore(Bt.DiffWith,i)}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i)).repoPath&&void 0!==i.lhs&&void 0!==i.rhs)try{Dt.isResolveRequired(i.lhs.sha)&&(i.lhs.sha=yield this.git.resolveReference(i.repoPath,i.lhs.sha,i.lhs.uri)),Dt.isResolveRequired(i.rhs.sha)&&(i.rhs.sha=yield this.git.resolveReference(i.repoPath,i.rhs.sha,i.rhs.uri));const[e,t]=yield Promise.all([this.git.getVersionedFile(i.repoPath,i.lhs.uri.fsPath,i.lhs.sha),this.git.getVersionedFile(i.repoPath,i.rhs.uri.fsPath,i.rhs.sha)]);void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new q.Range(i.line,0,i.line,0));let o="";void 0===t?o=Dt.isUncommitted(i.rhs.sha)?" (deleted)":"deleted in ":void 0!==e&&i.lhs.sha!==Dt.deletedSha||(o="added in ");let s="";if(void 0===e&&""===i.rhs.sha&&(void 0!==t?(s="not in ",o=""):s="deleted in "),void 0===i.lhs.title&&i.lhs.sha!==Dt.deletedSha&&(void 0!==e||""!==s)){const e=Dt.shortenSha(i.lhs.sha)||"";i.lhs.title=`${xe.basename(i.lhs.uri.fsPath)}${""!==e?` (${s}${e})`:""}`}if(void 0===i.rhs.title&&i.rhs.sha!==Dt.deletedSha){const e=Dt.shortenSha(i.rhs.sha)||"";i.rhs.title=`${xe.basename(i.rhs.uri.fsPath)}${""!==e?` (${o}${e})`:o}`}const r=void 0!==i.lhs.title&&void 0!==i.rhs.title?`${i.lhs.title} ${ne.ArrowLeftRight} ${i.rhs.title}`:i.lhs.title||i.rhs.title;return yield q.commands.executeCommand(oe.Diff,void 0===e?Fe.toRevisionUri(Dt.deletedSha,i.lhs.uri.fsPath,i.repoPath):q.Uri.file(e),void 0===t?Fe.toRevisionUri(Dt.deletedSha,i.rhs.uri.fsPath,i.repoPath):q.Uri.file(t),r,i.showOptions)}catch(e){return we.error(e,"DiffWithCommand","getVersionedFile"),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}})}}class Mi extends Lt{constructor(e){super(Bt.DiffWithBranch),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Fe.fromUri(t,this.git);if(!o.repoPath)return jt.showNoRepositoryWarningMessage("Unable to open branch compare");const s=`Compare ${xe.basename(o.fsPath)} with ${ne.Ellipsis}`,r=ti.showProgress(s);try{const[e,t]=yield Promise.all([this.git.getBranches(o.repoPath),this.git.getTags(o.repoPath)]);if(r.token.isCancellationRequested)return;const n=yield ti.show(e,t,s,{progressCancellation:r,goBackCommand:i.goBackCommand});if(void 0===n)return;if(n instanceof si)return n.execute();const a=n.name;if(void 0===a)return;let h,c;const l=yield this.git.getDiffStatus(o.repoPath,"HEAD",a,{filter:"R"});if(void 0!==l){const e=Dt.normalizePath(xe.relative(o.repoPath,o.fsPath)),t=l.find(t=>t.fileName===e);void 0!==t&&void 0!==t.originalFileName&&(h=q.Uri.file(xe.join(o.repoPath,t.originalFileName)),c=`${xe.basename(t.originalFileName)} (${a})`)}const d={repoPath:o.repoPath,lhs:{sha:n.remote?`remotes/${a}`:a,uri:h||o,title:c||`${xe.basename(o.fsPath)} (${a})`},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,d)}finally{r.dispose()}})}}class Ii extends Lt{constructor(e){super(Bt.DiffWithNext),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Fe.fromUri(t,this.git);let s;if(void 0===i.commit||!(i.commit instanceof Ae)||void 0!==i.range)try{const e=void 0===i.commit?o.sha:i.commit.sha;if(Dt.isStagedUncommitted(e))return q.commands.executeCommand(Bt.DiffWithWorking,t);const r=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:void 0!==e?void 0:2,range:i.range});if(void 0===r)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e&&r.commits.get(e)||M.first(r.commits.values()),void 0===o.sha&&void 0!==(s=yield this.git.getStatusForFile(o.repoPath,o.fsPath)))return q.commands.executeCommand(Bt.DiffWithWorking,t)}catch(e){return we.error(e,"DiffWithNextCommand",`getLogForFile(${o.repoPath}, ${o.fsPath})`),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}if(void 0===i.commit.nextSha){if(void 0!==(s=s||(yield this.git.getStatusForFile(o.repoPath,o.fsPath)))&&"M"===s.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:Dt.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,e)}return q.commands.executeCommand(Bt.DiffWithWorking,t)}const r={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:i.commit.nextSha,uri:i.commit.nextUri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,r)})}}class Hi extends Lt{constructor(e){super(Bt.DiffWithPrevious),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||!i.commit.isFile||void 0!==i.range){const e=yield Fe.fromUri(t,this.git);try{let o=void 0===i.commit?e.sha:i.commit.sha;if(o===Dt.deletedSha)return jt.showCommitHasNoPreviousCommitWarningMessage();let s=!1;Dt.isStagedUncommitted(o)&&(e.sha=o=void 0,s=!0);const r=yield this.git.getLogForFile(e.repoPath,e.fsPath,{maxCount:2,range:i.range,ref:o,skipMerges:!0});if(void 0===r)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=o&&r.commits.get(o)||M.first(r.commits.values()),void 0===e.sha){const o=yield this.git.getStatusForFile(e.repoPath,e.fsPath);if(void 0!==o){if(s){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:Dt.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,e)}if(void 0!==o.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:Dt.stagedUncommittedSha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,e)}return q.commands.executeCommand(Bt.DiffWithWorking,t,{commit:i.commit,showOptions:i.showOptions})}}}catch(t){return we.error(t,"DiffWithPreviousCommand",`getLogForFile(${e.repoPath}, ${e.fsPath})`),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const o={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:Dt.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,o)})}}class ji extends Lt{constructor(e){super(Bt.DiffWithRevision),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield Fe.fromUri(t,this.git),s=`Compare ${o.getFormattedPath()}${o.sha?` ${Q.pad(ne.Dot,1,1)} ${o.shortSha}`:""} with ${ne.Ellipsis}`,r=ki.showProgress(s);try{const e=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,ref:o.sha});if(void 0===e)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(r.token.isCancellationRequested)return;let n=void 0;if(e.truncated){const o=new si({label:"$(arrow-right) Show Next Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${e.maxCount} newer commits`},Bt.DiffWithRevision,[t,Object.assign({},i)]),s=M.last(e.commits.values());null!=s&&(n=new si({label:"$(arrow-left) Show Previous Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${e.maxCount} older commits`},Bt.DiffWithRevision,[new Fe(t,s),Object.assign({},i,{nextPageCommand:o})]))}const a=yield ki.show(this.git,e,o,s,{pickerOnly:!0,progressCancellation:r,currentCommand:new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to history of ${ne.Space}$(file-text) ${o.getFormattedPath()}${o.sha?` from ${ne.Space}$(git-commit) ${o.shortSha}`:""}`},Bt.DiffWithRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:n,showAllCommand:void 0!==e&&e.truncated?new si({label:"$(sync) Show All Commits",description:`${Q.pad(ne.Dash,2,3)} this may take a while`},Bt.DiffWithRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===a)return;let h;if(a instanceof mi){const e=yield a.execute();if(void 0===e)return;if(e instanceof si)return e.execute();h=e.name}else{if(a instanceof si)return a.execute();h=a.commit.sha}const c={repoPath:o.repoPath,lhs:{sha:h,uri:o},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return yield q.commands.executeCommand(Bt.DiffWith,c)}catch(e){return we.error(e,"DiffWithRevisionCommand"),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}finally{r.dispose()}})}}class Gi extends Lt{constructor(e){super(Bt.DiffWithWorking),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;const o=yield Fe.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||Dt.isUncommitted(i.commit.sha)){if(void 0===o.sha)return q.window.showInformationMessage("File matches the working tree");if(Dt.isStagedUncommitted(o.sha)){o.sha=void 0;const e=yield this.git.getStatusForFile(o.repoPath,o.fsPath);if(void 0!==e&&void 0!==e.indexStatus){const e={repoPath:o.repoPath,lhs:{sha:Dt.stagedUncommittedSha,uri:o.fileUri()},rhs:{sha:"",uri:o.fileUri()},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,e)}}try{if(i.commit=yield this.git.getLogCommit(o.repoPath,o.fsPath,o.sha,{firstIfMissing:!0}),void 0===i.commit)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open compare")}catch(e){return we.error(e,"DiffWithWorkingCommand",`getLogCommit(${o.repoPath}, ${o.fsPath}, ${o.sha})`),q.window.showErrorMessage("Unable to open compare. See output channel for more details")}}if(void 0===(yield this.git.findWorkingFileName(o.repoPath,o.fsPath)))return;const s={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return q.commands.executeCommand(Bt.DiffWith,s)})}}var Qi;!function(e){e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.ADDED_BY_US=9]="ADDED_BY_US",e[e.ADDED_BY_THEM=10]="ADDED_BY_THEM",e[e.DELETED_BY_US=11]="DELETED_BY_US",e[e.DELETED_BY_THEM=12]="DELETED_BY_THEM",e[e.BOTH_ADDED=13]="BOTH_ADDED",e[e.BOTH_DELETED=14]="BOTH_DELETED",e[e.BOTH_MODIFIED=15]="BOTH_MODIFIED"}(Qi||(Qi={}));var Vi;!function(e){e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree"}(Vi||(Vi={}));class Ki{constructor(e,t){this.uri=e,this.staged=t}}class qi extends Ut{constructor(e){super(Bt.ExternalDiff),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?(t=Object.assign({},t),t.files=e.scmResourceStates.map(e=>new Ki(e.resourceUri,e.resourceGroupType===Vi.Index)),this.execute(t)):"scm-groups"===e.type?(t=Object.assign({},t),t.files=k.filterMap(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?new Ki(e.resourceUri,e.resourceGroupType===Vi.Index):void 0),this.execute(t)):this.execute(t)})}isModified(e){const t=e.type;return t===Qi.BOTH_MODIFIED||t===Qi.INDEX_MODIFIED||t===Qi.MODIFIED}execute(e={}){return P.__awaiter(this,void 0,void 0,function*(){try{const t=yield this.git.getRepoPath(void 0);if(!t)return jt.showNoRepositoryWarningMessage("Unable to open changed files");const i=yield this.git.getDiffTool(t);if(void 0===i){if(!(yield q.window.showWarningMessage("Unable to open file compare because there is no Git diff tool configured","View Git Docs")))return;return q.commands.executeCommand(oe.Open,q.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}if(void 0===e.files){const i=yield this.git.getStatusForRepo(t);if(void 0===i)return q.window.showWarningMessage("Unable to open changed files");e.files=[];for(const t of i.files)"M"===t.indexStatus&&e.files.push(new Ki(t.uri,!0)),"M"===t.workTreeStatus&&e.files.push(new Ki(t.uri,!1))}for(const o of e.files)this.git.openDiffTool(t,o.uri,o.staged,i);return}catch(e){return we.error(e,"ExternalDiffCommand"),q.window.showErrorMessage("Unable to open external diff. See output channel for more details")}})}}class zi extends Lt{constructor(e){super(Bt.OpenChangedFiles),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to open changed files");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return q.window.showWarningMessage("Unable to open changed files");i.uris=k.filterMap(o.files,e=>"D"!==e.status?e.uri:void 0)}for(const e of i.uris)yield S(e,{preserveFocus:!0,preview:!1});return}catch(e){return we.error(e,"OpenChangedFilesCommand"),q.window.showErrorMessage("Unable to open changed files. See output channel for more details")}})}}class Yi extends Lt{constructor(e){super(Bt.OpenBranchesInRemote),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return y(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=(t=w(t,e))&&(yield Fe.fromUri(t,this.git)),s=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(s)try{const e=(yield this.git.getRemotes(s)).filter(e=>void 0!==e.provider);return q.commands.executeCommand(Bt.OpenInRemote,t,{resource:{type:"branches"},remote:i.remote,remotes:e})}catch(e){return we.error(e,"OpenBranchesInRemoteCommand"),q.window.showErrorMessage("Unable to open branches in remote provider. See output channel for more details")}})}}class Xi extends Lt{constructor(e){super(Bt.OpenBranchInRemote),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return C(e)&&((t=Object.assign({},t)).branch=e.node.branch.name,t.remote=e.node.branch.getRemote()),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=(t=w(t,e))&&(yield Fe.fromUri(t,this.git)),s=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(s)try{if(void 0===i.branch){i=Object.assign({},i);const e=yield this.git.getBranches(s),t=yield pi.show(e,`Show history for branch${ne.Ellipsis}`);if(void 0===t)return;if(t instanceof si)return;if(i.branch=t.branch.name,void 0===i.branch)return}const e=(yield this.git.getRemotes(s)).filter(e=>void 0!==e.provider);return q.commands.executeCommand(Bt.OpenInRemote,t,{resource:{type:"branch",branch:i.branch},remote:i.remote,remotes:e})}catch(e){return we.error(e,"OpenBranchInRemoteCommandArgs"),q.window.showErrorMessage("Unable to open branch in remote provider. See output channel for more details")}})}}class Zi extends Lt{constructor(e){super(Bt.OpenCommitInRemote),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Bt.OpenCommitInRemote,t)}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const o=yield Fe.fromUri(t,this.git);if(o.repoPath)try{if(void 0===i.sha){const t=void 0===e?0:e.selection.active.line;if(t<0)return;const s=yield this.git.getBlameForLine(o,t);if(void 0===s)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open commit in remote provider");let r=s.commit;r.isUncommitted&&(r=r.with({sha:r.previousSha,fileName:r.previousFileName,previousSha:null,previousFileName:null})),i.sha=r.sha}const s=(yield this.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider);return q.commands.executeCommand(Bt.OpenInRemote,t,{resource:{type:"commit",sha:i.sha},remotes:s})}catch(e){return we.error(e,"OpenCommitInRemoteCommand"),q.window.showErrorMessage("Unable to open commit in remote provider. See output channel for more details")}})}}class Ji extends Lt{constructor(e){super(Bt.OpenFileInRemote),this.git=e}preExecute(e,t={range:!0}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.range=!1,C(e)&&(t.branch=void 0!==e.node.branch?e.node.branch.name:void 0),this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={range:!0}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;const o=yield Fe.fromUri(t,this.git);if(o.repoPath){if(void 0===i.branch){const e=yield this.git.getBranch(o.repoPath);void 0!==e&&(i.branch=e.name)}try{const s=(yield this.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider),r=i.range&&void 0!==e?new q.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+1})):void 0;return q.commands.executeCommand(Bt.OpenInRemote,t,{resource:{type:void 0===o.sha?"file":"revision",branch:i.branch,fileName:o.getRelativePath(),range:r,sha:o.sha},remotes:s})}catch(e){return we.error(e,"OpenFileInRemoteCommand"),q.window.showErrorMessage("Unable to open file in remote provider. See output channel for more details")}}})}}class eo extends Lt{constructor(e,t){super(Bt.OpenFileRevision),this.annotationController=e,this.git=t}static getMarkdownCommandArgs(e,t,i){let o;if(e instanceof q.Uri){o={uri:e,line:i,annotationType:t}}else o=e;return super.getMarkdownCommandArgsCore(Bt.OpenFileRevision,o)}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);let o;try{if(void 0===i.uri){if(void 0===(t=w(t,e)))return;const s=yield Fe.fromUri(t,this.git),r=`Open ${s.getFormattedPath()}${s.sha?` ${Q.pad(ne.Dot,1,1)} ${s.shortSha}`:""} in revision ${ne.Ellipsis}`;o=ki.showProgress(r);const n=yield this.git.getLogForFile(s.repoPath,s.fsPath,{maxCount:i.maxCount,ref:s.sha});if(void 0===n)return jt.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(o.token.isCancellationRequested)return;let a=void 0;if(n.truncated){const e=new si({label:"$(arrow-right) Show Next Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${n.maxCount} newer commits`},Bt.OpenFileRevision,[t,Object.assign({},i)]),o=M.last(n.commits.values());null!=o&&(a=new si({label:"$(arrow-left) Show Previous Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${n.maxCount} older commits`},Bt.OpenFileRevision,[new Fe(t,o),Object.assign({},i,{nextPageCommand:e})]))}const h=yield ki.show(this.git,n,s,r,{pickerOnly:!0,progressCancellation:o,currentCommand:new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to history of ${ne.Space}$(file-text) ${s.getFormattedPath()}${s.sha?` from ${ne.Space}$(git-commit) ${s.shortSha}`:""}`},Bt.OpenFileRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:a,showAllCommand:void 0!==n&&n.truncated?new si({label:"$(sync) Show All Commits",description:`${Q.pad(ne.Dash,2,3)} this may take a while`},Bt.OpenFileRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===h)return;if(h instanceof mi){const e=yield h.execute();if(void 0===e)return;if(e instanceof si)return e.execute();i.uri=Fe.toRevisionUri(e.name,s.fsPath,s.repoPath)}else{if(h instanceof si)return h.execute();i.uri=Fe.toRevisionUri(h.commit.sha,h.commit.uri.fsPath,h.commit.repoPath)}}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new q.Range(i.line,0,i.line,0));const s=yield S(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?s:this.annotationController.showAnnotations(s,i.annotationType,i.line)}catch(e){return we.error(e,"OpenFileRevisionCommand"),q.window.showErrorMessage("Unable to open file revision. See output channel for more details")}finally{o&&o.dispose()}})}}class to extends Lt{constructor(){super(Bt.OpenInRemote)}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i)).remotes&&void 0!==i.resource){if(void 0!==i.remote){const e=i.remotes.filter(e=>e.name===i.remote);e.length>0&&(i.remotes=e)}try{if(1===i.remotes.length){this.ensureRemoteBranchName(i);return new fi(i.remotes[0],i.resource).execute()}let e="";switch(i.resource.type){case ce.Branch:this.ensureRemoteBranchName(i),e=`open ${i.resource.branch} branch in${ne.Ellipsis}`;break;case ce.Commit:e=`open commit ${Dt.shortenSha(i.resource.sha)} in${ne.Ellipsis}`;break;case ce.File:e=`open ${i.resource.fileName} in${ne.Ellipsis}`;break;case ce.Revision:if(void 0!==i.resource.commit&&i.resource.commit instanceof Ae)"D"===i.resource.commit.status?(i.resource.sha=i.resource.commit.previousSha,e=`open ${i.resource.fileName} ${Q.pad(ne.Dot,1,1)} ${i.resource.commit.previousShortSha} in${ne.Ellipsis}`):(i.resource.sha=i.resource.commit.sha,e=`open ${i.resource.fileName} ${Q.pad(ne.Dot,1,1)} ${i.resource.commit.shortSha} in${ne.Ellipsis}`);else{const t=void 0===i.resource.sha?"":Dt.shortenSha(i.resource.sha),o=t?` ${Q.pad(ne.Dot,1,1)} ${t}`:"";e=`open ${i.resource.fileName}${o} in${ne.Ellipsis}`}}if(1===i.remotes.length){return new fi(i.remotes[0],i.resource).execute()}const t=yield wi.show(i.remotes,e,i.resource,i.goBackCommand);if(void 0===t)return;return t.execute()}catch(e){return we.error(e,"OpenInRemoteCommand"),q.window.showErrorMessage("Unable to open in remote provider. See output channel for more details")}}})}ensureRemoteBranchName(e){if(void 0===e.remotes||void 0===e.resource||"branch"!==e.resource.type)return;const t=e.resource.branch.indexOf("/");if(t>=0){const i=e.resource.branch.substring(0,t),o=e.remotes.find(e=>e.name===i);void 0!==o&&(e.resource.branch=e.resource.branch.substring(t+1),e.remotes=[o])}}}class io extends Lt{constructor(e){super(Bt.OpenRepoInRemote),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return y(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=(t=w(t,e))&&(yield Fe.fromUri(t,this.git)),s=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(s)try{const e=(yield this.git.getRemotes(s)).filter(e=>void 0!==e.provider);return q.commands.executeCommand(Bt.OpenInRemote,t,{resource:{type:"repo"},remote:i.remote,remotes:e})}catch(e){return we.error(e,"OpenRepoInRemoteCommand"),q.window.showErrorMessage("Unable to open repository in remote provider. See output channel for more details")}})}}class oo extends Lt{constructor(e,t){super(Bt.OpenWorkingFile),this.annotationController=e,this.git=t}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);try{if(void 0===i.uri){if(void 0===(t=w(t,e)))return;i.uri=yield Fe.fromUri(t,this.git)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new q.Range(i.line,0,i.line,0));const o=yield S(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?o:this.annotationController.showAnnotations(o,i.annotationType,i.line)}catch(e){return we.error(e,"OpenWorkingFileCommand"),q.window.showErrorMessage("Unable to open working file. See output channel for more details")}})}}class so extends Ut{constructor(){super(Bt.ResetSuppressedWarnings)}execute(){return P.__awaiter(this,void 0,void 0,function*(){yield ds.update(ds.name("advanced")("messages").value,void 0,q.ConfigurationTarget.Global)})}}const ro=/^([@~=:#])/,no=new Map([["@",St.Author],["~",St.Changes],["=",St.ChangesOccurrences],[":",St.Files],["#",St.Sha]]);class ao extends Ot{constructor(e){super(Bt.ShowCommitSearch),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=void 0===(t=w(t,e))?void 0:yield Fe.fromUri(t,this.git),s=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(!s)return jt.showNoRepositoryWarningMessage("Unable to show commit search");i=Object.assign({},i);const r=Object.assign({},i);if(!i.search||null==i.searchBy){try{if(!i.search&&void 0!==e&&void 0!==o){const t=yield this.git.getBlameForLine(o,e.selection.active.line);void 0===t||t.commit.isUncommitted||(i.search=`#${t.commit.shortSha}`)}}catch(e){we.error(e,"ShowCommitSearchCommand","search prefetch failed")}if(i.search=yield q.window.showInputBox({value:i.search,prompt:"Please enter a search string",placeHolder:"search by message, author (use @<name>), files (use :<pattern>), or commit id (use #<sha>)"}),void 0===i.search)return void 0===i.goBackCommand?void 0:i.goBackCommand.execute();r.search=i.search;const t=ro.exec(i.search);t&&t[1]?(i.searchBy=no.get(t[1]),i.search=i.search.substring(" "===i.search[1]?2:1)):Dt.isSha(i.search)?i.searchBy=St.Sha:i.searchBy=St.Message}void 0===i.searchBy&&(i.searchBy=St.Message);let n=void 0;switch(i.searchBy){case St.Author:n=`commits with an author matching '${i.search}'`;break;case St.Changes:n=`commits with changes matching '${i.search}'`;break;case St.ChangesOccurrences:n=`commits with changes (new occurrences) matching '${i.search}'`;break;case St.Files:n=`commits with files matching '${i.search}'`;break;case St.Message:n=`commits with a message matching '${i.search}'`;break;case St.Sha:n=`commits with an id matching '${i.search}'`}const a=Fi.showProgress(n);try{const e=yield this.git.getLogForRepoSearch(s,i.search,i.searchBy,{maxCount:i.maxCount});if(a.token.isCancellationRequested)return;const o=i.goBackCommand||new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to commit search`},Bt.ShowCommitSearch,[t,r]),h=yield Fi.show(this.git,e,n,a,{goBackCommand:o,showAllCommand:void 0!==e&&e.truncated?new si({label:"$(sync) Show All Commits",description:`${Q.pad(ne.Dash,2,3)} this may take a while`},Bt.ShowCommitSearch,[t,Object.assign({},i,{maxCount:0,goBackCommand:o})]):void 0,showInResultsExplorerCommand:void 0!==e?new ui(e,n):void 0});if(void 0===h)return;return h instanceof si?h.execute():q.commands.executeCommand(Bt.ShowQuickCommitDetails,h.commit.toGitUri(),{sha:h.commit.sha,commit:h.commit,goBackCommand:new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,2)} to search for ${n}`},Bt.ShowCommitSearch,[t,i])})}catch(e){return we.error(e,"ShowCommitSearchCommand"),q.window.showErrorMessage("Unable to find commits. See output channel for more details")}finally{a.dispose()}})}}class ho extends Wt{constructor(e){super(Bt.ShowFileBlame),this.annotationController=e}execute(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===o.type&&(o=Object.assign({},o,{type:ds.get(ds.name("blame")("file")("annotationType").value)})),this.annotationController.showAnnotations(e,o.type,void 0!==o.sha?o.sha:e.selection.active.line)}catch(e){return we.error(e,"ShowFileBlameCommand"),q.window.showErrorMessage("Unable to show file blame annotations. See output channel for more details")}})}}class co extends Ut{constructor(){super(Bt.ShowLastQuickPick)}execute(){return P.__awaiter(this,void 0,void 0,function*(){const e=At;if(void 0!==e)try{return q.commands.executeCommand(e.command,...e.args)}catch(e){return we.error(e,"ShowLastQuickPickCommand"),q.window.showErrorMessage("Unable to show last quick pick. See output channel for more details")}})}}class lo extends Wt{constructor(e){super(Bt.ShowLineBlame),this.currentLineController=e}execute(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===o.type&&(o=Object.assign({},o,{type:ds.get(ds.name("blame")("line")("annotationType").value)})),this.currentLineController.showAnnotations(e,o.type)}catch(e){return we.error(e,"ShowLineBlameCommand"),q.window.showErrorMessage("Unable to show line blame annotations. See output channel for more details")}})}}class uo extends Ot{constructor(e){super(Bt.ShowQuickBranchHistory),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){const o=(t=w(t,e))&&(yield Fe.fromUri(t,this.git));let s=void 0===(i=Object.assign({},i)).branch?void 0:Pi.showProgress(i.branch);try{const e=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(!e)return jt.showNoRepositoryWarningMessage("Unable to show branch history");if(void 0===i.branch){const t=yield this.git.getBranches(e),o=yield pi.show(t,`Show history for branch${ne.Ellipsis}`);if(void 0===o)return;if(o instanceof si)return o.execute();if(i.branch=o.branch.name,void 0===i.branch)return;s=Pi.showProgress(i.branch)}if(void 0===i.log&&(i.log=yield this.git.getLogForRepo(e,{maxCount:i.maxCount,ref:o&&o.sha||i.branch}),void 0===i.log))return q.window.showWarningMessage("Unable to show branch history");if(void 0!==s&&s.token.isCancellationRequested)return;const r=yield Pi.show(this.git,i.log,o,i.branch,s,i.goBackCommand,i.nextPageCommand);if(void 0===r)return;if(r instanceof si)return r.execute();const n=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to ${ne.Space}$(git-branch) ${i.branch} history`},Bt.ShowQuickBranchHistory,[t,Object.assign({},i)]);return q.commands.executeCommand(Bt.ShowQuickCommitDetails,r.commit.toGitUri(),{sha:r.commit.sha,commit:r.commit,repoLog:i.log,goBackCommand:n})}catch(e){return we.error(e,"ShowQuickBranchHistoryCommand"),q.window.showErrorMessage("Unable to show branch history. See output channel for more details")}finally{s&&s.dispose()}})}}class mo extends Ot{constructor(e){super(Bt.ShowQuickCommitDetails),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Bt.ShowQuickCommitDetails,t)}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,b(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;const o=yield Fe.fromUri(t,this.git);let s=o.repoPath,r=xe.relative(s||"",o.fsPath);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return jt.showFileNotUnderSourceControlWarningMessage("Unable to show commit details");if(e.commit.isUncommitted)return jt.showLineUncommittedWarningMessage("Unable to show commit details");i.sha=e.commit.sha,s=e.commit.repoPath,r=e.commit.fileName,i.commit=e.commit}catch(e){return we.error(e,"ShowQuickCommitDetailsCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to show commit details. See output channel for more details")}}try{if((void 0===i.commit||i.commit.isFile)&&(void 0!==i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),void 0===i.commit&&(i.repoLog=void 0)),void 0===i.repoLog)){const e=yield this.git.getLogForRepo(s,{maxCount:2,ref:i.sha});if(void 0===e)return jt.showCommitNotFoundWarningMessage("Unable to show commit details");i.commit=e.commits.get(i.sha)}if(void 0===i.commit)return jt.showCommitNotFoundWarningMessage("Unable to show commit details");void 0===i.commit.workingFileName&&(i.commit.workingFileName=r),void 0===i.goBackCommand&&(i.goBackCommand=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to branch history`},Bt.ShowQuickCurrentBranchHistory,[i.commit.toGitUri()]));const e=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to details of ${ne.Space}$(git-commit) ${i.commit.shortSha}`},Bt.ShowQuickCommitDetails,[i.commit.toGitUri(),i]),o=yield _i.show(this.git,i.commit,t,i.goBackCommand,e,i.repoLog);if(void 0===o)return;return o instanceof Ci?q.commands.executeCommand(Bt.ShowQuickCommitFileDetails,o.commit.toGitUri(),{commit:o.commit,sha:o.sha,goBackCommand:e}):o.execute()}catch(e){return we.error(e,"ShowQuickCommitDetailsCommand"),q.window.showErrorMessage("Unable to show commit details. See output channel for more details")}})}}class go extends Ot{constructor(e){super(Bt.ShowQuickCommitFileDetails),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(Bt.ShowQuickCommitFileDetails,t)}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,b(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return;let o=i.commit&&i.commit.workingFileName;const s=yield Fe.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(s,t);if(void 0===e)return jt.showFileNotUnderSourceControlWarningMessage("Unable to show commit file details");if(e.commit.isUncommitted)return jt.showLineUncommittedWarningMessage("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit,o=xe.relative(i.commit.repoPath,s.fsPath)}catch(e){return we.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),q.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}}try{if((void 0===i.commit||!i.commit.isFile)&&(void 0!==i.commit&&(o=void 0),void 0!==i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),void 0===i.commit&&(i.fileLog=void 0)),void 0===i.fileLog&&(i.commit=yield this.git.getLogCommit(void 0===i.commit?s.repoPath:i.commit.repoPath,s.fsPath,i.sha,{previous:!0}),void 0===i.commit)))return jt.showCommitNotFoundWarningMessage("Unable to show commit file details");if(void 0===i.commit)return jt.showCommitNotFoundWarningMessage("Unable to show commit file details");i.commit.workingFileName=o,i.commit.workingFileName=yield this.git.findWorkingFileName(i.commit);const e=Dt.shortenSha(i.sha);void 0===i.goBackCommand&&(i.goBackCommand=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to details of ${ne.Space}$(git-commit) ${e}`},Bt.ShowQuickCommitDetails,[i.commit.toGitUri(),{commit:i.commit,sha:i.sha}]));const r=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to details of ${ne.Space}$(file-text) ${xe.basename(i.commit.fileName)} in ${ne.Space}$(git-commit) ${e}`},Bt.ShowQuickCommitFileDetails,[i.commit.toGitUri(),i]),n=yield Di.show(this.git,i.commit,t,i.goBackCommand,r,i.fileLog);if(void 0===n)return;if(n instanceof si)return n.execute();return}catch(e){return we.error(e,"ShowQuickCommitFileDetailsCommand"),q.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}})}}class po extends Ot{constructor(e){super(Bt.ShowQuickCurrentBranchHistory),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to show branch history");const o=yield this.git.getBranch(e);if(void 0===o)return;return q.commands.executeCommand(Bt.ShowQuickBranchHistory,t,{branch:o.name,goBackCommand:i.goBackCommand})}catch(e){return we.error(e,"ShowQuickCurrentBranchHistoryCommand"),q.window.showErrorMessage("Unable to show branch history. See output channel for more details")}})}}class fo extends Ot{constructor(e){super(Bt.ShowQuickFileHistory),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=w(t,e)))return q.commands.executeCommand(Bt.ShowQuickCurrentBranchHistory);const o=yield Fe.fromUri(t,this.git);i=Object.assign({},i);const s=`${o.getFormattedPath()}${o.sha?` ${Q.pad(ne.Dot,1,1)} ${o.shortSha}`:""}`,r=ki.showProgress(s);try{if(void 0===i.log&&(i.log=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,range:i.range,ref:o.sha}),void 0===i.log))return jt.showFileNotUnderSourceControlWarningMessage("Unable to show file history");if(r.token.isCancellationRequested)return;let e=void 0;if(i.log.truncated){const s=new si({label:"$(arrow-right) Show Next Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${i.log.maxCount} newer commits`},Bt.ShowQuickFileHistory,[o,Object.assign({},i,{log:void 0})]),r=M.last(i.log.commits.values());null!=r&&(e=new si({label:"$(arrow-left) Show Previous Commits",description:`${Q.pad(ne.Dash,2,3)} shows ${i.log.maxCount} older commits`},Bt.ShowQuickFileHistory,[new Fe(t,r),Object.assign({},i,{log:void 0,nextPageCommand:s})]))}const n=yield ki.show(this.git,i.log,o,s,{progressCancellation:r,goBackCommand:i.goBackCommand,nextPageCommand:i.nextPageCommand,previousPageCommand:e,showAllCommand:void 0!==i.log&&i.log.truncated?new si({label:"$(sync) Show All Commits",description:`${Q.pad(ne.Dash,2,3)} this may take a while`},Bt.ShowQuickFileHistory,[t,Object.assign({},i,{log:void 0,maxCount:0})]):void 0,showInResultsExplorerCommand:void 0!==i.log?new di(i.log,{label:s,resultsType:{singular:"commit",plural:"commits"}}):void 0});if(void 0===n)return;if(n instanceof si)return n.execute();const a=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to history of ${ne.Space}$(file-text) ${xe.basename(n.commit.fileName)}${o.sha?` from ${ne.Space}$(git-commit) ${o.shortSha}`:""}`},Bt.ShowQuickFileHistory,[t,i]);return q.commands.executeCommand(Bt.ShowQuickCommitFileDetails,n.commit.toGitUri(),{commit:n.commit,fileLog:i.log,sha:n.commit.sha,goBackCommand:a})}catch(e){return we.error(e,"ShowQuickFileHistoryCommand"),q.window.showErrorMessage("Unable to show file history. See output channel for more details")}finally{r.dispose()}})}}class vo extends Ot{constructor(e){super(Bt.ShowQuickRepoStatus),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);try{const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to show repository status");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return q.window.showWarningMessage("Unable to show repository status");const s=yield Bi.show(o,i.goBackCommand);if(void 0===s)return;if(s instanceof si)return s.execute();return}catch(e){return we.error(e,"ShowQuickRepoStatusCommand"),q.window.showErrorMessage("Unable to show repository status. See output channel for more details")}})}}class wo extends Ot{constructor(e){super(Bt.ShowQuickStashList),this.git=e}execute(e,t,i={}){return P.__awaiter(this,void 0,void 0,function*(){t=w(t,e);const o=Ui.showProgress("list");try{const e=yield this.git.getRepoPath(t);if(!e)return jt.showNoRepositoryWarningMessage("Unable to show stashed changes");const s=yield this.git.getStashList(e);if(void 0===s)return q.window.showWarningMessage("Unable to show stashed changes");if(o.token.isCancellationRequested)return;const r=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to stashed changes`},Bt.ShowQuickStashList,[t,{goBackCommand:i.goBackCommand}]),n=yield Ui.show(this.git,s,"list",o,i.goBackCommand,r);if(void 0===n)return;return n instanceof si?n.execute():q.commands.executeCommand(Bt.ShowQuickCommitDetails,n.commit.toGitUri(),{commit:n.commit,sha:n.commit.sha,goBackCommand:r})}catch(e){return we.error(e,"ShowQuickStashListCommand"),q.window.showErrorMessage("Unable to show stashed changes. See output channel for more details")}finally{o.dispose()}})}}class Co extends Ut{constructor(e){super(Bt.StashApply),this.git=e}preExecute(e,t={confirm:!0,deleteAfter:!1}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0,deleteAfter:!1}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===(e=Object.assign({},e)).stashItem||void 0===e.stashItem.stashName){let t,i=yield this.git.getActiveRepoPath();if(!i){const o=yield Ti.show(this.git,`Apply stashed changes from which repository${ne.Ellipsis}`,e.goBackCommand);if(o instanceof si)return o.execute();if(void 0===o)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to pick another repository`},Bt.StashApply,[e]),i=o.repoPath}const o=Ui.showProgress("apply");try{const s=yield this.git.getStashList(i);if(void 0===s)return q.window.showInformationMessage("There are no stashed changes");if(o.token.isCancellationRequested)return;const r=new si({label:`go back ${ne.ArrowBack}`,description:`${Q.pad(ne.Dash,2,3)} to apply stashed changes`},Bt.StashApply,[e]),n=yield Ui.show(this.git,s,"apply",o,t||e.goBackCommand,r);if(n instanceof si)return n.execute();if(void 0===n)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.goBackCommand=r,e.stashItem=n.commit}finally{o.dispose()}}try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${ne.Ellipsis}`:e.stashItem.message,i=yield q.window.showWarningMessage(`Apply stashed changes '${t}' to your working tree?`,{title:"Yes, delete after applying"},{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"No"===i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.deleteAfter="Yes"!==i.title}return yield this.git.stashApply(e.stashItem.repoPath,e.stashItem.stashName,e.deleteAfter)}catch(e){return we.error(e,"StashApplyCommand"),e.message.includes("Your local changes to the following files would be overwritten by merge")?q.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten."):e.message.includes("Auto-merging")&&e.message.includes("CONFLICT")?q.window.showInformationMessage("Stash applied with conflicts"):q.window.showErrorMessage("Unable to apply stash. See output channel for more details")}})}}class bo extends Ut{constructor(e){super(Bt.StashDelete),this.git=e}preExecute(e,t={confirm:!0}){return P.__awaiter(this,void 0,void 0,function*(){return b(e)?(t=Object.assign({},t),t.stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==(e=Object.assign({},e)).stashItem&&void 0!==e.stashItem.stashName&&void 0!==e.stashItem.repoPath){void 0===e.confirm&&(e.confirm=!0);try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${ne.Ellipsis}`:e.stashItem.message,i=yield q.window.showWarningMessage(`Delete stashed changes '${t}'?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"Yes"!==i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute()}return yield this.git.stashDelete(e.stashItem.repoPath,e.stashItem.stashName)}catch(e){return we.error(e,"StashDeleteCommand"),q.window.showErrorMessage("Unable to delete stash. See output channel for more details")}}})}}class yo extends Ut{constructor(e){super(Bt.StashSave),this.git=e}preExecute(e,t={}){return P.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?(t=Object.assign({},t),t.uris=e.scmResourceStates.map(e=>e.resourceUri),this.execute(t)):"scm-groups"===e.type?(t=Object.assign({},t),t.uris=e.scmResourceGroups.reduce((e,t)=>e.concat(t.resourceStates.map(e=>e.resourceUri)),[]),this.execute(t)):this.execute(t)})}execute(e={}){return P.__awaiter(this,void 0,void 0,function*(){let t=yield this.git.getHighlanderRepoPath();if(!t){const i=yield Ti.show(this.git,`Stash changes for which repository${ne.Ellipsis}`,e.goBackCommand);if(i instanceof si)return i.execute();if(void 0===i)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=i.repoPath}try{return null==e.message&&(e=Object.assign({},e),e.message=yield q.window.showInputBox({prompt:"Please provide a stash message",placeHolder:"Stash message"}),void 0===e.message)?void 0===e.goBackCommand?void 0:e.goBackCommand.execute():yield this.git.stashSave(t,e.message,e.uris)}catch(e){return we.error(e,"StashSaveCommand"),q.window.showErrorMessage("Unable to save stash. See output channel for more details")}})}}class _o extends Wt{constructor(e){super(Bt.ToggleCodeLens),this.codeLensController=e}execute(e,t){return this.codeLensController.toggleCodeLens(e)}}class xo extends Wt{constructor(e){super(Bt.ToggleFileBlame),this.annotationController=e}execute(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty){if(void 0!==i&&!Z.equals(i,e.document.uri)){const t=q.window.visibleTextEditors.find(e=>Z.equals(i,e.document.uri));void 0===t||t.document.isDirty||(e=t)}try{return void 0===o.type&&(o=Object.assign({},o,{type:ds.get(ds.name("blame")("file")("annotationType").value)})),this.annotationController.toggleAnnotations(e,o.type,void 0!==o.sha?o.sha:e.selection.active.line)}catch(e){return we.error(e,"ToggleFileBlameCommand"),q.window.showErrorMessage("Unable to toggle file blame annotations. See output channel for more details")}}})}}class So extends Wt{constructor(e){super(Bt.ToggleFileHeatmap),this.annotationController=e}execute(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty){if(void 0!==i&&!Z.equals(i,e.document.uri)){const t=q.window.visibleTextEditors.find(e=>Z.equals(i,e.document.uri));void 0===t||t.document.isDirty||(e=t)}try{return this.annotationController.toggleAnnotations(e,ys.Heatmap)}catch(e){return we.error(e,"ToggleFileHeatmapCommand"),q.window.showErrorMessage("Unable to toggle heatmap annotations. See output channel for more details")}}})}}class $o extends Wt{constructor(e){super(Bt.ToggleFileRecentChanges),this.annotationController=e}execute(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty){if(void 0!==i&&!Z.equals(i,e.document.uri)){const t=q.window.visibleTextEditors.find(e=>Z.equals(i,e.document.uri));void 0===t||t.document.isDirty||(e=t)}try{return this.annotationController.toggleAnnotations(e,ys.RecentChanges)}catch(e){return we.error(e,"ToggleFileRecentChangesCommand"),q.window.showErrorMessage("Unable to toggle recent file changes annotations. See output channel for more details")}}})}}class Do extends Wt{constructor(e){super(Bt.ToggleLineBlame),this.currentLineController=e}execute(e,t,i,o={}){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===o.type&&(o=Object.assign({},o,{type:ds.get(ds.name("blame")("line")("annotationType").value)})),this.currentLineController.toggleAnnotations(e,o.type)}catch(e){return we.error(e,"ToggleLineBlameCommand"),q.window.showErrorMessage("Unable to toggle line blame annotations. See output channel for more details")}})}}var Fo;!function(e){e[e.CommitLabel=1]="CommitLabel",e[e.FileLabel=2]="FileLabel",e[e.CommitIcon=4]="CommitIcon",e[e.StatusIcon=8]="StatusIcon",e[e.Gravatar=16]="Gravatar",e[e.File=10]="File"}(Fo||(Fo={}));class Po extends kt{constructor(e,t,i,o){super(Fe.fromFileStatus(e,t.repoPath,t.sha)),this.status=e,this.commit=t,this.explorer=i,this.displayAs=o,this.priority=!1,this.repoPath=t.repoPath}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return[]})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){if(!this.commit.isFile){const e=this.commit.toFileCommit(this.status);if(void 0===e){const e=yield this.explorer.git.getLogForFile(this.repoPath,this.status.fileName,{maxCount:2,ref:this.commit.sha});void 0!==e&&(this.commit=e.commits.get(this.commit.sha)||this.commit)}else this.commit=e}const e=new q.TreeItem(this.label,q.TreeItemCollapsibleState.None);if(e.contextValue=this.resourceType,(this.displayAs&Fo.CommitIcon)===Fo.CommitIcon)e.iconPath={dark:this.explorer.context.asAbsolutePath(xe.join("images","dark","icon-commit.svg")),light:this.explorer.context.asAbsolutePath(xe.join("images","light","icon-commit.svg"))};else if((this.displayAs&Fo.StatusIcon)===Fo.StatusIcon){const t=g(this.status.status);e.iconPath={dark:this.explorer.context.asAbsolutePath(xe.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(xe.join("images","light",t))}}else(this.displayAs&Fo.Gravatar)===Fo.Gravatar&&(e.iconPath=this.commit.getGravatarUri(this.explorer.config.gravatarsDefault||ns.Robot));return e.command=this.getCommand(),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=xe.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=this.displayAs&Fo.CommitLabel?vt.fromTemplate(this.getCommitTemplate(),this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}):wt.fromTemplate(this.getCommitFileTemplate(),this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get resourceType(){return Pt.CommitFile}getCommitTemplate(){return this.explorer.config.commitFormat}getCommitFileTemplate(){return this.explorer.config.commitFileFormat}getCommand(){return{title:"Compare File with Previous Revision",command:Bt.DiffWithPrevious,arguments:[Fe.fromFileStatus(this.status,this.commit.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class ko extends kt{constructor(e,t,i,o,s){super(Fe.fromRepoPath(e)),this.repoPath=e,this.folderName=t,this.relativePath=i,this.root=o,this.explorer=s,this.priority=!0}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if(ko.getFileNesting(this.explorer.config,this.root.descendants,void 0===this.relativePath)!==rs.List){e=[];for(const t of F.values(this.root.children))void 0!==t.value?(t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new ko(this.repoPath,t.name,t.relativePath,t,this.explorer))}else this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;return e.sort((e,t)=>(e instanceof ko?-1:1)-(t instanceof ko?-1:1)||(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label)),e})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=new q.TreeItem(this.label,q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Folder,e})}get label(){return this.folderName}static getFileNesting(e,t,i){const o=e.files.layout||rs.Auto;if(o===rs.Auto){if(i||e.files.compact){const i=e.files.threshold||5;if(t.length<=i)return rs.List}return rs.Tree}return o}}class Ro extends Rt{constructor(e,t,i){super(e.toGitUri()),this.commit=e,this.explorer=t,this.branch=i}get ref(){return this.commit.sha}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=this.repoPath,t=yield this.explorer.git.getLogForRepo(e,{maxCount:1,ref:this.commit.sha});if(void 0===t)return[];const i=M.first(t.commits.values());if(void 0===i)return[];let o=[...M.map(i.fileStatuses,e=>new Po(e,i.toFileCommit(e),this.explorer,Fo.File))];if(this.explorer.config.files.layout!==rs.List){const t=k.makeHierarchical(o,e=>e.uri.getRelativePath().split("/"),(...e)=>Dt.normalizePath(xe.join(...e)),this.explorer.config.files.compact);o=yield new ko(e,"",void 0,t,this.explorer).getChildren()}else o.sort((e,t)=>e.label.localeCompare(t.label));return o})}getTreeItem(){const e=new q.TreeItem(vt.fromTemplate(this.explorer.config.commitFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}),q.TreeItemCollapsibleState.Collapsed);return e.contextValue=void 0===this.branch||this.branch.current?Pt.CommitOnCurrentBranch:Pt.Commit,this.explorer.config.gravatars?e.iconPath=this.commit.getGravatarUri(this.explorer.config.gravatarsDefault||ns.Robot):e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-commit.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-commit.svg")},e}getCommand(){return{title:"Compare File with Previous Revision",command:Bt.DiffWithPrevious,arguments:[this.uri,{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class To extends Rt{constructor(e,t,i){super(t),this.branch=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.branch.name}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:this.maxCount,ref:this.branch.name});if(void 0===e)return[new Tt("No commits yet")];const t=[...M.map(e.commits.values(),e=>new Ro(e,this.explorer,this.branch))];return e.truncated&&t.push(new Nt("Show All Commits",this,this.explorer)),t})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){let e=this.branch.getName();!this.branch.remote&&void 0!==this.branch.tracking&&this.explorer.config.showTrackingBranch&&(e+=` ${ne.Space}${ne.ArrowLeftRight}${ne.Space} ${this.branch.tracking}`);const t=new q.TreeItem(`${this.branch.current?`${ne.Check} ${ne.Space}`:""}${e}`,q.TreeItemCollapsibleState.Collapsed);this.branch.remote?t.contextValue=Pt.RemoteBranch:this.branch.current?t.contextValue=this.branch.tracking?Pt.CurrentBranchWithTracking:Pt.CurrentBranch:t.contextValue=this.branch.tracking?Pt.BranchWithTracking:Pt.Branch;let i="";return this.branch.tracking&&(this.branch.state.ahead&&this.branch.state.behind?i="-yellow":this.branch.state.ahead?i="-green":this.branch.state.behind&&(i="-red")),t.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-branch${i}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-branch${i}.svg`)},t})}}class Eo extends kt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.name.localeCompare(t.name)),[...M.filterMap(e,e=>e.remote?void 0:new To(e,this.uri,this.explorer))])})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=new q.TreeItem("Branches",this.active?q.TreeItemCollapsibleState.Expanded:q.TreeItemCollapsibleState.Collapsed),t=yield this.repo.getRemotes();return e.contextValue=void 0!==t&&t.length>0?Pt.BranchesWithRemotes:Pt.Branches,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-branch.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-branch.svg")},e})}}class No extends kt{constructor(e,t,i,o){super(t),this.remote=e,this.repo=i,this.explorer=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...M.filterMap(e,e=>e.remote&&e.name.startsWith(this.remote.name)?new To(e,this.uri,this.explorer):void 0)])})}getTreeItem(){const e=this.remote.types.find(e=>e.type===Oe.Fetch),t=this.remote.types.find(e=>e.type===Oe.Push);let i;i=e&&t?ne.ArrowLeftRight:e?ne.ArrowLeft:t?ne.ArrowRight:ne.Dash;const o=`${this.remote.name} ${ne.Space}${i}${ne.Space} ${void 0!==this.remote.provider?this.remote.provider.name:this.remote.domain} ${ne.Space}${ne.Dot}${ne.Space} ${this.remote.path}`,s=new q.TreeItem(o,q.TreeItemCollapsibleState.Collapsed);return s.contextValue=Pt.Remote,s}}class Bo extends kt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getRemotes();return void 0===e||0===e.length?[new Tt("No remotes configured")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...M.map(e,e=>new No(e,this.uri,this.repo,this.explorer))])})}getTreeItem(){const e=new q.TreeItem("Remotes",q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Remotes,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-remote.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-remote.svg")},e}}class Uo extends kt{constructor(e,t,i,o){super(Fe.fromFileStatus(t,e,"HEAD")),this.repoPath=e,this.status=t,this.commits=i,this.explorer=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return this.commits.map(e=>new Po(this.status,e,this.explorer,Fo.CommitLabel|(this.explorer.config.gravatars?Fo.Gravatar:Fo.CommitIcon)))})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=new q.TreeItem(this.label,q.TreeItemCollapsibleState.Collapsed);e.contextValue=Pt.StatusFileCommits;const t=g(this.status.status);return e.iconPath={dark:this.explorer.context.asAbsolutePath(xe.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(xe.join("images","light",t))},1===this.commits.length&&this.commits[0].isUncommitted&&(e.collapsibleState=q.TreeItemCollapsibleState.None,e.contextValue=Pt.StatusFile,e.command=this.getCommand()),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=xe.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=wt.fromTemplate(this.explorer.config.statusFileFormat,Object.assign({},this.status,{commit:this.commit}),{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this.commit.isUncommitted}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}getCommand(){return{title:"Compare File with Previous Revision",command:Bt.DiffWithPrevious,arguments:[Fe.fromFileStatus(this.status,this.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class Lo extends kt{constructor(e,t,i){super(Fe.fromRepoPath(e.repoPath)),this.status=e,this.range=t,this.explorer=i,this.supportsPaging=!0,this.repoPath=e.repoPath}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){let e=[];const t=this.repoPath;let i;void 0!==this.range&&void 0!==(i=yield this.explorer.git.getLogForRepo(t,{maxCount:this.maxCount,ref:this.range}))&&(e=Array.from(M.flatMap(i.commits.values(),e=>e.fileStatuses.map(t=>Object.assign({},t,{commit:e}))))),0!==this.status.files.length&&this.includeWorkingTree&&e.splice(0,0,...M.flatMap(this.status.files,e=>{if(void 0!==e.workTreeStatus&&void 0!==e.indexStatus){const i=new Date;return i.setMilliseconds(i.getMilliseconds()-1),[Object.assign({},e,{status:e.status,commit:new Ae(Pe.File,t,Dt.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,Dt.stagedUncommittedSha,e.fileName)}),Object.assign({},e,{status:e.status,commit:new Ae(Pe.File,t,Dt.stagedUncommittedSha,"You",void 0,i,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]}return void 0!==e.indexStatus?[Object.assign({},e,{status:e.status,commit:new Ae(Pe.File,t,Dt.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]:[Object.assign({},e,{status:e.status,commit:new Ae(Pe.File,t,Dt.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]})),e.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());const o=k.groupBy(e,e=>e.fileName);let s=[...M.map(F.values(o),e=>new Uo(t,e[e.length-1],e.map(e=>e.commit),this.explorer))];if(this.explorer.config.files.layout!==rs.List){const e=k.makeHierarchical(s,e=>e.uri.getRelativePath().split("/"),(...e)=>Dt.normalizePath(xe.join(...e)),this.explorer.config.files.compact);s=yield new ko(t,"",void 0,e,this.explorer).getChildren()}else s.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return void 0!==i&&i.truncated&&s.push(new Nt("Show All Changes",this,this.explorer)),s})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){let e=void 0!==this.status.files&&this.includeWorkingTree?this.status.files.length:0;if(void 0!==this.status.upstream){const t=yield this.explorer.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);void 0!==t&&(e+=t.files)}const t=`${e} file${e>1?"s":""} changed`,i=new q.TreeItem(t,q.TreeItemCollapsibleState.Collapsed);return i.contextValue=Pt.StatusFiles,i.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-diff.svg")},i})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}}class Ao extends kt{constructor(e,t,i){super(Fe.fromRepoPath(e.repoPath)),this.status=e,this.direction=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.upstream}..${this.status.branch}`:`${this.status.branch}..${this.status.upstream}`;let t=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:0,ref:e});if(void 0===t)return[];if("ahead"!==this.direction)return[...M.map(t.commits.values(),e=>new Ro(e,this.explorer))];const i=Array.from(t.commits.values()),o=i[i.length-1];return void 0===o.previousSha&&void 0!==(t=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:2,ref:o.sha}))&&(i[i.length-1]=M.first(t.commits.values())),[...M.map(i,e=>new Ro(e,this.explorer))]})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.state.ahead} commit${this.status.state.ahead>1?"s":""} (ahead of ${this.status.upstream})`:`${this.status.state.behind} commit${this.status.state.behind>1?"s":""} (behind ${this.status.upstream})`,t=new q.TreeItem(e,q.TreeItemCollapsibleState.Collapsed);return t.contextValue=Pt.StatusUpstream,t.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-${"ahead"===this.direction?"upload":"download"}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-${"ahead"===this.direction?"upload":"download"}.svg`)},t})}}class Oo extends kt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){this.resetChildren(),this.children=[];const e=yield this.repo.getStatus();if(void 0===e)return this.children;if(e.state.behind&&this.children.push(new Ao(e,"behind",this.explorer)),e.state.ahead&&this.children.push(new Ao(e,"ahead",this.explorer)),e.state.ahead||0!==e.files.length&&this.includeWorkingTree){const t=e.upstream?`${e.upstream}..${e.branch}`:void 0;this.children.push(new Lo(e,t,this.explorer))}return this.children})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0);const e=yield this.repo.getStatus();if(void 0===e)return new q.TreeItem("No repo status");this.explorer.autoRefresh&&this.includeWorkingTree&&(this.disposable=q.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),{dispose:()=>this.repo.stopWatchingFileSystem()}),this.repo.startWatchingFileSystem());let t=!1;const i=0!==e.files.length&&this.includeWorkingTree;let o="",s="";e.upstream?e.state.ahead||e.state.behind?(o=`${e.branch}${i?" has uncommitted changes and":""} is not up-to-date with ${e.upstream}`,t=!0,e.state.ahead&&e.state.behind?s="-yellow":e.state.ahead?s="-green":e.state.behind&&(s="-red")):o=`${e.branch}${i?" has uncommitted changes and":""} is up-to-date with ${e.upstream}`:o=`${e.branch} ${i?"has uncommitted changes":this.includeWorkingTree?"has no changes":"has nothing to commit"}`;let r;r=t||i?this.active?q.TreeItemCollapsibleState.Expanded:q.TreeItemCollapsibleState.Collapsed:q.TreeItemCollapsibleState.None;const n=new q.TreeItem(o,r);return n.contextValue=Pt.Status,n.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-repo${s}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-repo${s}.svg`)},n})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}onAutoRefreshChanged(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onFileSystemChanged(e){return P.__awaiter(this,void 0,void 0,function*(){this.explorer.refreshNode(this)})}}class Wo extends Po{constructor(e,t,i){super(e,t,i,Fo.File)}get resourceType(){return Pt.StashFile}getCommitTemplate(){return this.explorer.config.stashFormat}getCommitFileTemplate(){return this.explorer.config.stashFileFormat}}class Mo extends Rt{constructor(e,t){super(e.toGitUri()),this.commit=e,this.explorer=t}get ref(){return this.commit.sha}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=this.commit.fileStatuses,t=yield this.explorer.git.getLogForRepo(this.commit.repoPath,{maxCount:1,ref:`${this.commit.stashName}^3`});if(void 0!==t){const i=M.first(t.commits.values());void 0!==i&&0!==i.fileStatuses.length&&(i.fileStatuses.forEach(e=>e.status="?"),e.splice(e.length,0,...i.fileStatuses))}const i=e.map(e=>new Wo(e,this.commit.toFileCommit(e),this.explorer));return i.sort((e,t)=>e.label.localeCompare(t.label)),i})}getTreeItem(){const e=new q.TreeItem(vt.fromTemplate(this.explorer.config.stashFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}),q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Stash,e}}class Io extends kt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getStashList();return void 0===e?[new Tt("No stashed changes")]:[...M.map(e.commits.values(),e=>new Mo(e,this.explorer))]})}getTreeItem(){const e=new q.TreeItem("Stashes",q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Stashes,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-stash.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-stash.svg")},e}}class Ho extends Rt{constructor(e,t,i){super(t),this.tag=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.tag.name}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:this.maxCount,ref:this.tag.name});if(void 0===e)return[new Tt("No commits yet")];const t=[...M.map(e.commits.values(),e=>new Ro(e,this.explorer))];return e.truncated&&t.push(new Nt("Show All Commits",this,this.explorer)),t})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=new q.TreeItem(this.tag.name,q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Tag,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-tag.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}class jo extends kt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getTags();return 0===e.length?[new Tt("No tags yet")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...e.map(e=>new Ho(e,this.uri,this.explorer))])})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=new q.TreeItem("Tags",q.TreeItemCollapsibleState.Collapsed);return e.contextValue=Pt.Tags,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-tag.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}class Go extends kt{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.updateSubscription(),this.children=[new Oo(this.uri,this.repo,this.explorer,this.active),new Eo(this.uri,this.repo,this.explorer,this.active),new Bo(this.uri,this.repo,this.explorer),new Io(this.uri,this.repo,this.explorer),new jo(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){this.updateSubscription();const e=this.active?`Active Repository ${Q.pad(ne.Dash,1,1)} ${this.repo.formattedName||this.uri.repoPath}`:`${this.repo.formattedName||this.uri.repoPath}`,t=new q.TreeItem(e,this.active?q.TreeItemCollapsibleState.Expanded:q.TreeItemCollapsibleState.Collapsed);return t.contextValue=Pt.Repository,t}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||q.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onRepoChanged(e){if(we.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),void 0===this.children||e.changed(Me.Repository)||e.changed(Me.Config))this.explorer.refreshNode(this);else{if(e.changed(Me.Stashes)){const e=this.children.find(e=>e instanceof Io);void 0!==e&&this.explorer.refreshNode(e)}if(e.changed(Me.Remotes)){const e=this.children.find(e=>e instanceof Bo);void 0!==e&&this.explorer.refreshNode(e)}}}}class Qo extends kt{constructor(e){super(void 0),this.explorer=e,e.context.subscriptions.push(q.window.onDidChangeActiveTextEditor(W.debounce(this.onActiveEditorChanged,500),this)),this.onActiveEditorChanged(q.window.activeTextEditor)}dispose(){super.dispose(),void 0!==this._repositoryNode&&(this._repositoryNode.dispose(),this._repositoryNode=void 0)}onActiveEditorChanged(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!s(e))return;let t=!1;try{const i=yield this.explorer.git.getActiveRepoPath(e);if(void 0===i)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));if(void 0!==this._repositoryNode&&this._repositoryNode.repo.path===i)return;const o=yield this.explorer.git.getRepository(i);if(void 0===o)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));t=!0,void 0!==this._repositoryNode&&this._repositoryNode.dispose(),this._repositoryNode=new Go(Fe.fromRepoPath(o.path),o,this.explorer,!0)}finally{t&&this.explorer.refreshNode(this)}})}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoryNode?this._repositoryNode.getChildren():[]})}getTreeItem(){return void 0!==this._repositoryNode?this._repositoryNode.getTreeItem():new q.TreeItem("No active repository",q.TreeItemCollapsibleState.None)}}class Vo extends kt{constructor(e,t,i,o,s=Pt.Results){super(Fe.fromRepoPath(e)),this.repoPath=e,this.labelFn=t,this.logFn=i,this.explorer=o,this.contextValue=s,this.supportsPaging=!0}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog();if(void 0===e)return[];const t=[...M.map(e.commits.values(),e=>new Ro(e,this.explorer))];return e.truncated&&t.push(new Nt("Show All Results",this,this.explorer)),t})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog(),t=new q.TreeItem(yield this.getLabel(),e&&e.count>0?q.TreeItemCollapsibleState.Expanded:q.TreeItemCollapsibleState.None);return t.contextValue=this.contextValue,t})}refresh(){this._cache=void 0}ensureCache(){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.logFn(this.maxCount);this._cache={label:this.labelFn(e),log:e}}return this._cache})}getLabel(){return P.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getLog(){return P.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).log})}}class Ko extends kt{constructor(e,t,i,o,s){super(Fe.fromFileStatus(t,e)),this.repoPath=e,this.status=t,this.ref1=i,this.ref2=o,this.explorer=s}getChildren(){return[]}getTreeItem(){const e=new q.TreeItem(this.label,q.TreeItemCollapsibleState.None);e.contextValue=Pt.StatusFile;const t=g(this.status.status);return e.iconPath={dark:this.explorer.context.asAbsolutePath(xe.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(xe.join("images","light",t))},e.command=this.getCommand(),e}get folderName(){return void 0===this._folderName&&(this._folderName=xe.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=wt.fromTemplate(this.explorer.config.statusFileFormat,this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get priority(){return!1}getCommand(){return{title:"Open Changes",command:Bt.DiffWith,arguments:[this.uri,{lhs:{sha:this.ref1,uri:this.uri},rhs:{sha:this.ref2,uri:this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}class qo extends kt{constructor(e,t,i,o,s,r){super(Fe.fromRepoPath(e)),this.repoPath=e,this.ref1=t,this.ref2=i,this.labelFn=o,this.diffFn=s,this.explorer=r,this.supportsPaging=!0}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff();if(void 0===e)return[];let t=[...M.map(e,e=>new Ko(this.repoPath,e,this.ref1,this.ref2,this.explorer))];if(this.explorer.config.files.layout!==rs.List){const e=k.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>Dt.normalizePath(xe.join(...e)),this.explorer.config.files.compact);t=yield new ko(this.repoPath,"",void 0,e,this.explorer).getChildren()}else t.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return t})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff(),t=new q.TreeItem(yield this.getLabel(),e&&e.length>0?q.TreeItemCollapsibleState.Expanded:q.TreeItemCollapsibleState.None);return t.contextValue=Pt.Results,t})}refresh(){this._cache=void 0}ensureCache(){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.diffFn();this._cache={label:this.labelFn(e),diff:e}}return this._cache})}getLabel(){return P.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getDiff(){return P.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).diff})}}class zo extends kt{constructor(e,t,i,o){super(Fe.fromRepoPath(e)),this.ref1=t,this.ref2=i,this.explorer=o}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){this.resetChildren();return this.children=[new Vo(this.uri.repoPath,e=>{const t=void 0!==e?e.count:0,i=void 0!==e&&e.truncated;return 1===t?"1 commit":`${0===t?"No":`${t}${i?"+":""}`} commits`},e=>this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:e,ref:`${this.ref1}...${this.ref2}`}),this.explorer),new qo(this.uri.repoPath,this.ref1,this.ref2,e=>{const t=void 0!==e?e.length:0;return 1===t?"1 file changed":`${0===t?"No":t} files changed`},()=>this.explorer.git.getDiffStatus(this.uri.repoPath,this.ref1,this.ref2),this.explorer)],this.children})}getTreeItem(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getRepository(this.uri.repoPath),t=new q.TreeItem(`Comparing ${Dt.shortenSha(this.ref1)} to ${Dt.shortenSha(this.ref2||"HEAD")} ${Q.pad(ne.Dash,1,1)} ${e&&e.formattedName||this.uri.repoPath}`,q.TreeItemCollapsibleState.Expanded);return t.contextValue=Pt.ComparisonResults,t})}}class Yo extends kt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){this.updateSubscription();const e=[],t=Fo.CommitLabel|(this.explorer.config.gravatars?Fo.Gravatar:Fo.StatusIcon),i=yield this.explorer.git.getStatusForFile(this.uri.repoPath,this.uri.fsPath);if(void 0!==i&&(void 0!==i.indexStatus||void 0!==i.workTreeStatus)){let o,s;void 0!==i.workTreeStatus?(o=Dt.uncommittedSha,void 0!==i.indexStatus?s=Dt.stagedUncommittedSha:"?"!==i.workTreeStatus&&(s="HEAD")):(o=Dt.stagedUncommittedSha,s="HEAD");const r=new Ae(Pe.File,this.uri.repoPath,o,"You",void 0,new Date,"",i.fileName,[i],i.status,i.originalFileName,s,i.originalFileName||i.fileName);e.push(new Po(i,r,this.explorer,t))}const o=yield this.explorer.git.getLogForFile(this.uri.repoPath,this.uri.fsPath,{ref:this.uri.sha});return void 0!==o&&e.push(...M.map(o.commits.values(),e=>new Po(e.fileStatuses[0],e,this.explorer,t))),0===e.length?[new Tt("No file history")]:e})}getTreeItem(){this.updateSubscription();const e=new q.TreeItem(`${this.uri.getFormattedPath()}`,q.TreeItemCollapsibleState.Expanded);return e.contextValue=Pt.FileHistory,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-history.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-history.svg")},e}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||q.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this),this.explorer.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onBlameabilityChanged(e){e.blameable&&e.reason===Ct.DocumentChanged&&this.explorer.refreshNode(this)}onRepoChanged(e){e.changed(Me.Stashes,!0)||(we.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),this.explorer.refreshNode(this))}}class Xo extends kt{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=[new Yo(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){const e=new q.TreeItem(`${this.uri.getFormattedPath()}`,q.TreeItemCollapsibleState.Expanded);return e.contextValue=Pt.History,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-history.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-history.svg")},e}}class Zo extends kt{constructor(e,t){super(void 0),this.repositories=e,this.explorer=t}getChildren(){return P.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=this.repositories.sort((e,t)=>e.index-t.index).map(e=>new Go(Fe.fromRepoPath(e.path),e,this.explorer)),this.children.length>1&&this.children.splice(0,0,new Qo(this.explorer)),this.children})}getTreeItem(){const e=new q.TreeItem("Repositories",q.TreeItemCollapsibleState.Expanded);return e.contextValue=Pt.Repositories,e}}var Jo;!function(e){e.Auto="auto",e.History="history",e.Repository="repository"}(Jo||(Jo={}));class es{constructor(e,t,i,o){this.context=e,this.explorerCommands=t,this.git=i,this.gitContextTracker=o,this._onDidChangeAutoRefresh=new q.EventEmitter,this._onDidChangeTreeData=new q.EventEmitter,q.commands.registerCommand("gitlens.gitExplorer.refresh",this.refresh,this),q.commands.registerCommand("gitlens.gitExplorer.refreshNode",this.refreshNode,this),q.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(rs.Auto),this),q.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToList",()=>this.setFilesLayout(rs.List),this),q.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(rs.Tree),this),q.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOn",()=>this.setAutoRefresh(ds.get(ds.name("gitExplorer")("autoRefresh").value),!0),this),q.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOff",()=>this.setAutoRefresh(ds.get(ds.name("gitExplorer")("autoRefresh").value),!1),this),q.commands.registerCommand("gitlens.gitExplorer.switchToHistoryView",()=>this.switchTo(Jo.History),this),q.commands.registerCommand("gitlens.gitExplorer.switchToRepositoryView",()=>this.switchTo(Jo.Repository),this),e.subscriptions.push(q.window.onDidChangeActiveTextEditor(W.debounce(this.onActiveEditorChanged,500),this),q.window.onDidChangeVisibleTextEditors(W.debounce(this.onVisibleEditorsChanged,500),this),ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}onActiveEditorChanged(e){return P.__awaiter(this,void 0,void 0,function*(){if(this._view!==Jo.History)return;const t=yield this.getRootNode(e);this.setRoot(t)&&this.refresh(Ft.ActiveEditorChanged,t)})}onConfigurationChanged(e){return P.__awaiter(this,void 0,void 0,function*(){const t=ds.initializing(e),i=ds.name("gitExplorer");if(!t&&!ds.changed(e,i.value))return;const s=ds.get(i.value);t||!ds.changed(e,i("gravatars").value)&&!ds.changed(e,i("gravatarsDefault").value)||u(),(t||ds.changed(e,i("autoRefresh").value))&&this.setAutoRefresh(s.autoRefresh);let r=s.view;r===Jo.Auto&&(r=this.context.workspaceState.get(he.GitExplorerView,Jo.Repository)),t?(this._view=r,o(se.GitExplorerView,this._view),this.setRoot(yield this.getRootNode(q.window.activeTextEditor))):this.reset(r),this._config=s})}onGitChanged(e){this._view===Jo.Repository&&e.reason===$t.Repositories&&(this.clearRoot(),we.log(`GitExplorer[view=${this._view}].onGitChanged(${e.reason})`),this.refresh(Ft.RepoChanged))}onVisibleEditorsChanged(e){void 0!==this._root&&this._view===Jo.History&&(0!==e.length&&e.some(e=>e.document&&this.git.isTrackable(e.document.uri))||(this.clearRoot(),this.refresh(Ft.VisibleEditorsChanged)))}get autoRefresh(){return ds.get(ds.name("gitExplorer")("autoRefresh").value)&&this.context.workspaceState.get(he.GitExplorerAutoRefresh,!0)}get config(){return this._config}getChildren(e){return P.__awaiter(this,void 0,void 0,function*(){return void 0!==this._loading&&(yield this._loading,this._loading=void 0),void 0===this._root?this._view===Jo.History?[new Tt(`No active file ${ne.Dash} no history to show`)]:[new Tt("No repositories found")]:void 0===e?this._root.getChildren():e.getChildren()})}getTreeItem(e){return P.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getRootNode(e){return P.__awaiter(this,void 0,void 0,function*(){switch(this._view){case Jo.History:{const t=this.getHistoryNode(e||q.window.activeTextEditor);return this._loading=t.then(e=>W.wait(0)),t}default:{const e=this.git.getRepositories();this._loading=e.then(e=>W.wait(0));const t=[...yield e];if(0===t.length)return;if(1===t.length){const e=t[0];return new Go(Fe.fromRepoPath(e.path),e,this,!0)}return new Zo(t,this)}}})}getHistoryNode(e){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e||0===q.window.visibleTextEditors.length||!q.window.visibleTextEditors.some(e=>e.document&&this.git.isTrackable(e.document.uri)))return;if(void 0===e.document||!this.git.isTrackable(e.document.uri))return this._root;const t=yield Fe.fromUri(e.document.uri,this.git),i=yield this.git.getRepository(t);return void 0!==i?Z.equals(t,this._root&&this._root.uri)?this._root:new Xo(t,i,this):void 0})}getQualifiedCommand(e){return`gitlens.gitExplorer.${e}`}refresh(e,t){return P.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=Ft.Command),we.log(`GitExplorer[view=${this._view}].refresh`,`reason='${e}'`),(void 0===this._root||void 0===t&&this._view===Jo.History)&&(this.clearRoot(),this.setRoot(yield this.getRootNode(q.window.activeTextEditor))),this._onDidChangeTreeData.fire()})}refreshNode(e,t){we.log(`GitExplorer[view=${this._view}].refreshNode`),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),this._onDidChangeTreeData.fire(e===this._root?void 0:e)}reset(e,t=!1){return P.__awaiter(this,void 0,void 0,function*(){this.setView(e),t&&void 0!==this._root&&this.clearRoot();(this.setRoot(yield this.getRootNode(q.window.activeTextEditor))||t)&&this.refresh(Ft.ViewChanged)})}clearRoot(){void 0!==this._root&&(this._root.dispose(),this._root=void 0)}setFilesLayout(e){return P.__awaiter(this,void 0,void 0,function*(){return ds.update(ds.name("gitExplorer")("files")("layout").value,e,q.ConfigurationTarget.Global)})}setRoot(e){return this._root!==e&&(void 0!==this._root&&this._root.dispose(),this._root=e,!0)}setView(e){this._view!==e&&(ds.get(ds.name("gitExplorer")("view").value)===Jo.Auto&&this.context.workspaceState.update(he.GitExplorerView,e),this._view=e,o(se.GitExplorerView,this._view),e!==Jo.Repository&&this.git.stopWatchingFileSystem())}switchTo(e){return P.__awaiter(this,void 0,void 0,function*(){this._view!==e&&this.reset(e,!0)})}setAutoRefresh(e,t){return P.__awaiter(this,void 0,void 0,function*(){void 0!==this._autoRefreshDisposable&&(this._autoRefreshDisposable.dispose(),this._autoRefreshDisposable=void 0);let i=!1;e&&(void 0===t?t=this.context.workspaceState.get(he.GitExplorerAutoRefresh,!0):(i=t,yield this.context.workspaceState.update(he.GitExplorerAutoRefresh,t),this._onDidChangeAutoRefresh.fire()),t&&(this._autoRefreshDisposable=this.git.onDidChange(this.onGitChanged,this),this.context.subscriptions.push(this._autoRefreshDisposable))),o(se.GitExplorerAutoRefresh,e&&t),i&&this.refresh(Ft.AutoRefreshChanged)})}}var ts;!function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame"}(ts||(ts={}));var is;!function(e){e.Document="document",e.Containers="containers",e.Blocks="blocks"}(is||(is={}));var os;!function(e){e.Gutter="gutter",e.Line="line",e.OverviewRuler="overviewRuler"}(os||(os={}));var ss;!function(e){e.Bitbucket="Bitbucket",e.BitbucketServer="BitbucketServer",e.Custom="Custom",e.GitHub="GitHub",e.GitLab="GitLab"}(ss||(ss={}));var rs;!function(e){e.Auto="auto",e.List="list",e.Tree="tree"}(rs||(rs={}));var ns;!function(e){e.Faces="wavatar",e.Geometric="identicon",e.Monster="monsterid",e.MysteryMan="mm",e.Retro="retro",e.Robot="robohash"}(ns||(ns={}));var as;!function(e){e.Standard="standard",e.Chorded="chorded",e.None="none"}(as||(as={}));var hs;!function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame"}(hs||(hs={}));const cs={annotations:{file:{gutter:{format:"",dateFormat:null,compact:!1,heatmap:{enabled:!1,location:"left"},hover:{details:!1,changes:!1,wholeLine:!1},separateLines:!1},hover:{details:!1,changes:!1,heatmap:{enabled:!1}},recentChanges:{hover:{details:!1,changes:!1}}},line:{hover:{details:!1,changes:!1},trailing:{format:"",dateFormat:null,hover:{details:!1,changes:!1,wholeLine:!1}}}},blame:{ignoreWhitespace:!1,file:{annotationType:"gutter",lineHighlight:{enabled:!1,locations:[]}},line:{enabled:!1,annotationType:"trailing"}},recentChanges:{file:{lineHighlight:{locations:[]}}},codeLens:{enabled:!1,recentChange:{enabled:!1,command:ts.DiffWithPrevious},authors:{enabled:!1,command:ts.DiffWithPrevious},locations:[],customLocationSymbols:[],perLanguageLocations:[],debug:!1},defaultDateFormat:null,gitExplorer:{autoRefresh:!1,enabled:!1,files:{layout:rs.Auto,compact:!1,threshold:0},commitFormat:"",commitFileFormat:"",gravatars:!1,gravatarsDefault:"robohash",includeWorkingTree:!1,showTrackingBranch:!1,stashFormat:"",stashFileFormat:"",statusFileFormat:"",view:Jo.Auto},keymap:"standard",remotes:[],resultsExplorer:{files:{layout:rs.Auto,compact:!1,threshold:0},commitFormat:"",commitFileFormat:"",gravatars:!1,gravatarsDefault:"robohash",showTrackingBranch:!1,stashFormat:"",stashFileFormat:"",statusFileFormat:""},statusBar:{enabled:!1,alignment:"left",command:hs.DiffWithPrevious,format:"",dateFormat:null},strings:{codeLens:{unsavedChanges:{recentChangeAndAuthors:"",recentChangeOnly:"",authorsOnly:""}}},debug:!1,insiders:!1,outputLevel:"verbose",advanced:{caching:{enabled:!1,maxLines:0},git:"",maxQuickHistory:0,menus:{explorerContext:{fileDiff:!1,history:!1,remote:!1},editorContext:{blame:!1,copy:!1,details:!1,fileDiff:!1,history:!1,lineDiff:!1,remote:!1},editorTitle:{blame:!1,fileDiff:!1,history:!1,status:!1},editorTitleContext:{blame:!1,fileDiff:!1,history:!1,remote:!1}},messages:{suppressCommitHasNoPreviousCommitWarning:!1,suppressCommitNotFoundWarning:!1,suppressFileNotUnderSourceControlWarning:!1,suppressGitVersionWarning:!1,suppressLineUncommittedWarning:!1,suppressNoRepositoryWarning:!1,suppressUpdateNotice:!1,suppressWelcomeNotice:!1},quickPick:{closeOnFocusOut:!1},repositorySearchDepth:0,telemetry:{enabled:!1}}};class ls{constructor(){this._onDidChange=new q.EventEmitter,this.initializingChangeEvent={affectsConfiguration:(e,t)=>!1}}static configure(e){e.subscriptions.push(q.workspace.onDidChangeConfiguration(ds.onConfigurationChanged,ds))}get onDidChange(){return this._onDidChange.event}onConfigurationChanged(e){e.affectsConfiguration(J,null)&&this._onDidChange.fire(e)}get(e,t,i){return void 0===i?q.workspace.getConfiguration(void 0===e?void 0:J,t).get(void 0===e?J:e):q.workspace.getConfiguration(void 0===e?void 0:J,t).get(void 0===e?J:e,i)}changed(e,t,i){return e.affectsConfiguration(`${J}.${t}`,i)}initializing(e){return e===this.initializingChangeEvent}inspect(e,t){return q.workspace.getConfiguration(void 0===e?void 0:J,t).inspect(void 0===e?J:e)}name(e){return W.propOf(cs,e)}update(e,t,i){return q.workspace.getConfiguration(J).update(e,t,i)}}const ds=new ls;class us extends q.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this.editor=t,this.decoration=i,this.highlightDecoration=o,this.correlationKey=us.getCorrelationKey(this.editor),this.document=this.editor.document,this._config=ds.get(),this._disposable=q.Disposable.from(q.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}static getCorrelationKey(e){return void 0!==e?e.id:""}dispose(){return P.__awaiter(this,void 0,void 0,function*(){yield this.clear(),this._disposable&&this._disposable.dispose()})}onTextEditorSelectionChanged(e){return P.__awaiter(this,void 0,void 0,function*(){if(Y.equals(this.document,e.textEditor&&e.textEditor.document))return this.selection(e.selections[0].active.line)})}get editorId(){return void 0===this.editor||void 0===this.editor.document?"":this.editor.id}get editorUri(){if(void 0!==this.editor&&void 0!==this.editor.document)return this.editor.document.uri}clear(){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==this.editor)try{void 0!==this.highlightDecoration&&this.editor.setDecorations(this.highlightDecoration,[]),void 0!==this.decoration&&this.editor.setDecorations(this.decoration,[])}catch(e){}})}reset(e,t){return P.__awaiter(this,void 0,void 0,function*(){yield this.clear(),this._config=ds.get(),this.decoration=e,this.highlightDecoration=t,yield this.provideAnnotation(void 0===this.editor?void 0:this.editor.selection.active.line)})}restore(e,t=!1){(t||!1!==this.editor._disposed)&&(this.editor=e,this.correlationKey=us.getCorrelationKey(e),this.document=e.document,void 0!==this._decorations&&this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations))}}const ms=1e6,gs=/[`\>\#\*\_\-\+\.]/g;class ps{static applyHeatmap(e,t,i){const o=this.getHeatmapColor(i,t);e.renderOptions.before.borderColor=o}static getHeatmapColor(e,t){const i=L.dateDaysFromNow(t,e);return i<=2?"#ffeca7":i<=7?"#ffdd8c":i<=14?"#ffdd7c":i<=30?"#fba447":i<=60?"#f68736":i<=90?"#f37636":i<=180?"#ca6632":i<=365?"#c0513f":i<=730?"#a2503a":"#793738"}static getHoverCommandBar(e,t,i){let o=`[\`${ne.DoubleArrowLeft}\`](${Wi.getMarkdownCommandArgs(e)} "Open Changes") `;if(void 0!==e.previousSha){i===ys.RecentChanges&&(i=ys.Gutter);const t=Fe.toRevisionUri(e.previousSha,e.previousUri.fsPath,e.repoPath),s=q.window.activeTextEditor.selection.active.line;o+=`[\`${ne.SquareWithTopShadow}\`](${eo.getMarkdownCommandArgs(t,i||ys.Gutter,s)} "Blame Previous Revision") `}return t&&(o+=`[\`${ne.ArrowUpRight}\`](${Zi.getMarkdownCommandArgs(e.sha)} "Open in Remote") `),o+=`[\`${ne.MiddleEllipsis}\`](${go.getMarkdownCommandArgs(e.sha)} "Show More Actions")`}static getHoverMessage(e,t,i,o){null===t&&(t="MMMM Do, YYYY h:MMa");let s="",r="",n="";e.isUncommitted?n=`\`${e.shortSha}\``:(r=`\n\n${this.getHoverCommandBar(e,i,o)}`,n=`[\`${e.shortSha}\`](${mo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")`,s=`\n\n> ${s=e.message.replace(gs,"\\$&").replace(/^===/gm,`${ne.ZeroWidthSpace}===`).replace(/\n/g,"  \n")}`);const a=new q.MarkdownString(`${n} &nbsp; __${e.author}__, ${e.fromNow()} &nbsp; _(${e.formatDate(t)})_ ${s}${r}`);return a.isTrusted=!0,a}static getHoverDiffMessage(e,t,i){if(void 0===i||void 0===e.previousSha)return;const o=this.getCodeDiff(i);let s;s=e.isUncommitted?void 0!==t.sha&&Dt.isStagedUncommitted(t.sha)?`[\`Changes\`](${Wi.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${ne.Dash} &nbsp; [\`${e.previousShortSha}\`](${mo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${ne.ArrowLeftRight} _${t.shortSha}_\n${o}`:`[\`Changes\`](${Wi.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${ne.Dash} &nbsp; _uncommitted_\n${o}`:`[\`Changes\`](${Wi.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${ne.Dash} &nbsp; [\`${e.previousShortSha}\`](${mo.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${ne.ArrowLeftRight} [\`${e.shortSha}\`](${mo.getMarkdownCommandArgs(e.sha)} "Show Commit Details")\n${o}`;const r=new q.MarkdownString(s);return r.isTrusted=!0,r}static getCodeDiff(e){const t=void 0===e.previous?void 0:e.previous[0];return`\`\`\`\n-  ${void 0===t||void 0===t.line?"":t.line.trim()}\n+  ${void 0===e.line?"":e.line.trim()}\n\`\`\``}static changesHover(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){const s=!e.isUncommitted||void 0!==i.sha&&Dt.isStagedUncommitted(i.sha)?e.previousSha:void 0,r=yield o.getDiffForLine(i,t,s);return{hoverMessage:this.getHoverDiffMessage(e,i,r)}})}static detailsHover(e,t,i,o){return{hoverMessage:this.getHoverMessage(e,t,i,o)}}static gutter(e,t,i,o){const s={renderOptions:{before:Object.assign({},o)}};e.isUncommitted&&(s.renderOptions.before.color=o.uncommittedColor);const r=vt.fromTemplate(t,e,i);return s.renderOptions.before.contentText=Q.pad(r.replace(/ /g,ne.Space),1,1),s}static gutterRenderOptions(e,t,i,o){let s=0;for(const e of F.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){s=-1;break}s+=e.truncateTo}s>=0&&(s+=Q.width(Q.interpolate(i,void 0)))>0&&(s+=3);let r=void 0,n=void 0;return t.enabled&&(r="solid",n="left"===t.location?"0 0 0 2px":"0 2px 0 0"),{backgroundColor:new q.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:r,borderWidth:n,color:new q.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:e?"overline solid rgba(0, 0, 0, .2)":"none",width:s>=0?`${s}ch`:void 0,uncommittedColor:new q.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}static heatmap(e,t,i){const o={renderOptions:{before:Object.assign({},i)}};return ps.applyHeatmap(o,e.date,t),o}static heatmapRenderOptions(){return{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:ne.ZeroWidthSpace,height:"100%",margin:"0 26px -1px 0"}}static hover(e,t,i){const o={renderOptions:{before:Object.assign({},t)}};return this.applyHeatmap(o,e.date,i),o}static hoverRenderOptions(e){return e.enabled?{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:ne.ZeroWidthSpace,height:"100%",margin:"0 26px 0 0",textDecoration:"none"}:{before:void 0}}static trailing(e,t,i){const o=vt.fromTemplate(t,e,{truncateMessageAtNewLine:!0,dateFormat:i});return{renderOptions:{after:{backgroundColor:new q.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new q.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:Q.pad(o.replace(/ /g,ne.Space),1,1),fontWeight:"normal",fontStyle:"normal"}}}}static withRange(e,t,i){let o=e.range;return void 0!==t&&(o=o.with({start:o.start.with({character:t})})),void 0!==i&&(o=o.with({end:o.end.with({character:i})})),Object.assign({},e,{range:o})}}class fs extends us{constructor(e,t,i,o,s,r){super(e,t,i,o),this.git=s,this.uri=r,this._blame=this.git.getBlameForFile(this.uri)}clear(){const e=e=>super[e];return P.__awaiter(this,void 0,void 0,function*(){this._hoverProviderDisposable&&this._hoverProviderDisposable.dispose(),e("clear").call(this)})}selection(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(!this.highlightDecoration)return;if(!(void 0!==t||(t=yield this._blame)&&t.lines.length))return;let i=void 0;if("string"==typeof e)i=e;else if("number"==typeof e){if(e>=0){const o=t.lines[e];i=o&&o.sha}}else i=M.first(t.commits.values()).sha;if(!i)return void this.editor.setDecorations(this.highlightDecoration,[]);const o=k.filterMap(t.lines,e=>e.sha===i?this.editor.document.validateRange(new q.Range(e.line,0,e.line,1e6)):void 0);this.editor.setDecorations(this.highlightDecoration,o)})}validate(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;return void 0!==e&&0!==e.lines.length})}getBlame(){return P.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;if(void 0!==e&&0!==e.lines.length)return e})}registerHoverProviders(e){if(!e.details&&!e.changes)return;const t=[];e.changes&&t.push(q.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(q.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=q.Disposable.from(...t)}provideDetailsHover(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;let o=void 0;i.isUncommitted||void 0!==(o=yield this.git.getLogCommit(i.repoPath,i.uri.fsPath,i.sha))&&(o.previousFileName=i.previousFileName,o.previousSha=i.previousSha);const s=ps.getHoverMessage(o||i,this._config.defaultDateFormat,yield this.git.hasRemote(i.repoPath),this._config.blame.file.annotationType);return new q.Hover(s,e.validateRange(new q.Range(t.line,0,t.line,ms)))})}provideChangesHover(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;const o=yield ps.changesHover(i,t.line,yield Fe.fromUri(e.uri,this.git),this.git);return new q.Hover(o.hoverMessage,e.validateRange(new q.Range(t.line,0,t.line,ms)))})}getCommitForHover(e){return P.__awaiter(this,void 0,void 0,function*(){const t=this._config.blame.file.annotationType;if(!(t===ys.Hover||t===ys.Gutter&&this._config.annotations.file.gutter.hover.wholeLine)&&0!==e.character)return;const i=yield this.getBlame();if(void 0===i)return;const o=i.lines[e.line];return i.commits.get(o.sha)})}}class vs extends fs{provideAnnotation(e,t){return P.__awaiter(this,void 0,void 0,function*(){this.annotationType=ys.Gutter;const t=yield this.getBlame();if(void 0===t)return!1;const i=process.hrtime(),o=this._config.annotations.file.gutter,s=Q.getTokensFromTemplate(o.format).reduce((e,t)=>(e[t.key]=t.options,e),{}),r={dateFormat:null===o.dateFormat?this._config.defaultDateFormat:o.dateFormat,tokenOptions:s},n=Date.now(),a=this._config.annotations.file.gutter.separateLines,h=ps.gutterRenderOptions(a,o.heatmap,o.format,r);this._decorations=[];const c=Object.create(null);let l,d,u,m=!1;for(const e of t.lines){const i=e.line;u!==e.sha?(m=!1,u=e.sha,void 0===(d=c[e.sha])?void 0!==(l=t.commits.get(e.sha))&&(d=ps.gutter(l,o.format,r,h),o.heatmap.enabled&&ps.applyHeatmap(d,l.date,n),d.range=new q.Range(i,0,i,0),this._decorations.push(d),c[e.sha]=d):(d=Object.assign({},d,{range:new q.Range(i,0,i,0)}),this._decorations.push(d))):(d=Object.assign({},d),o.compact&&!m&&(d.renderOptions={before:Object.assign({},d.renderOptions.before,{contentText:ne.Space.repeat(Q.width(d.renderOptions.before.contentText))})},a&&(d.renderOptions.before.textDecoration="none"),m=!0),d.range=new q.Range(i,0,i,0),this._decorations.push(d))}this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations);const g=process.hrtime(i);return we.log(`${1e3*g[0]+Math.floor(g[1]/1e6)} ms to compute gutter blame annotations`),this.registerHoverProviders(o.hover),this.selection(e,t),!0})}}class ws extends fs{provideAnnotation(e,t){return P.__awaiter(this,void 0,void 0,function*(){this.annotationType=ys.Heatmap;const t=yield this.getBlame();if(void 0===t)return!1;const i=process.hrtime(),o=Date.now(),s=ps.heatmapRenderOptions();this._decorations=[];const r=Object.create(null);let n,a;for(const e of t.lines){const i=e.line;void 0===(a=r[e.sha])?void 0!==(n=t.commits.get(e.sha))&&((a=ps.heatmap(n,o,s)).range=new q.Range(i,0,i,0),this._decorations.push(a),r[e.sha]=a):(a=Object.assign({},a,{range:new q.Range(i,0,i,0)}),this._decorations.push(a))}this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations);const h=process.hrtime(i);return we.log(`${1e3*h[0]+Math.floor(h[1]/1e6)} ms to compute heatmap annotations`),this.selection(e,t),!0})}}class Cs extends fs{provideAnnotation(e){return P.__awaiter(this,void 0,void 0,function*(){this.annotationType=ys.Hover;const t=this._config.annotations.file.hover,i=yield this.getBlame();if(void 0===i)return!1;if(t.heatmap.enabled){const e=process.hrtime(),o=Date.now(),s=ps.hoverRenderOptions(t.heatmap);this._decorations=[];const r=Object.create(null);let n,a;for(const e of i.lines){const t=e.line;void 0===(a=r[e.sha])?void 0!==(n=i.commits.get(e.sha))&&((a=ps.hover(n,s,o)).range=new q.Range(t,0,t,0),this._decorations.push(a),r[e.sha]=a):(a=Object.assign({},a,{range:new q.Range(t,0,t,0)}),this._decorations.push(a))}this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations);const h=process.hrtime(e);we.log(`${1e3*h[0]+Math.floor(h[1]/1e6)} ms to compute hover blame annotations`)}return this.registerHoverProviders(t),this.selection(e,i),!0})}}class bs extends us{constructor(e,t,i,o,s,r){super(e,t,i,o),this.git=s,this.uri=r}provideAnnotation(e){return P.__awaiter(this,void 0,void 0,function*(){this.annotationType=ys.RecentChanges;const e=yield this.git.getLogCommit(this.uri.repoPath,this.uri.fsPath,{previous:!0});if(void 0===e)return!1;const t=yield this.git.getDiffForFile(this.uri,e.previousSha);if(void 0===t)return!1;const i=process.hrtime(),o=this._config.annotations.file.recentChanges,s=this._config.defaultDateFormat;this._decorations=[];for(const i of t.chunks){let t=i.currentPosition.start-2;for(const r of i.lines){if(void 0===r.line)continue;if(t++,"unchanged"===r.state)continue;const i=this.editor.document.validateRange(new q.Range(new q.Position(t,0),new q.Position(t,ms)));o.hover.details&&this._decorations.push({hoverMessage:ps.getHoverMessage(e,s,yield this.git.hasRemote(e.repoPath),this._config.blame.file.annotationType),range:i});let n=void 0;o.hover.changes&&(n=ps.getHoverDiffMessage(e,this.uri,r)),this._decorations.push({hoverMessage:n,range:i})}}this.editor.setDecorations(this.highlightDecoration,this._decorations);const r=process.hrtime(i);return we.log(`${1e3*r[0]+Math.floor(r[1]/1e6)} ms to compute recent changes annotations`),!0})}selection(e){return P.__awaiter(this,void 0,void 0,function*(){})}validate(){return P.__awaiter(this,void 0,void 0,function*(){return!0})}}var ys;!function(e){e.Gutter="gutter",e.Heatmap="heatmap",e.Hover="hover",e.RecentChanges="recentChanges"}(ys||(ys={}));var _s;!function(e){e.User="User",e.BlameabilityChanged="BlameabilityChanged",e.ColumnChanged="ColumnChanged",e.Disposing="Disposing",e.DocumentChanged="DocumentChanged",e.DocumentClosed="DocumentClosed"}(_s||(_s={}));var xs;!function(e){e.Computing="computing",e.Computed="computed"}(xs||(xs={}));const Ss={blameAnnotation:q.window.createTextEditorDecorationType({isWholeLine:!0,rangeBehavior:q.DecorationRangeBehavior.ClosedClosed,textDecoration:"none"}),blameHighlight:void 0,recentChangesAnnotation:void 0,recentChangesHighlight:void 0};class $s extends q.Disposable{constructor(e,t,i){super(()=>this.dispose()),this.context=e,this.git=t,this.gitContextTracker=i,this._onDidToggleAnnotations=new q.EventEmitter,this._annotationProviders=new Map,this._keyboardScope=void 0,this._disposable=q.Disposable.from(ds.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}dispose(){this._annotationProviders.forEach((e,t)=>P.__awaiter(this,void 0,void 0,function*(){return yield this.clearCore(t,_s.Disposing)})),Ss.blameAnnotation&&Ss.blameAnnotation.dispose(),Ss.blameHighlight&&Ss.blameHighlight.dispose(),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=ds.initializing(e);let i;if(t||ds.changed(e,ds.name("blame")("file")("lineHighlight").value)){Ss.blameHighlight&&Ss.blameHighlight.dispose();const e=(i=ds.get()).blame.file.lineHighlight;e.enabled?Ss.blameHighlight=q.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:q.OverviewRulerLane.Right,backgroundColor:e.locations.includes(os.Line)?new q.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(os.OverviewRuler)?new q.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(os.Gutter)?this.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(os.Gutter)?this.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}}):Ss.blameHighlight=void 0}if(t||ds.changed(e,ds.name("recentChanges")("file")("lineHighlight").value)){Ss.recentChangesHighlight&&Ss.recentChangesHighlight.dispose(),void 0===i&&(i=ds.get());const e=i.recentChanges.file.lineHighlight;Ss.recentChangesHighlight=q.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:q.OverviewRulerLane.Right,backgroundColor:e.locations.includes(os.Line)?new q.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(os.OverviewRuler)?new q.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(os.Gutter)?this.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(os.Gutter)?this.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}})}if(!t&&(ds.changed(e,ds.name("blame")("file").value)||ds.changed(e,ds.name("recentChanges")("file").value)||ds.changed(e,ds.name("annotations")("file").value))){void 0===i&&(i=ds.get());for(const e of this._annotationProviders.values())void 0!==e&&(e.annotationType===ys.RecentChanges?e.reset(Ss.recentChangesAnnotation,Ss.recentChangesHighlight):e.annotationType===i.blame.file.annotationType?e.reset(Ss.blameAnnotation,Ss.blameHighlight):this.showAnnotations(e.editor,i.blame.file.annotationType))}}onActiveTextEditorChanged(e){if(void 0!==e&&!s(e))return;void 0===this.getProvider(e)?(o(se.AnnotationStatus,void 0),this.detachKeyboardHook()):(o(se.AnnotationStatus,xs.Computed),this.attachKeyboardHook())}onBlameabilityChanged(e){e.blameable||void 0===e.editor||this.clear(e.editor,_s.BlameabilityChanged)}onTextDocumentChanged(e){if(e.document.isDirty&&this.git.isTrackable(e.document.uri))for(const[t,i]of this._annotationProviders)Y.equals(i.document,e.document)&&this.clearCore(t,_s.DocumentClosed)}onTextDocumentClosed(e){if(this.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)Y.equals(i.document,e)&&this.clearCore(t,_s.DocumentClosed)}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(void 0!==t)t.restore(e.textEditor);else{const t=M.find(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey,_s.ColumnChanged)}}onVisibleTextEditorsChanged(e){return P.__awaiter(this,void 0,void 0,function*(){let t;for(const i of e)void 0!==(t=this.getProvider(i))&&t.restore(i)})}attachKeyboardHook(){return P.__awaiter(this,void 0,void 0,function*(){void 0===this._keyboardScope&&(this._keyboardScope=yield Jt.instance.beginScope({escape:{onDidPressKey:e=>P.__awaiter(this,void 0,void 0,function*(){const e=q.window.activeTextEditor;void 0!==e&&(yield this.clear(e,_s.User))})}}))})}detachKeyboardHook(){return P.__awaiter(this,void 0,void 0,function*(){void 0!==this._keyboardScope&&(yield this._keyboardScope.dispose(),this._keyboardScope=void 0)})}clear(e,t=_s.User){return P.__awaiter(this,void 0,void 0,function*(){this.clearCore(us.getCorrelationKey(e),t)})}clearCore(e,t){return P.__awaiter(this,void 0,void 0,function*(){const i=this._annotationProviders.get(e);void 0!==i&&(we.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),yield i.dispose(),e===us.getCorrelationKey(q.window.activeTextEditor)&&(yield o(se.AnnotationStatus,void 0),yield this.detachKeyboardHook()),0===this._annotationProviders.size&&(we.log("Remove all listener registrations for annotations"),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())})}getAnnotationType(e){const t=this.getProvider(e);return void 0!==t&&this.git.isEditorBlameable(e)?t.annotationType:void 0}getProvider(e){if(void 0!==e&&void 0!==e.document)return this._annotationProviders.get(us.getCorrelationKey(e))}showAnnotations(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e||void 0===e.document||!this.git.isEditorBlameable(e))return!1;const s=this.getProvider(e);return void 0!==s&&s.annotationType===t?(yield s.selection(i),!0):q.window.withProgress({location:q.ProgressLocation.Window},r=>P.__awaiter(this,void 0,void 0,function*(){const n=e===q.window.activeTextEditor;yield o(se.AnnotationStatus,n?xs.Computing:void 0);const a=this.showAnnotationsCore(s,e,t,i,r),h=yield a;return n&&(yield o(se.AnnotationStatus,h?xs.Computed:void 0)),a}))})}showAnnotationsCore(e,t,i,o,s){return P.__awaiter(this,void 0,void 0,function*(){if(void 0!==s){let e="annotations";switch(i){case ys.Gutter:case ys.Hover:e="blame annotations";break;case ys.Heatmap:e="heatmap annotations";break;case ys.RecentChanges:e="recent changes annotations"}s.report({message:`Computing ${e} for ${xe.basename(t.document.fileName)}`})}this.attachKeyboardHook();const r=yield Fe.fromUri(t.document.uri,this.git);let n=void 0;switch(i){case ys.Gutter:n=new vs(this.context,t,Ss.blameAnnotation,Ss.blameHighlight,this.git,r);break;case ys.Heatmap:n=new ws(this.context,t,Ss.blameAnnotation,void 0,this.git,r);break;case ys.Hover:n=new Cs(this.context,t,Ss.blameAnnotation,Ss.blameHighlight,this.git,r);break;case ys.RecentChanges:n=new bs(this.context,t,void 0,Ss.recentChangesHighlight,this.git,r)}return!(void 0===n||!(yield n.validate()))&&(void 0!==e&&(yield this.clearCore(e.correlationKey,_s.User)),this._annotationsDisposable||0!==this._annotationProviders.size||(we.log("Add listener registrations for annotations"),this._annotationsDisposable=q.Disposable.from(q.window.onDidChangeActiveTextEditor(W.debounce(this.onActiveTextEditorChanged,50),this),q.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),q.window.onDidChangeVisibleTextEditors(this.onVisibleTextEditorsChanged,this),q.workspace.onDidChangeTextDocument(W.debounce(this.onTextDocumentChanged,50),this),q.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this))),this._annotationProviders.set(n.correlationKey,n),!!(yield n.provideAnnotation(o))&&(this._onDidToggleAnnotations.fire(),!0))})}toggleAnnotations(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(!(e&&e.document&&(t===ys.RecentChanges?this.git.isTrackable(e.document.uri):this.git.isEditorBlameable(e))))return!1;const o=this.getProvider(e);if(void 0===o)return this.showAnnotations(e,t,i);const s=o.annotationType!==t;return yield this.clearCore(o.correlationKey,_s.User),!!s&&this.showAnnotations(e,t,i)})}}class Ds extends q.CodeLens{constructor(e,t,i,o,s,r,n,a){super(r,a),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame&&this.blame()}}class Fs extends q.CodeLens{constructor(e,t,i,o,s,r,n){super(r),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame()}}class Ps{constructor(e,t){this.git=t,this._onDidChangeCodeLenses=new q.EventEmitter}get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(){this._onDidChangeCodeLenses.fire()}provideCodeLenses(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(!(yield this.git.isTracked(e.uri.fsPath)))return[];const i=e.isDirty,o=ds.get(ds.name("codeLens").value,e.uri);this._debug=o.debug;let s=o.perLanguageLocations&&o.perLanguageLocations.find(t=>void 0!==t.language&&t.language.toLowerCase()===e.languageId);null==s&&(s={language:void 0,locations:o.locations,customSymbols:o.customLocationSymbols}),s.customSymbols=null!=s.customSymbols?s.customSymbols=s.customSymbols.map(e=>e.toLowerCase()):[];const r=[];let n,a,h;if(i)1===s.locations.length&&s.locations.includes(is.Document)||(h=yield q.commands.executeCommand(oe.ExecuteDocumentSymbolProvider,e.uri));else{if(n=yield Fe.fromUri(e.uri,this.git),t.isCancellationRequested)return r;if(1===s.locations.length&&s.locations.includes(is.Document)?a=yield this.git.getBlameForFile(n):[a,h]=yield Promise.all([this.git.getBlameForFile(n),q.commands.executeCommand(oe.ExecuteDocumentSymbolProvider,e.uri)]),void 0===a||0===a.lines.length)return r}if(t.isCancellationRequested)return r;const c=W.once(()=>e.validateRange(new q.Range(0,1e6,1e6,1e6))),l=i?{title:this.getDirtyTitle(o)}:void 0;if(void 0!==h&&(we.log("GitCodeLensProvider.provideCodeLenses:",`${h.length} symbol(s) found`),h.forEach(t=>this.provideCodeLens(r,e,t,s,c,a,n,o,i,l))),(s.locations.includes(is.Document)||s.customSymbols.includes("file"))&&!s.customSymbols.includes("!file")&&!r.find(e=>0===e.range.start.line&&0===e.range.end.line)){const e=c();let t=void 0;(i||o.recentChange.enabled)&&(i||(t=W.once(()=>this.git.getBlameForRangeSync(a,n,e))),r.push(new Ds(q.SymbolKind.File,n,t,e,!0,new q.Range(0,0,0,e.start.character),o.recentChange.command,l))),!i&&o.authors.enabled&&(void 0===t&&(t=W.once(()=>this.git.getBlameForRangeSync(a,n,e))),r.push(new Fs(q.SymbolKind.File,n,t,e,!0,new q.Range(0,1,0,e.start.character),o.authors.command)))}return r})}validateSymbolAndGetBlameRange(e,t,i){let o,s=!1;const r=q.SymbolKind[e.kind].toLowerCase();switch(e.kind){case q.SymbolKind.File:(t.locations.includes(is.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`)),s&&(o=i());break;case q.SymbolKind.Package:(t.locations.includes(is.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`)),s&&0===e.location.range.start.line&&0===e.location.range.end.line&&(o=i());break;case q.SymbolKind.Class:case q.SymbolKind.Interface:case q.SymbolKind.Module:case q.SymbolKind.Namespace:case q.SymbolKind.Struct:(t.locations.includes(is.Containers)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`));break;case q.SymbolKind.Constructor:case q.SymbolKind.Enum:case q.SymbolKind.Function:case q.SymbolKind.Method:(t.locations.includes(is.Blocks)||t.customSymbols.includes(r))&&(s=!t.customSymbols.includes(`!${r}`));break;default:t.customSymbols.includes(r)&&(s=!t.customSymbols.includes(`!${r}`))}return s?o||e.location.range:void 0}provideCodeLens(e,t,i,o,s,r,n,a,h,c){const l=this.validateSymbolAndGetBlameRange(i,o,s);if(void 0===l)return;const d=t.lineAt(i.location.range.start);if(e.length&&e[e.length-1].range.start.line===d.lineNumber)return;let u,m=0;if((h||a.recentChange.enabled)&&(h||(u=W.once(()=>this.git.getBlameForRangeSync(r,n,l))),e.push(new Ds(i.kind,n,u,l,!1,d.range.with(new q.Position(d.range.start.line,m)),a.recentChange.command,c)),m++),a.authors.enabled){let o=!l.isSingleLine;if(!o&&"csharp"===t.languageId)switch(i.kind){case q.SymbolKind.File:break;case q.SymbolKind.Package:case q.SymbolKind.Module:case q.SymbolKind.Namespace:case q.SymbolKind.Class:case q.SymbolKind.Interface:case q.SymbolKind.Constructor:case q.SymbolKind.Method:case q.SymbolKind.Function:case q.SymbolKind.Enum:o=!0}o&&!h&&(void 0===u&&(u=W.once(()=>this.git.getBlameForRangeSync(r,n,l))),e.push(new Fs(i.kind,n,u,l,!1,d.range.with(new q.Position(d.range.start.line,m)),a.authors.command)))}}resolveCodeLens(e,t){return e instanceof Ds?this.resolveGitRecentChangeCodeLens(e,t):e instanceof Fs?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=M.first(i.commits.values());let s=`${o.author}, ${o.fromNow()}`;switch(this._debug&&(s+=` [${q.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${o.shortSha})]`),e.desiredCommand){case ts.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i,o);case ts.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i,o);case ts.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i,o);case ts.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i,o);case ts.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i,o);case ts.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=i.authors.size;let s=`${o} ${o>1?"authors":"author"} (${M.first(i.authors.values()).name}${o>1?" and others":""})`;switch(this._debug&&(s+=` [${q.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${M.join(M.map(i.authors.values(),e=>e.name),", ")})]`),e.desiredCommand){case ts.DiffWithPrevious:return this.applyDiffWithPreviousCommand(s,e,i);case ts.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(s,e,i);case ts.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(s,e,i);case ts.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(s,e,i);case ts.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(s,e,i);case ts.ToggleFileBlame:return this.applyToggleFileBlameCommand(s,e,i);default:return e}}applyDiffWithPreviousCommand(e,t,i,o){if(void 0===o){const e=i.allLines[t.range.start.line];o=i.commits.get(e.sha)}return t.command={title:e,command:Bt.DiffWithPrevious,arguments:[q.Uri.file(t.uri.fsPath),{commit:o,range:t.isFullRange?void 0:t.blameRange}]},t}applyShowQuickCommitDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":ts.ShowQuickCommitDetails,arguments:[q.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCommitFileDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":ts.ShowQuickCommitFileDetails,arguments:[q.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCurrentBranchHistoryCommand(e,t,i,o){return t.command={title:e,command:ts.ShowQuickCurrentBranchHistory,arguments:[q.Uri.file(t.uri.fsPath)]},t}applyShowQuickFileHistoryCommand(e,t,i,o){return t.command={title:e,command:ts.ShowQuickFileHistory,arguments:[q.Uri.file(t.uri.fsPath),{range:t.isFullRange?void 0:t.blameRange}]},t}applyToggleFileBlameCommand(e,t,i){return t.command={title:e,command:Bt.ToggleFileBlame,arguments:[q.Uri.file(t.uri.fsPath)]},t}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?ds.get(ds.name("strings")("codeLens")("unsavedChanges")("recentChangeAndAuthors").value):e.recentChange.enabled?ds.get(ds.name("strings")("codeLens")("unsavedChanges")("recentChangeOnly").value):ds.get(ds.name("strings")("codeLens")("unsavedChanges")("authorsOnly").value)}}Ps.selector=[{scheme:re.File},{scheme:re.Git},{scheme:re.GitLensGit}];class ks extends q.Disposable{constructor(e,t,i){super(()=>this.dispose()),this.context=e,this.git=t,this.gitContextTracker=i,this._disposable=q.Disposable.from(ds.onDidChange(this.onConfigurationChanged,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}dispose(){this._providerDisposable&&this._providerDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=ds.initializing(e),i=ds.name("codeLens").value;if(t||ds.changed(e,i,null)){t||we.log("CodeLens config changed; resetting CodeLens provider");const e=ds.get(i);e.enabled&&(e.recentChange.enabled||e.authors.enabled)?void 0!==this._provider?this._provider.reset():(this._provider=new Ps(this.context,this.git),this._providerDisposable=q.languages.registerCodeLensProvider(Ps.selector,this._provider)):(void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),this._provider=void 0),this._canToggle=e.recentChange.enabled||e.authors.enabled,o(se.CanToggleCodeLens,this._canToggle)}}onBlameabilityChanged(e){void 0!==this._provider&&e.blameable&&e.reason!==Ct.EditorChanged&&(we.log("Blameability changed; resetting CodeLens provider"),this._provider.reset())}toggleCodeLens(e){if(this._canToggle){if(we.log("toggleCodeLens()"),void 0!==this._providerDisposable)return this._providerDisposable.dispose(),void(this._providerDisposable=void 0);this._providerDisposable=q.languages.registerCodeLensProvider(Ps.selector,new Ps(this.context,this.git))}}}const Rs=q.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:q.DecorationRangeBehavior.ClosedClosed});var Ts;!function(e){e.Trailing="trailing",e.Hover="hover"}(Ts||(Ts={}));class Es extends q.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this.git=t,this.gitContextTracker=i,this.annotationController=o,this._currentLine={line:-1},this._isAnnotating=!1,this._updateBlameDebounced=W.debounce(this.updateBlame,250),this._disposable=q.Disposable.from(ds.onDidChange(this.onConfigurationChanged,this),o.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),q.debug.onDidStartDebugSession(this.onDebugSessionStarted,this)),this.onConfigurationChanged(ds.initializingChangeEvent)}dispose(){this.clearAnnotations(this._editor,!0),this.unregisterHoverProviders(),this._trackCurrentLineDisposable&&this._trackCurrentLineDisposable.dispose(),this._statusBarItem&&this._statusBarItem.dispose(),this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=ds.initializing(e),i=ds.get();let o=!1;if((t||ds.changed(e,ds.name("blame")("line").value))&&(o=!0,this._blameLineAnnotationState=void 0),(t||ds.changed(e,ds.name("annotations")("line")("trailing").value)||ds.changed(e,ds.name("annotations")("line")("hover").value))&&(o=!0),t||ds.changed(e,ds.name("statusBar").value))if(o=!0,i.statusBar.enabled){const e="left"!==i.statusBar.alignment?q.StatusBarAlignment.Right:q.StatusBarAlignment.Left;void 0!==this._statusBarItem&&this._statusBarItem.alignment!==e&&(this._statusBarItem.dispose(),this._statusBarItem=void 0),this._statusBarItem=this._statusBarItem||q.window.createStatusBarItem(e,e===q.StatusBarAlignment.Right?1e3:0),this._statusBarItem.command=i.statusBar.command}else void 0!==this._statusBarItem&&(this._statusBarItem.dispose(),this._statusBarItem=void 0);if(this._config=i,!o)return;i.statusBar.enabled||i.blame.line.enabled||void 0!==this._blameLineAnnotationState&&this._blameLineAnnotationState.enabled?this._trackCurrentLineDisposable=this._trackCurrentLineDisposable||q.Disposable.from(q.window.onDidChangeActiveTextEditor(W.debounce(this.onActiveTextEditorChanged,50),this),q.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)):void 0!==this._trackCurrentLineDisposable&&(this._trackCurrentLineDisposable.dispose(),this._trackCurrentLineDisposable=void 0),this.refresh(q.window.activeTextEditor)}onActiveTextEditorChanged(e){this._editor!==e&&(void 0===e||s(e))&&this.refresh(e)}onBlameabilityChanged(e){if(X.equals(this._editor,e.editor))if(this._blameable||e.blameable){if(this._blameable=e.blameable,!e.blameable||void 0===this._editor)return this._updateBlameDebounced.cancel(),void this.updateBlame(this._currentLine.line,e.editor);this._updateBlameDebounced(this._editor.selection.active.line,this._editor)}else this._updateBlameDebounced.cancel()}onDebugSessionStarted(){const e=this.getLineAnnotationState();e.enabled&&(this._debugSessionEndDisposable=q.debug.onDidTerminateDebugSession(this.onDebugSessionEnded,this),this.toggleAnnotations(q.window.activeTextEditor,e.annotationType,"debugging"))}onDebugSessionEnded(){this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),this._debugSessionEndDisposable=void 0,void 0===this._blameLineAnnotationState||this._blameLineAnnotationState.enabled||"debugging"!==this._blameLineAnnotationState.reason||this.toggleAnnotations(q.window.activeTextEditor,this._blameLineAnnotationState.annotationType)}onFileAnnotationsToggled(){this.refresh(q.window.activeTextEditor)}onTextEditorSelectionChanged(e){return P.__awaiter(this,void 0,void 0,function*(){if(!this._blameable||!X.equals(this._editor,e.textEditor))return;const t=e.selections[0].active.line;t!==this._currentLine.line&&(this._currentLine.line=t,this._currentLine.commit=void 0,this._currentLine.logCommit=void 0,void 0===this._uri&&void 0!==e.textEditor&&(this._uri=yield Fe.fromUri(e.textEditor.document.uri,this.git)),this.clearAnnotations(e.textEditor),this._updateBlameDebounced(t,e.textEditor))})}getLineAnnotationState(){return void 0!==this._blameLineAnnotationState?this._blameLineAnnotationState:this._config.blame.line}isEditorBlameable(e){return void 0!==e&&void 0!==e.document&&(!!this.git.isTrackable(e.document.uri)&&((!e.document.isUntitled||e.document.uri.scheme!==re.File)&&this.git.isEditorBlameable(e)))}updateBlame(e,t){return P.__awaiter(this,void 0,void 0,function*(){this._currentLine.line=e,this._currentLine.commit=void 0,this._currentLine.logCommit=void 0;let i=void 0,o=void 0;if(this._blameable&&e>=0){const t=yield this.git.getBlameForLine(this._uri,e);this._blameable&&(o=void 0===t?void 0:t.line,i=void 0===t?void 0:t.commit)}this._currentLine.commit=i,void 0!==i&&void 0!==o?this.show(i,o,t,e):this.clear(t)})}clear(e){return P.__awaiter(this,void 0,void 0,function*(){this.unregisterHoverProviders(),this.clearAnnotations(e,!0),this._statusBarItem&&this._statusBarItem.hide()})}clearAnnotations(e,t=!1){void 0!==e&&(this._isAnnotating||t)&&(e.setDecorations(Rs,[]),this._isAnnotating=!1)}refresh(e){return P.__awaiter(this,void 0,void 0,function*(){if(this._currentLine.line=-1,void 0===e&&void 0===this._editor)return;if(this.clearAnnotations(this._editor),this._blameable=this.isEditorBlameable(e),!this._blameable||void 0===e)return this.updateBlame(this._currentLine.line,e),void(this._editor=void 0);this._editor=e,this._uri=yield Fe.fromUri(e.document.uri,this.git);const t=this._config.advanced.caching.maxLines;this._config.advanced.caching.enabled&&(t<=0||e.document.lineCount<=t)&&this.git.getBlameForFile(this._uri);const i=this.getLineAnnotationState();if(i.enabled&&this._blameable){const e=this._config.annotations.line;this.registerHoverProviders(i.annotationType===Ts.Trailing?e.trailing.hover:e.hover)}else this.unregisterHoverProviders();this._updateBlameDebounced(e.selection.active.line,e)})}show(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){void 0!==i.document&&(this.updateStatusBar(e),this.updateTrailingAnnotation(e,t,i,o))})}showAnnotations(e,t,i="user"){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;const o=this.getLineAnnotationState();o.enabled&&o.annotationType===t||(this._blameLineAnnotationState={enabled:!0,annotationType:t,reason:i},this.clearAnnotations(e),yield this.updateBlame(e.selection.active.line,e))})}toggleAnnotations(e,t,i="user"){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;const o=this.getLineAnnotationState();this._blameLineAnnotationState={enabled:!o.enabled,annotationType:t,reason:i},this.clearAnnotations(e),yield this.updateBlame(e.selection.active.line,e)})}updateStatusBar(e){const t=this._config.statusBar;if(t.enabled&&void 0!==this._statusBarItem){switch(this._statusBarItem.text=`$(git-commit) ${vt.fromTemplate(t.format,e,{truncateMessageAtNewLine:!0,dateFormat:null===t.dateFormat?this._config.defaultDateFormat:t.dateFormat})}`,t.command){case hs.ToggleFileBlame:this._statusBarItem.tooltip="Toggle Blame Annotations";break;case hs.DiffWithPrevious:this._statusBarItem.command=Bt.DiffLineWithPrevious,this._statusBarItem.tooltip="Compare Line Revision with Previous";break;case hs.DiffWithWorking:this._statusBarItem.command=Bt.DiffLineWithWorking,this._statusBarItem.tooltip="Compare Line Revision with Working";break;case hs.ToggleCodeLens:this._statusBarItem.tooltip="Toggle Git CodeLens";break;case hs.ShowQuickCommitDetails:this._statusBarItem.tooltip="Show Commit Details";break;case hs.ShowQuickCommitFileDetails:this._statusBarItem.tooltip="Show Line Commit Details";break;case hs.ShowQuickFileHistory:this._statusBarItem.tooltip="Show File History";break;case hs.ShowQuickCurrentBranchHistory:this._statusBarItem.tooltip="Show Branch History"}this._statusBarItem.show()}}updateTrailingAnnotation(e,t,i,o){return P.__awaiter(this,void 0,void 0,function*(){const r=this.getLineAnnotationState();if(!r.enabled||r.annotationType!==Ts.Trailing||!s(i))return;o=void 0===o?t.line:o;const n=this._config.annotations.line.trailing,a=ps.trailing(e,n.format,null===n.dateFormat?this._config.defaultDateFormat:n.dateFormat);a.range=i.document.validateRange(new q.Range(o,ms,o,ms)),i.setDecorations(Rs,[a]),this._isAnnotating=!0})}registerHoverProviders(e){if(this.unregisterHoverProviders(),void 0===this._editor)return;if(!e.details&&!e.changes)return;const t=[];e.changes&&t.push(q.languages.registerHoverProvider({pattern:this._editor.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(q.languages.registerHoverProvider({pattern:this._editor.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=q.Disposable.from(...t)}unregisterHoverProviders(){void 0!==this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}provideDetailsHover(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._currentLine.line!==t.line)return;const i=this._currentLine.commit;if(void 0===i)return;const o=this.annotationController.getAnnotationType(this._editor);if(o===ys.Gutter&&this._config.annotations.file.gutter.hover.details||o===ys.Hover&&this._config.annotations.file.hover.details)return;const s=this.getLineAnnotationState(),r=s.annotationType===Ts.Hover||s.annotationType===Ts.Trailing&&this._config.annotations.line.trailing.hover.wholeLine||o===ys.Hover||o===ys.Gutter&&this._config.annotations.file.gutter.hover.wholeLine,n=e.validateRange(new q.Range(t.line,r?0:ms,t.line,ms));if(!r&&n.start.character!==t.character)return;let a=this._currentLine.logCommit;void 0!==a||i.isUncommitted||void 0!==(a=yield this.git.getLogCommit(i.repoPath,i.uri.fsPath,i.sha))&&(a.previousSha=i.previousSha,a.previousFileName=i.previousFileName,this._currentLine.logCommit=a);const h=ps.getHoverMessage(a||i,this._config.defaultDateFormat,yield this.git.hasRemote(i.repoPath),this._config.blame.file.annotationType);return new q.Hover(h,n)})}provideChangesHover(e,t,i){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._currentLine.line!==t.line)return;const i=this._currentLine.commit;if(void 0===i)return;const o=this.annotationController.getAnnotationType(this._editor);if(o===ys.Gutter&&this._config.annotations.file.gutter.hover.changes||o===ys.Hover&&this._config.annotations.file.hover.changes)return;const s=this.getLineAnnotationState(),r=s.annotationType===Ts.Hover||s.annotationType===Ts.Trailing&&this._config.annotations.line.trailing.hover.wholeLine||o===ys.Hover||o===ys.Gutter&&this._config.annotations.file.gutter.hover.wholeLine,n=e.validateRange(new q.Range(t.line,r?0:ms,t.line,ms));if(!r&&n.start.character!==t.character)return;const a=yield ps.changesHover(i,t.line,this._uri,this.git);return new q.Hover(a.hoverMessage,n)})}}class Ns extends q.Disposable{constructor(e,t){super(()=>this.dispose()),this.context=e,this.git=t,q.commands.registerCommand("gitlens.explorers.openChanges",this.openChanges,this),q.commands.registerCommand("gitlens.explorers.openChangesWithWorking",this.openChangesWithWorking,this),q.commands.registerCommand("gitlens.explorers.openFile",this.openFile,this),q.commands.registerCommand("gitlens.explorers.openFileRevision",this.openFileRevision,this),q.commands.registerCommand("gitlens.explorers.openFileRevisionInRemote",this.openFileRevisionInRemote,this),q.commands.registerCommand("gitlens.explorers.openChangedFiles",this.openChangedFiles,this),q.commands.registerCommand("gitlens.explorers.openChangedFileChanges",this.openChangedFileChanges,this),q.commands.registerCommand("gitlens.explorers.openChangedFileChangesWithWorking",this.openChangedFileChangesWithWorking,this),q.commands.registerCommand("gitlens.explorers.openChangedFileRevisions",this.openChangedFileRevisions,this),q.commands.registerCommand("gitlens.explorers.applyChanges",this.applyChanges,this),q.commands.registerCommand("gitlens.explorers.compareWithHead",this.compareWithHead,this),q.commands.registerCommand("gitlens.explorers.compareWithRemote",this.compareWithRemote,this),q.commands.registerCommand("gitlens.explorers.compareWithSelected",this.compareWithSelected,this),q.commands.registerCommand("gitlens.explorers.selectForCompare",this.selectForCompare,this),q.commands.registerCommand("gitlens.explorers.terminalCheckoutBranch",this.terminalCheckoutBranch,this),q.commands.registerCommand("gitlens.explorers.terminalCreateBranch",this.terminalCreateBranch,this),q.commands.registerCommand("gitlens.explorers.terminalDeleteBranch",this.terminalDeleteBranch,this),q.commands.registerCommand("gitlens.explorers.terminalRebaseBranchToRemote",this.terminalRebaseBranchToRemote,this),q.commands.registerCommand("gitlens.explorers.terminalSquashBranchIntoCommit",this.terminalSquashBranchIntoCommit,this),q.commands.registerCommand("gitlens.explorers.terminalRebaseCommit",this.terminalRebaseCommit,this),q.commands.registerCommand("gitlens.explorers.terminalResetCommit",this.terminalResetCommit,this),q.commands.registerCommand("gitlens.explorers.terminalRemoveRemote",this.terminalRemoveRemote,this)}dispose(){this._disposable&&this._disposable.dispose()}applyChanges(e){return P.__awaiter(this,void 0,void 0,function*(){return yield this.git.checkoutFile(e.uri),this.openFile(e)})}compareWithHead(e){return P.__awaiter(this,void 0,void 0,function*(){e instanceof Rt&&oi.instance.showComparisonInResults(e.repoPath,e.ref,"HEAD")})}compareWithRemote(e){return P.__awaiter(this,void 0,void 0,function*(){e.branch.tracking&&oi.instance.showComparisonInResults(e.repoPath,e.branch.tracking,e.ref)})}compareWithSelected(e){return P.__awaiter(this,void 0,void 0,function*(){void 0!==this._selection&&e instanceof Rt&&this._selection.repoPath===e.repoPath&&oi.instance.showComparisonInResults(this._selection.repoPath,this._selection.ref,e.ref)})}selectForCompare(e){return P.__awaiter(this,void 0,void 0,function*(){e instanceof Rt&&(this._selection={ref:e.ref,repoPath:e.repoPath},o(se.ExplorersCanCompare,!0))})}openChanges(e){const t=e.getCommand();if(void 0===t||void 0===t.arguments)return;const[i,o]=t.arguments;return o.showOptions.preview=!1,q.commands.executeCommand(t.command,i,o)}openChangesWithWorking(e){const t={commit:e.commit,showOptions:{preserveFocus:!0,preview:!1}};return q.commands.executeCommand(Bt.DiffWithWorking,e.commit.toGitUri(),t)}openFile(e){return S(e.uri,{preserveFocus:!0,preview:!1})}openFileRevision(e,t={showOptions:{preserveFocus:!0,preview:!1}}){return S(t.uri||("D"===e.commit.status?Fe.toRevisionUri(e.commit.previousSha,e.commit.previousUri.fsPath,e.commit.repoPath):Fe.toRevisionUri(e.uri)),t.showOptions||{preserveFocus:!0,preview:!1})}openChangedFileChanges(e,t={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=e.commit.fileStatuses.map(e=>Fe.fromFileStatus(e,i));for(const s of o)yield this.openDiffWith(i,{uri:s,sha:void 0!==e.commit.previousSha?e.commit.previousSha:Dt.deletedSha},{uri:s,sha:e.commit.sha},t)})}openChangedFileChangesWithWorking(e,t={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=k.filterMap(e.commit.fileStatuses,e=>"D"!==e.status?Fe.fromFileStatus(e,i):void 0);for(const s of o)yield this.openDiffWith(i,{uri:s,sha:e.commit.sha},{uri:s,sha:""},t)})}openChangedFiles(e,t={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=k.filterMap(e.commit.fileStatuses,e=>Fe.fromFileStatus(e,i));for(const e of o)yield S(e,t)})}openChangedFileRevisions(e,t={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const i=k.filterMap(e.commit.fileStatuses,t=>Fe.toRevisionUri("D"===t.status?e.commit.previousFileSha:e.commit.sha,t,e.commit.repoPath));for(const e of i)yield S(e,t)})}openDiffWith(e,t,i,o={preserveFocus:!1,preview:!1}){return P.__awaiter(this,void 0,void 0,function*(){const s={repoPath:e,lhs:t,rhs:i,showOptions:o};return q.commands.executeCommand(Bt.DiffWith,s)})}openFileRevisionInRemote(e){return P.__awaiter(this,void 0,void 0,function*(){return q.commands.executeCommand(Bt.OpenFileInRemote,e.commit.toGitUri("D"===e.commit.status),{range:!1})})}terminalCheckoutBranch(e){return P.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof To))return;const t=`checkout ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)})}terminalCreateBranch(e){return P.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof To))return;const t=yield q.window.showInputBox({prompt:"Please provide a branch name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Branch name",value:e.branch.remote?e.branch.getName():void 0});if(void 0===t||""===t)return;const i=`branch ${e.branch.remote?"-t ":""}${t} ${e.branch.name}`;this.sendTerminalCommand(i,e.branch.repoPath)})}terminalDeleteBranch(e){if(!(e instanceof To))return;const t=e.branch.remote?`push ${e.branch.remote} :${e.branch.name}`:`branch -d ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)}terminalRebaseBranchToRemote(e){if(e instanceof To){if(!e.branch.current||!e.branch.tracking)return;const t=`rebase -i ${e.branch.tracking}`;this.sendTerminalCommand(t,e.branch.repoPath)}else if(e instanceof Ao){const t=`rebase -i ${e.status.upstream}`;this.sendTerminalCommand(t,e.status.repoPath)}}terminalSquashBranchIntoCommit(e){if(!(e instanceof To))return;const t=`merge --squash ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)}terminalRebaseCommit(e){if(!(e instanceof Ro))return;const t=`rebase -i ${e.commit.sha}^`;this.sendTerminalCommand(t,e.commit.repoPath)}terminalResetCommit(e){if(!(e instanceof Ro))return;const t=`reset --soft ${e.commit.sha}^`;this.sendTerminalCommand(t,e.commit.repoPath)}terminalRemoveRemote(e){if(!(e instanceof No))return;const t=`remote remove ${e.remote.name}`;this.sendTerminalCommand(t,e.remote.repoPath)}ensureTerminal(){return void 0===this._terminal&&(this._terminal=q.window.createTerminal(te),this._disposable=q.window.onDidCloseTerminal(e=>{e.name===te&&(this._terminal=void 0,this._disposable.dispose(),this._disposable=void 0)},this),this.context.subscriptions.push(this._disposable)),this._terminal}sendTerminalCommand(e,t){const i=this.ensureTerminal();i.show(!1),i.sendText(`git -C ${t} ${e}`,!1)}}class Bs{constructor(e,t){this.git=t}provideTextDocumentContent(e,t){return P.__awaiter(this,void 0,void 0,function*(){const t=Fe.fromRevisionUri(e);if(!t.repoPath||t.sha===Dt.deletedSha)return"";try{return yield this.git.getVersionedFileText(t.repoPath,t.fsPath,t.sha||"HEAD")}catch(e){return we.error(e,"GitContentProvider","getVersionedFileText"),void q.window.showErrorMessage(`Unable to show Git revision ${Dt.shortenSha(t.sha)} of '${xe.relative(t.repoPath,t.fsPath)}'`)}})}}Bs.scheme=re.GitLensGit;class Us extends q.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}class Ls extends q.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}class As{constructor(e,t){this.git=t}provideCodeLenses(e,t){return P.__awaiter(this,void 0,void 0,function*(){const t=Fe.fromRevisionUri(e.uri),i=[],o=yield this.git.getLogCommit(t.repoPath,t.fsPath,t.sha,{firstIfMissing:!0,previous:!0});return void 0===o?i:(o.previousSha&&i.push(new Ls(o.previousUri.fsPath,o,new q.Range(0,0,0,1))),i.push(new Us(o.uri.fsPath,o,new q.Range(0,1,0,2))),i)})}resolveCodeLens(e,t){return e instanceof Us?this._resolveDiffWithWorkingTreeCodeLens(e,t):e instanceof Ls?this._resolveGitDiffWithPreviousCodeLens(e,t):Promise.reject(void 0)}_resolveDiffWithWorkingTreeCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Working`,command:Bt.DiffWithWorking,arguments:[q.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}_resolveGitDiffWithPreviousCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Previous (${e.commit.previousShortSha})`,command:Bt.DiffWithPrevious,arguments:[q.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}}As.selector={scheme:re.GitLensGit},t.activate=function(e){return P.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();we.configure(e),ls.configure(e);const i=q.extensions.getExtension(ie).packageJSON.version,s=ds.get();try{yield Dt.initialize(s.advanced.git)}catch(e){return we.error(e,`GitLens(v${i}).activate`),e.message.includes("Unable to find git")&&(yield q.window.showErrorMessage(`GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that '${J}.${ds.name("advanced")("git").value}' is pointed to its installed location.`)),void o(se.Enabled,!1)}const r=Dt.getGitVersion(),n=e.globalState.get(ae.GitLensVersion);yield function(e,t){return P.__awaiter(this,void 0,void 0,function*(){if(void 0===t)return;const i=K.fromString(t);try{if(1!==K.compare(i,K.from(6,1,2)))try{const t=ds.name("advanced")("messages").value,i=ds.get(t);let o=!1;for(const t of F.values(Ht)){const s=e.globalState.get(t);void 0!==s&&(o=!0,i[t]=s,e.globalState.update(t,void 0))}if(!o)return;yield ds.update(t,i,q.ConfigurationTarget.Global)}catch(e){we.error(e,"migrateSettings - messages")}if(1!==K.compare(i,K.from(7,1,0))){const e=ds.name("advanced")("quickPick")("closeOnFocusOut").value,t=ds.inspect(e);void 0!==t&&(void 0!==t.globalValue?yield ds.update(e,!t.globalValue,q.ConfigurationTarget.Global):void 0!==t.workspaceFolderValue&&(yield ds.update(e,!t.workspaceFolderValue,q.ConfigurationTarget.WorkspaceFolder)))}}catch(e){we.error(e,"migrateSettings")}})}(e,n),function(e,t){P.__awaiter(this,void 0,void 0,function*(){Dt.validateGitVersion(2,2)||(yield jt.showUnsupportedGitVersionErrorMessage(t))})}(0,r),function(e,t,i){P.__awaiter(this,void 0,void 0,function*(){if(ds.get(ds.name("advanced")("messages")(Ht.UpdateNotice).value))return;if(void 0===i)return we.log("GitLens first-time install"),void(yield jt.showWelcomeMessage());i!==t&&we.log(`GitLens upgraded from v${i} to v${t}`);const[e,o]=t.split("."),[s,r]=i.split(".");e===s&&o===r||e<s||e===s&&o<r||(yield jt.showUpdateMessage(t))})}(0,i,n),e.globalState.update(ae.GitLensVersion,i);const a=new Dt;e.subscriptions.push(a);const h=new bt(a);e.subscriptions.push(h);const c=new $s(e,a,h);e.subscriptions.push(c);const l=new Es(e,a,h,c);e.subscriptions.push(l);const d=new ks(e,a,h);e.subscriptions.push(d),e.subscriptions.push(q.workspace.registerTextDocumentContentProvider(Bs.scheme,new Bs(e,a))),e.subscriptions.push(q.languages.registerCodeLensProvider(As.selector,new As(e,a)));const u=new Ns(e,a);e.subscriptions.push(u),e.subscriptions.push(q.window.registerTreeDataProvider("gitlens.gitExplorer",new es(e,u,a,h))),e.subscriptions.push(q.window.registerTreeDataProvider("gitlens.resultsExplorer",new oi(e,u,a))),e.subscriptions.push(new Jt),function(e,t,i,o,s){e.subscriptions.push(q.commands.registerTextEditorCommand("gitlens.computingFileAnnotations",()=>{})),e.subscriptions.push(new Gt(t)),e.subscriptions.push(new zi(t)),e.subscriptions.push(new qi(t)),e.subscriptions.push(new Vt(t)),e.subscriptions.push(new Kt(t)),e.subscriptions.push(new Li(t)),e.subscriptions.push(new Ai(t)),e.subscriptions.push(new Oi(t)),e.subscriptions.push(new Wi(t)),e.subscriptions.push(new Mi(t)),e.subscriptions.push(new Ii(t)),e.subscriptions.push(new Hi(t)),e.subscriptions.push(new ji(t)),e.subscriptions.push(new Gi(t)),e.subscriptions.push(new Yi(t)),e.subscriptions.push(new Xi(t)),e.subscriptions.push(new Zi(t)),e.subscriptions.push(new Ji(t)),e.subscriptions.push(new eo(i,t)),e.subscriptions.push(new to),e.subscriptions.push(new io(t)),e.subscriptions.push(new oo(i,t)),e.subscriptions.push(new Mt(i)),e.subscriptions.push(new ho(i)),e.subscriptions.push(new lo(o)),e.subscriptions.push(new xo(i)),e.subscriptions.push(new So(i)),e.subscriptions.push(new $o(i)),e.subscriptions.push(new Do(o)),e.subscriptions.push(new so),e.subscriptions.push(new co),e.subscriptions.push(new uo(t)),e.subscriptions.push(new po(t)),e.subscriptions.push(new mo(t)),e.subscriptions.push(new go(t)),e.subscriptions.push(new ao(t)),e.subscriptions.push(new fo(t)),e.subscriptions.push(new vo(t)),e.subscriptions.push(new wo(t)),e.subscriptions.push(new Co(t)),e.subscriptions.push(new bo(t)),e.subscriptions.push(new yo(t)),e.subscriptions.push(new _o(s))}(e,a,c,l,d),setTimeout(()=>o(se.GitExplorer,!0),1e3);const m=process.hrtime(t);we.log(`GitLens(v${i}) activated in ${1e3*m[0]+Math.floor(m[1]/1e6)} ms`)})},t.deactivate=function(){}},function(e,t){e.exports=require("date-fns")},function(e,t){e.exports=require("date-fns/locale/en")},function(e,t){e.exports=require("lodash.debounce")},function(e,t){e.exports=require("lodash.once")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("iconv-lite")},function(e,t){e.exports=require("tmp")}]);