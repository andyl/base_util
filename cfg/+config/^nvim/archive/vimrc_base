" === VIMRC_BASE

" === CLEAN UP JUNK DATA FILE
autocmd VimLeave * if filereadable(expand("~/.vim/.netrwhist"))|call delete(expand("~/.vim/.netrwhist"))|endif 

" === TOGGLELIST
let g:toggle_list_no_mappings = 1

" nmap <script> <silent> <leader>l :call ToggleLocationList()<CR>
" nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>

" ----- GoTo Definition
nmap <silent> \ge :call CocAction('jumpDefinition')<CR>
nmap <silent> \gs :call CocAction('jumpDefinition', 'split')<CR>
nmap <silent> \gv :call CocAction('jumpDefinition', 'vsplit')<CR>
nmap <silent> \gt :call CocAction('jumpDefinition', 'tabe')<CR>

nmap <silent> \gr <Plug>(coc-references)

nmap <silent> \an <Plug>(coc-diagnostic-next)
nmap <silent> \ap <Plug>(coc-diagnostic-prev)
nmap <silent> \aN <Plug>(coc-diagnostic-next-error)
nmap <silent> \aP <Plug>(coc-diagnostic-prev-error)
nmap <silent> \ah :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" code formatting
nmap <leader>f :call CocAction('format')<cr>

" see also: refactoring
nnoremap <leader>rn :call CocAction('rename')<CR>

" === PROJECTIONIST
nmap <leader>ae :A<cr>
nmap <leader>av :AV<cr>
nmap <leader>as :AS<cr>
nmap <leader>at :AT<cr>

" ----- Phoenix Navigation

" related view
nmap \rve :wa<cr>:Eview<cr>
nmap \rvt :wa<cr>:Tview<cr>
nmap \rvs :wa<cr>:Sview<cr>
nmap \rvv :wa<cr>:Vview<cr>

" related controller
nmap \rce :wa<cr>:Econtroller<cr>
nmap \rct :wa<cr>:Tcontroller<cr>
nmap \rcs :wa<cr>:Scontroller<cr>
nmap \rcv :wa<cr>:Vcontroller<cr>

" related live
nmap \rle :wa<cr>:Elive<cr>
nmap \rlt :wa<cr>:Tlive<cr>
nmap \rls :wa<cr>:Slive<cr>
nmap \rlv :wa<cr>:Vlive<cr>

" related phoenix template - brings up a FuzzyFinder
" open in a related split/vsplit/tab with C-s/C-v/C-t
nmap \rt  :wa<cr>:exec("Ftemplate ".split(expand("%:t:r"), "_")[0])<cr>

" === FZF - fast file finding

" set max length for the mru file list
let g:fzf_mru_file_list_size = 10 " 10 is default value

" key bindings to open file in split window
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit' }

" Search directory names, open in NERDTree
com! FzNerdTree call fzf#run({'down': 10, 'source': 'fd -t d -d 5', 'sink': 'NERDTreeFind'})

" Search for related views, controllers, templates, live-handlers
com! FzRview call fzf#run({'down': 10, 'source': 'fd view -E test', 'sink': 'e'})
com! FzRcont call fzf#run({'down': 10, 'source': 'fd controller -E test', 'sink': 'e'})
com! FzRtmpl call fzf#run({'down': 10, 'source': 'fd template -E test', 'sink': 'e'})
com! FzRlive call fzf#run({'down': 10, 'source': 'fd live -E test', 'sink': 'e'})

" ----- FZF keymappings

nmap \fv :FzRview<cr>
nmap \fc :FzRcont<cr>
nmap \ft :FzRtmpl<cr>
nmap \fl :FzRlive<cr>

" after you search with `Rg`, you can multi-file select with `shift-tab`, put
" the selected into a quick-fix with `enter`, then use `cdo`...
nmap \fr   :wa<CR>:<C-u>Rg<CR> 

nmap <C-p> :wa<CR>:<C-u>FZF<CR>
nmap <C-m> :wa<CR>:<C-u>FZFMru<CR>
nmap <C-e> :wa<CR>:<C-u>FzNerdTree<CR>

" === TELESCOPE

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" === MATCHIT
runtime macros/matchit.vim

" === ABBREV / TYPO FIXES
abbrev teh the
abbrev tihs this

" === WEB PREVIEW
command! Preview :!firefox %<cr>

" === WRITE THE CURRENT BUFFER, THEN CLOSE IT
command! Wc write|bdelete

" === CURSORLINE
" note: cursorline also set in the `focus` function
set nocursorline
set nocursorcolumn
nmap <F2> :set cursorline! cursorline?<cr>
imap <F2> <esc>:set cursorline! cursorline?<cr>i<right>

" === SEARCH AND REPLACE
" 1) search for a pattern
" 2) hit F3 then type the replacement
vmap <F3> :s///g<left><left>
nmap <F3> :%s///g<left><left>

" === SEARCH HIGHLIGHT
" search for selected text, forwards or backwards
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" === MODE TRANSITION
" escape keystrokes / insert mode -->> normal mode
autocmd InsertLeave * :normal `^
imap kk <esc>
imap kj <esc>
imap jk <esc>
imap jj <esc>
imap :w <esc>:w
imap :q <esc>:q

" === MOVE LINE UP/DOWN
" nmap <A-Up> [e
" nmap <A-Down> ]e

" === MOVE REGION UP/DOWN
" vmap <A-Up> [egv
" vmap <A-Down> ]egv

" === FOR EDITING HELP OUTLINES - OPENS TARGET FILE IN VERTICAL SPLIT WINDOW
map <F8> :vertical wincmd f<CR>

" === AUTORUN - autoexec vim script on VimEnter
function! LoadAutorun()
  if filereadable(getcwd() . '/.autorun.vim')
    exec "source " . getcwd() . "/.autorun.vim"
  endif
endfunction

autocmd VimEnter * call LoadAutorun()

" === INDENTATION AND TABS
filetype plugin indent on
set softtabstop=2
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set backspace=start,indent

" === MARKDOWN
" tpope/markdown highlights in underscore in snake_case words
" jtratner/vim-flavored-markdown fixes this
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" === FORMATTING AND PAGINATION

" Underline the current line 
nmap <leader>u yyp<c-v>$r-
nmap <leader>U yyp<c-v>$r=

" Insert header line
nmap <leader>h o<Esc>65i-<Esc>
nmap <leader>H o<Esc>65i=<Esc>

" Pagination helpers (for putting page breaks in text printouts)
nmap <leader>pc gg:%s///g<cr>gg
nmap <leader>ps /<cr>zz
nmap <leader>pd 73jzz
nmap <leader>pi i<esc>

" === PRINT COMMANDS
nmap <leader>pp :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 %<cr>
nmap <leader>p1 :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --portrait  --columns=1 --font-size=9 %<cr>
nmap <leader>pl :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --landscape --columns=1 --font-size=9 %<cr>

" === VIM TEST
nmap \tn :wa<cr>:TestNearest<cr>
nmap \tf :wa<cr>:TestFile<cr>
nmap \ts :wa<cr>:TestSuite<cr>
nmap \tl :wa<cr>:TestLast<cr>

" === ACK.VIM 
nmap <leader>k :Ack 
let g:ackprg = 'rg --vimgrep --no-heading'

" === NERD TREE
let g:NERDTreeMapOpenVSplit = "v"
let g:NERDTreeMapOpenSplit  = "s"
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeSortHiddenFirst = 1
let g:NerdTreeIdle = 1

" returns true iff is NERDTree open/active
function! s:IsNTOpen()        
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! <SID>ToggleNerd()
  let g:NerdTreeIdle = 0
  if s:IsNTOpen() || strlen(expand('%')) == 0
    NERDTreeToggle
  else
    NERDTreeFind
  endif
  let g:NerdTreeIdle = 1
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a
" modifiable file, and we're not in vimdiff

function! <SID>SyncTree()
  if g:NerdTreeIdle && &modifiable && s:IsNTOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

nnoremap <silent> <leader>e :call <SID>ToggleNerd()<cr>

autocmd BufEnter * call <SID>SyncTree()

" === ViMux
function! s:IsVimuxOpen()
  return exists("g:VimuxRunnerIndex")
endfunction

function! <SID>ToggleVimuxTerminal()
  if s:IsVimuxOpen()
    call VimuxCloseRunner()
  else
    call VimuxRunCommand("clear")
  endif
endfunction

nnoremap <silent> <leader>c :call <SID>ToggleVimuxTerminal()<cr>

" === VIM EASY ALIGN
vmap at :EasyAlign *\|<cr>
vmap ac <Plug>(EasyAlign)
nmap ac <Plug>(EasyAlign)

" at = align table
" usage: vipat
" ac = align character
" usage: vipac=

let g:easy_align_delimiters = {
\  '^': {'pattern': ',', 'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0}
\}

" === SURROUND CUSTOMIZATION
" Select text in an ERb file with visual mode and then press s- or s=
" Or yss- to do entire line.
autocmd FileType eruby let g:surround_45 = "<% \r %>"    " -
autocmd FileType eruby let g:surround_61 = "<%= \r %>"   " =
autocmd FileType ruby  let g:surround_35  = "#{\r}"      " #

nmap vm' F'vf'
nmap vm" F"vf"

" === PANE ZOOMING
nmap <leader>z <C-w>o
vmap <leader>z <C-w>o

" === BUFFER MANIPULATION 

" switch to buffer 5 by typing 5<CR>
" delete buffer 5 by typing d5<CR>

nmap <leader>bb :ls<cr>:b

nmap <leader>bn :bnext<cr>
nmap <leader>bp :bprev<cr>
nmap <leader>bd :bd<cr>
nmap <leader>bx :bd<cr>

" === LISTS  

" let g:syntastic_is_open = 0  
" function! ToggleSyntasticList()
"   if g:syntastic_is_open == 1
"       lclose
"       let g:syntastic_is_open = 0 
"   else
"       Errors
"       let g:syntastic_is_open = 1 
"   endif
" endfunction
"
" let g:toggle_list_no_mappings=1
" nmap <F6> :SyntasticToggleMode<cr>
" nmap <F7> :SyntasticCheck<cr>
" nmap <F8> :call ToggleSyntasticList()<cr>
" nmap <F9> :call ToggleQuickfixList()<cr>

" === SYNTASTIC 
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_enable_elixir_checker = 1
" let g:syntastic_elixir_checkers = ['elixir']
" let g:syntastic_ruby_checkers = ['rubocop']
" let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_mode_map = {'mode': 'passive'}
"
" nmap <leader>sn :lnext<cr>
" nmap <leader>sp :lprev<cr>

" === ENCODING
if !exists('g:encoding_set')
  set encoding=utf-8
endif
let g:encoding_set=1

" === TERM-SPECIFIC ITEMS 
if exists('$TMUX')
  if !has('nvim')
    set term=screen-256color
  endif
endif

" === CURSOR CUSTOMIZATION
" http://vim.wikia.com/wiki/Change_cursor_color_in_different_modes
" http://stackoverflow.com/questions/6488683/how-do-i-change-the-vim-cursor-in-insert-normal-mode
" https://jonasjacek.github.io/colors/
" cursor shapes (where N = \033[N q): 
"   1 -> blinking block 
"   2 -> solid block 
"   3 -> blinking underscore 
"   4 -> solid underscore
"   5 -> blinking bar
"   6 -> solid bar
" test cursor shapes -> echo -ne "\e[5 q"
" test cursor colors -> echo -ne "\e]12;green\x7"

" Terminator terminal
if &term == "xterm-256color"  " xterms are gnu-term and terminator
  let &t_SI = "\e[5 q"      " when entering insert mode
  let &t_SR = "\e[3 q"      " when entering replace mode
  let &t_EI = "\e[2 q"      " when entering normal mode
  set mouse=a
endif

" Tmux settings
" See https://gist.github.com/1973419 (this works)
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
if &term == 'screen-256color'                                   " TMUX
  let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"                 " when entering replace mode
  let &t_SR = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"                 " when entering replace mode
  let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"                 " when entering replace mode
  nmap [1;5A [e
  nmap [1;5B ]e
  vmap [1;5A [egv
  vmap [1;5B ]egv
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif
 
" NeoVim
" https://github.com/neovim/neovim/wiki/FAQ#how-can-i-change-the-cursor-~"hape-in-the-terminal
if &term == "nvim" 
  set guicursor=i:ver25-iCursor
endif

" See http://arniealmighty.wordpress.com for screen/cursor color notes
" (doesn't seem to be working)
if &term == 'screen'                            " GNU Screen 
  let &t_SI = "\033P\033]12;green\007\033\\"    " when entering insert mode
  let &t_EI = "\033P\033]12;white\007\033\\"    " when entering normal mode
endif

" === REFACTORING

" Find pattern to matching end, flags as per :h search()
function! <SID>get_range_for_block(pattern_start, flags)
  if !exists("g:loaded_matchit") 
    throw("matchit.vim required")
  endif
  let cursor_position = getpos(".")
  let block_start = search(a:pattern_start, a:flags)
  if (match(getline("."), "^\\s*it\\s\\+") == 0)
    normal $
  endif
  normal %
  let block_end = line(".")
  call setpos(".",cursor_position) 
  return [block_start, block_end]
endfunction

" Loop over the line range given, global replace pattern with replace
function! <SID>gsub_all_in_range(start_line, end_line, pattern, replace)
  let lnum = a:start_line
  while lnum <= a:end_line
    let oldline = getline(lnum)
    let newline = substitute(oldline,a:pattern,a:replace,'g')
    call setline(lnum, newline)
    let lnum = lnum + 1
  endwhile
endfunction

" refactor extract
" v~,re
function! <SID>RefactorExtract()
  let varname = input('Variable name? ')
  if varname != ''
    execute "normal gvc".varname."\<ESC>O\<C-A> = \<ESC>p0"
  endif
endfunction

vnoremap <leader>re :call <SID>RefactorExtract()<CR>

" refactor inline
" <hover over variable>,ri
function! <SID>RefactorInline()
  " Copy the variable under the cursor into the 'a' register
  normal "ayiw
  " 4 diws to get the variable, = sign and whitespace
  normal 4diw
  " Copy the value into the 'b' register
  normal "bd$
  " Delete the remnants of the line
  normal dd
  " Store current line, that's where we will start searching from
  let current_line = line(".")
  " Find the start and end of the current block
  let [blk_start, blk_end] = <SID>get_range_for_block('\<def\|it\>','Wb')
  " Rename the variable within the range of the block
  call <SID>gsub_all_in_range(current_line, blk_end, '\<' . @a . '\>', @b)
endfunction

nnoremap <leader>ri :call <SID>RefactorInline()<CR>

" === TELESCOPE

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" === MISC
set lazyredraw

" === MOUSE
set mouse=a

" === COLORSCHEMES
let g:gruvbox_contrast_dark='hard'
set background=dark
colorscheme gruvbox

" === TERMINAL 
autocmd BufWinEnter,WinEnter term://* startinsert
autocmd BufLeave             term://* stopinsert

" turn off line numbers in terminal mode
augroup TerminalStuff
  au! 
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

" terminal navigate
tnoremap <c-h> <C-\><C-n><C-w>h
tnoremap <c-j> <C-\><C-n><C-w>j
tnoremap <c-k> <C-\><C-n><C-w>k
tnoremap <c-l> <C-\><C-n><C-w>l

" easily escape terminal
tnoremap <leader><esc> <C-\><C-n>

" toggle terminal
nmap <leader>tv :vertical botright Ttoggle<cr><C-w>l
nmap <leader>ts :rightbelow Ttoggle<cr><C-w>j

" disable python2 provider
let g:loaded_python_provider=0

" === ZOOM STATE ON STATUS LINE
fun! SetZoomState()
  if g:airline_section_y != "ZOOM"
    let g:orig_zoom_state = g:airline_section_y
    let g:airline_section_y = "ZOOM"
    let g:airline_theme     = 'light'
  else
    let g:airline_section_y = g:orig_zoom_state
    let g:airline_theme = 'luna'
    let g:orig_zoom_state = ""
  endif
  AirlineRefresh
  AirlineRefresh
endfun

if !exists("g:ZoomWinFuncRef")
  let g:ZoomWinFuncRef = function("SetZoomState")
endif

" === VIM-AIRLINE 
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_theme = 'papercolor'
let g:airline_symbols_ascii = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#bufferline#enabled = 0
nmap <leader>1 :bl\|1bn<cr>
nmap <leader>2 :bl\|2bn<cr>
nmap <leader>3 :bl\|3bn<cr>
nmap <leader>4 :bl\|4bn<cr>
nmap <leader>5 :bl\|5bn<cr>
nmap <leader>6 :bl\|6bn<cr>
nmap <leader>7 :bl\|7bn<cr>
nmap <leader>8 :bl\|8bn<cr>
nmap <leader>9 :bl\|9bn<cr>

