# Startup file for bash - goes in the user home directory 
###########################################################################

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:~/.bin:~/.local/bin:~/var/data/bin/$(uname -m)

###########################################################################

# sudo timedatectl set-timezone <tz> -> updates /etc/timezone
#      timedatectl                   -> shows timezone
#      date                          -> shows time
export TZ="America/Los_Angeles"

###########################################################################

function sourcefile() {
  tgt=$1
  [ -f $1 ] && source $1
}

sourcefile ~/.rails_env
sourcefile ~/.bashu_aliases
sourcefile ~/.bashu_functions
sourcefile ~/.bashu_marks

###########################################################################
# BASE UTIL
sourcefile ~/.util_dir            # define $UTIL_DIR
sourcefile ~/.util_path           # define $UTIL_PATH
export PATH=$UTIL_PATH:$PATH      # setup util PATH 

###########################################################################
# CODE AND DATE UTIL
sourcefile ~/.bashrc_code
sourcefile ~/.bashrc_date

###########################################################################
# NPM
export PATH=$PATH:~/.npm-global/bin:./node_modules/.bin    

###########################################################################
# BUGMARK
alias bmg=bugmark_graphql

###########################################################################
# VBOXMANAGE
alias vbm=vboxmanage

###########################################################################
# ELIXIR/ERLANG
export ERL_AFLAGS="-kernel shell_history enabled"
export ELIXIR_EDITOR="code"
export PATH=$PATH:~/.mix/escripts             # setup escript path
alias   ie="iex -pa ~/.iex 2> /dev/null"
alias  iex="iex -pa ~/.iex 2> /dev/null"
alias iexm="iex -pa ~/.iex -S mix 2> /dev/null"
alias   mc="mix compile"
alias   mt="mix test"
alias   mr="mixrun"

alias mat="mix atree"

###########################################################################
# LEDGER

alias le=ledger

function ledenv() {
  ARG=$1
  if [[ "$ARG" == "pers" || "$ARG" == "bugm" ]]; then
    export LEDGER_FN=${ARG}
    export LEDGER_FILE=~/util/org/ledger/data/${ARG}.ldg
  else
    echo "Usage: ledenv < pers | bugm > (currently '${LEDGER_FN}')"
  fi
}

ledenv pers

###########################################################################
# GO
mkdir -p ~/.go
export GOPATH=~/.go
export PATH=$PATH:$GOPATH/bin

###########################################################################
# ANDROID STUDIO
export ANDROID_HOME=~/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

###########################################################################
# RUST
export PATH=$PATH:~/.cargo/bin

###########################################################################
# FZF
export FZF_DEFAULT_COMMAND='rg --files --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort'"
alias fz="fzf --preview 'bat --color \"always\" {}'"

fzf_kill() {
    local pids=$(
      ps -f -u $USER | sed 1d | fzf --multi | tr -s [:blank:] | cut -d' ' -f3
      )
    if [[ -n $pids ]]; then
        echo "$pids" | xargs kill -9 "$@"
    fi
}

alias fkill='fzf_kill'

###########################################################################
# HOST ARCHITECTURE, ID and OS
#
# armv6l is 32-bit (arm32)  (RPi0)
# armv7l is 32-bit (arm32)  (RPi4 and Odroid XU4)
# armv8l is 64-git (arm64)
# armhf: 32-bit (Beaglebone)
# armel: 32-bit

# | COMMAND      | EXAMPLE | ANSIBLE VARIABLE             |
# |--------------|---------|------------------------------|
# | host_arch    | x86_64  | ansible_architecture         |
# | host_dist    | Ubuntu  | ansible_distribution         |
# | host_relvsn  | 18.04   | ansible_distribution_version |
# | host_relname | bionic  | ansible_distribution_release |

alias host_id="hostnamectl"
alias host_os="lsb_release -a 2> /dev/null"
alias host_dist="lsb_release -a 2> /dev/null | grep Distributor | cut -f 2 | tr '[:upper:]' '[:lower:]'"
alias host_relvsn="lsb_release -a 2> /dev/null | grep Release | cut -f 2"
alias host_relname="lsb_release -a 2> /dev/null | grep Codename | cut -f 2"
alias host_arch="uname -m"
alias host_cpu="lscpu"
alias host_mem="free"
alias host_disk="df"
alias portview="sudo ss -tulpn"

###########################################################################
# VIM / NEOVIM / NVIM / NV

# use VI in terminal...
# set -o vi

# use for .vimrc and plugin testing
# restart vim by simply ":qa!"
# terminate cycle by killing console...
vimcycle() {
  if [ -z "$1" ]; then
    echo "Usage: vimcycle <file>"
    return 1
  fi
  in_tmux && while [ true ] ; do nvim $1 ; done
}

###########################################################################
# TMUX / TMUXINATOR / TMATE

# check for active TMUX session
no_tmux() {
  if [ -n "$TMUX" ]; then
    echo "Live TMUX Session!!!"
    return 1
  fi
}

in_tmux() {
  if [ -z $TMUX ]; then
    echo "TMUX NOT STARTED!"
    return 1
  fi
}

# return 0 (true) if $TMUX contains 'tmux', otherwise 1 (false)
live_tmux() {
  return $(echo $TMUX | grep tmux > /dev/null) 
}

# return 0 (true) if $TMUX contains 'tmate', otherwise 1 (false)
live_tmate() {
  return $(echo $TMUX | grep tmate > /dev/null) 
}

alias  tm="tmux"   
alias  tmnew="tmux new -s"

# see below: terminator aliases 'tn', 'ts' and 'tv'
alias tts="in_tmux && tm split-window -v -c '#{pane_current_path}'"  # tmux tab split
alias ttv="in_tmux && tm split-window -h -c '#{pane_current_path}'"  # tmux tab split vert
alias ttn="in_tmux && tm new-window -c '#{pane_current_path}'"       # tmux tab new

tmr() {
  no_tmux && tm new \; send "$*" C-m \; attach
}

# note also: ~/.complete has completions for tmux and tmuxinator

# show the links that others can use to join the sharing session
alias tmate-links="tmate show-messages | grep -v clear | grep -v ssh.tmate.io | cut -d ' ' -f 1-6 --complement"

sessionkey () {
  tmate show-messages | grep 'ssh session:' | cut -d ' ' -f10 | tee >(xclip -selection clipboard)
}

###########################################################################
# NordVPN

alias vpn=nordvpn

###########################################################################
# CLI Utils

###########################################################################
# BUILDROOT
# utility to create embedded system images

buildroot-install() {
  BUILDROOT_VERSION="2017.02.1"
  if [ -n "$(ls -A .)" ]
  then
    echo "ERROR: current directory must be empty!"
    return 1
  else
    echo "INSTALLING BUILDROOT"
    wget https://buildroot.org/downloads/buildroot-$BUILDROOT_VERSION.tar.gz
    tar xf *gz
    rm *gz
    mv buildroot-$BUILDROOT_VERSION/* .
    mv buildroot-$BUILDROOT_VERSION/.* . 2> /dev/null
    rmdir buildroot-$BUILDROOT_VERSION
    echo "--------------------------------------------------------------"
    echo "current BR Version: $BUILDROOT_VERSION (defined in .bashrc)"
    echo "find latest BR version at https://buildroot.org/download.html"
    echo "BR docs at https://buildroot.org/docs.html"
    echo "now you can run '> make menuconfig'..."
  fi
}

###########################################################################
# MISC 
tgt=~/.java_env ; [ -f $tgt ] && source $tgt     # source java support

###########################################################################
# ESCAPE KEY SWAPPING
# `caps:none`       (no swap)
# `caps:escape`     (caps becomes another escape key)
# `caps:swapescape` (swap cap lock and escape)

function kb_caps_none() {
  setxkbmap -option caps:none 
}

function kb_caps_escape() {
  setxkbmap -option caps:escape 
}

function kb_caps_swapescape() {
  setxkbmap -option caps:swapescape 
}

function kb_clear() {
  setxkbmap -option
}

function kb_query() {
  setxkbmap -query
}

# works with VORTEX keyboard
# kb_caps_escape 2> /dev/null

# works with K380 keyboard
kb_caps_swapescape 2> /dev/null


###########################################################################
# FUNCTIONS

function path() {                    # show path elements, one per line
  IFS=:
  printf "%s\n" $PATH | tr -d \,
}

function ap() {          # Run Ansible
  ansible-playbook "$@"
  rm -f *retry
  play ding
}

###########################################################################
# ALIASES

alias xx="exit"                  # kill the shell...
alias xss="xfce4-screenshooter"  # screen shot

alias sc="sudo systemctl"        # systemd job control
alias jc="sudo journalctl"       # systemd log viewer

alias  va="vagrant"
alias  an="ansible"

alias  be="bundle exec"
alias ber="bundle exec rails"
alias  rt="bundle exec rails -T"

alias visudo="sudo EDITOR=vim visudo"

alias  h="history | tail -30"
alias  H="history"
alias hg="history | tail -30 | grep"
alias Hg="history | grep"
alias HG="history | grep"

alias  g="git"
alias  t="thor"
alias  r="rails"

alias  sp="spring"
alias brl="spring rails"
alias brc="spring rails console"
alias brk="spring rake"
alias brs="spring rspec"

alias gopen="gio open"

alias kar="killall -9 ruby ; pkill -f spring"
alias kan="killall -9 node"
alias kac="killall -9 code ; killall -9 code"

alias mm="middleman"
alias update="sudo apt-get update ; sudo apt-get upgrade -y -q"

alias cy="crystal"

alias jek="jekyll"
alias bej="bundle exec jekyll"
alias bejek="bundle exec jekyll"

###########################################################################
# DOCKER

alias dk="docker"
alias dkc="docker-compose"
alias dklz="lazydocker"
alias dkhs="docker search --limit 5 --format 'table {{.Name}}\t{{.Description}}\t{{.StarCount}}'"
alias dkps="docker ps -a --format 'table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}'"
alias dkls="docker images"
alias dkrm="docker rmi --force "

# start bash shell for a container
function dksh() {
  if [ $# != 1 ]; then
    echo "Usage: dksh <container_name>"
    echo "Start a bash shell in container"
  else
    name=$1
    docker exec -it $name bash
  fi
}

###########################################################################
# DIRECTORY PUSH/POP

# prevents duplicate paths from filling up the pushd stack  
function pushdp
{
  if [ -z "$1" ]; then 
    pushd
  else
    stack=`dirs` ; IFS=' ' ; idx=0 ; pos=0 ; src=`readlink -f $1`
    for path in $stack ; do
      tgt=`eval echo $path`    # expand ~ character...
      if [ "$src" == "$tgt" ]; then
        pos=$idx      
      fi
      ((idx++))
    done
    if [ "$pos" == "0" ]; then
      pushd $1
    else
      pushd +$pos       
    fi
  fi
}

ph () {
  echo " PUSHD/POPD ALIASES"
  echo " ph - Help (this command!)"
  echo " pd - Display stack"
  echo " pa - Add directory to stack"
  echo " px - Remove directory from stack"
  echo " pc - Clear stack"
  echo " pb - go Back on the stack"
  echo " pf - go Forward on the stack"
  echo " pg <dir> - go to a directory (full path)"
  echo " g<num> - go to the Nth dir on the stack"
}

alias pd='dirs -v'            # display stack
alias pa='pushdp'             # add directory to stack
alias px='popd'               # remove directory from stack 
alias pc='dirs -c ; dirs -v'  # clear stack 
alias pb='pushd +1'           # go back on the stack
alias pf='pushd -0'           # go forward on the stack
alias pg='pushdp'             # go to a directory
alias g0='cd ~0'              # go to the Nth dir on the stack 
alias g1='cd ~1'              # go to the Nth dir on the stack 
alias g2='cd ~2'              # go to the Nth dir on the stack 
alias g3='cd ~3'              # go to the Nth dir on the stack 
alias g4='cd ~4'              # go to the Nth dir on the stack 
alias g5='cd ~5'              # go to the Nth dir on the stack 
alias g6='cd ~6'              # go to the Nth dir on the stack 
alias g7='cd ~7'              # go to the Nth dir on the stack 
alias g8='cd ~8'              # go to the Nth dir on the stack 
alias g9='cd ~9'              # go to the Nth dir on the stack 

alias gdk='pushdp ~/dks'

alias  gu='pushdp $UTIL_DIR'
alias gua='pushdp $UTIL_DIR/air_util'
alias gub='pushdp $UTIL_DIR/base_util'
alias guc='pushdp $UTIL_DIR/code_util'
alias gud='pushdp $UTIL_DIR/date_util'
alias gue='pushdp $UTIL_DIR/elix_util'
alias gun='pushdp $UTIL_DIR/notes'
alias guo='pushdp $UTIL_DIR/org'
alias gux='pushdp $UTIL_DIR/x-ansible'

alias guad='pushdp $UTIL_DIR/air_util/dags'

alias gubb='pushdp $UTIL_DIR/base_util/bin'
alias gubc='pushdp $UTIL_DIR/base_util/cfg'

alias gucb='pushdp $UTIL_DIR/code_util/bin'
alias gucc='pushdp $UTIL_DIR/code_util/cfg'
alias guci='pushdp $UTIL_DIR/code_util/inc'
alias guce='pushdp $UTIL_DIR/code_util/exs'
alias gucg='pushdp $UTIL_DIR/code_util/gems'
alias gucs='pushdp $UTIL_DIR/code_util/shards'

alias guoc='pushdp $UTIL_DIR/org/cheats'
alias guog='pushdp $UTIL_DIR/org/gtd'
alias guol='pushdp $UTIL_DIR/org/ledger'
alias guon='pushdp $UTIL_DIR/org/notes'
alias guos='pushdp $UTIL_DIR/org/standup'
alias guow='pushdp $UTIL_DIR/org/worklog'

alias gudb='pushdp $UTIL_DIR/date_util/bin'
alias gudc='pushdp $UTIL_DIR/date_util/cfg'

alias   gv='pushdp ~/var'
alias  gvb='pushdp ~/var/backup'
alias  gvc='pushdp ~/var/cache'
alias  gvd='pushdp ~/var/data'
alias gvdb='pushdp ~/var/data/bin'
alias gvdc='pushdp ~/var/data/cblob'
alias  gvi='pushdp ~/var/iso'
alias  gvs='pushdp ~/var/seed'

alias gvvm='pushdp ~/vvm'

alias  gl='pushdp ~/lib'
alias  gr='pushdp ~/rel'

alias  gs='pushdp ~/src'
alias gsp='pushdp ~/src/BAMRU-Private'
alias gsl='pushdp ~/src/lica'
alias gsb='pushdp ~/src/bugmark'
alias gse='pushdp ~/src/ext'
alias gsR='pushdp ~/src/REL'
alias gsbe='pushdp ~/src/bugmark/exchange'
alias gsbw='pushdp ~/src/bugmark/website'
alias gsbi='pushdp ~/src/bugmark/iora'
alias gsbt='pushdp ~/src/bugmark/test_bench'
alias gsbs='pushdp ~/src/bugmark/sandbox'
alias gsc='pushdp ~/src/casmacc'
alias gscn='pushdp ~/src/casmacc/nginx_proxy'
alias gsch='pushdp ~/src/casmacc/html_helloworld'
alias gscs='pushdp ~/src/casmacc/static_helloworld'
alias gscp='pushdp ~/src/casmacc/phoenix_helloworld'

alias  gdl='pushdp ~/dl'
alias  gzz='pushdp ~/zz'

alias   ga='pushdp ~/.ansible'
alias  gai='pushdp ~/.ansible/inventory'
alias  gap='pushdp ~/.ansible/playbooks'
alias gapl='pushdp ~/.ansible/playbooks/library'
alias gapr='pushdp ~/util/x-ansible/roles'

alias ba="cd .."

alias   sf="rm -f ~/.dir_fcs; ln -s \`pwd\` ~/.dir_fcs"                   # set focus dir
alias   gf="if [ -d ~/.dir_fcs ] ; then ga; cd -P ~/.dir_fcs       ; fi"  # goto focus dir
alias  gfc="gf ; if [ -d current ]     ; then pushdp ./current     ; fi"  # production env
alias gfcl="gf ; if [ -d current/log ] ; then pushdp ./current/log ; fi"  # current/log

# create new tab in current terminator window
# https://askubuntu.com/questions/380315/command-to-open-new-tab-in-the-current-terminal
# see above: tmux aliases 'ttn', 'tts' and 'ttv'
alias tn="xdotool key ctrl+shift+t"
alias ts="xdotool key ctrl+shift+s"
alias tv="xdotool key ctrl+shift+v"

###########################################################################
# DIRECTORY LISTING

export LC_ALL="en_US.UTF-8" # UTF-8 is default...
export LC_COLLATE="C"       # sorts Caps before lower case file names for 'ls'
alias   ls='LC_ALL=C ls -FC --group-directories --color'
alias   ll='ls'
alias  lsl='ls -l'
alias lsal='ls -alh'
alias  cls='clear'
alias gree='tree'
alias tree='tree -C --dirsfirst -L 5'

alias more='less'
alias copy='cp'
alias move='mv'
alias  dir='ls'

###########################################################################
# TERMINAL COLORS

Color_Off='\e[0m'       # Text Reset
Clear='\e[0m'           # Text Reset
PSClear='\[\e[0m\]'     # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Re d
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Regular Colors for BASH prompt
# http://stackoverflow.com/questions/7613166/bash-line-wrapping-with-fancy-ps1-that-does-positional-echoing
PSBlack='\[\e[0;30m\]'        # Black
PSRed='\[\e[0;31m\]'          # Red
PSGreen='\[\e[0;32m\]'        # Green
PSYellow='\[\e[0;33m\]'       # Yellow
PSBlue='\[\e[0;34m\]'         # Blue
PSPurple='\[\e[0;35m\]'       # Purple
PSCyan='\[\e[0;36m\]'         # Cyan
PSWhite='\[\e[0;37m\]'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensty
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensty
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensty backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White 

# see https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
# red=`tput setaf 1`
# green=`tput setaf 2`
# yellow=`tput setaf 3`
# reset=`tput sgr0`

# echo "${red}red text ${green}green text${reset}"

###########################################################################
# BASH OPTIONS

shopt -s cdspell      # spell correction during cd command
shopt -s dirspell     # spell correction during <tab> completion
shopt -s extglob      # extended glob pattern matching
shopt -s globstar     # enable **/<filename> matching
shopt -s histverify   # history expansion

###########################################################################
# AUTOCOMPLETE

[ -f /etc/bash_completion ] && source /etc/bash_completion

CPD=~/.complete
[ -d $CPD ] && for f in $CPD/*.sh $CPD/*.bash; do source $f; done

###########################################################################
# BASH PROMPT

# set the command prompt
export USRNAME=`whoami`
export SYSNAME=`hostname`

export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAD="auto"

GITC=$CPD/git-completion.sh
if [ -f $GITC ]
then
  source $GITC
  PS1="${PSGreen}\u@\h${PSClear}${PSYellow}\`__git_ps1\`${PSClear} \w${PSRed}>${PSClear} " 
else
  PS1="${PSGreen}\u@\h${PSClear} \w${PSRed}>${PSClear} " 
fi

###########################################################################
# DEMO PROMPT

PROMPT_FILE=~/.demoprompt

if [ -f $PROMPT_FILE ]
then 
  PROMPT_TEXT=`cat $PROMPT_FILE`
  PS1="${PSGreen}$PROMPT_TEXT${PSClear}${PSRed}>${PSClear} "
fi

alias setdemoprompt="echo 'user@host' > $PROMPT_FILE"
alias deldemoprompt="rm -f $PROMPT_FILE"

###########################################################################
# MISC

if [ `which xterm_title` ]; then
  PROMPT_COMMAND='export PWDS=`pwd_short`;xterm_title "${USRNAME}@${SYSNAME} ${PWDS}"'
fi

# if [ -n "$TMUX" ]; then
#   export TERM='screen-256color'
# else
#   export TERM='xterm-256color'
# fi

###########################################################################
# EDITOR ALIASES

alias lvim="vim -c \"normal '0\""  # open the last file edited
alias vimm='vim'
alias vimn='vim'
alias vin='vim'
alias vim-='vim -'

export EDITOR="vim"
export VISUAL="vim"
export TERMINAL="terminator"

alias em="emacs -nw"
alias nv="nvim"

###########################################################################
# POSTGRESS HELPERS

# pgadmin4 setup instructions -
# https://askubuntu.com/questions/831262/how-to-install-pgadmin-4-in-desktop-mode-on-ubuntu

alias pgc="sudo -u postgres psql"
alias pga="cd ~/.pgadmin4 && source bin/activate && python lib/python2.7/site-packages/pgadmin4/pgAdmin4.py"

###########################################################################
# HISTORY CONFIGURATION

export HH_CONFIG=hicolor         # get more colors
shopt -s histappend              # append new history items to .bash_history
export HISTCONTROL=ignorespace   # leading space hides commands from history
export HISTFILESIZE=10000        # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"   # mem/file sync
# if this is interactive shell, then bind hh to Ctrl-r
# if [[ $- =~ .*i.* ]]; then bind '"\\C-r": "\\C-ahh \\C-j"'; fi
# bind '"\\C-r": "\\C-a hh \\C-j"'

###########################################################################
# RAKE

export COMP_WORDBREAKS="${COMP_WORDBREAKS/\:/}"

###########################################################################
# RAKE

# function echo_color() {
#   printf "\033[0;90m$1\033[0m\n"
# }
# echo_color "c-f  Move forward"
# echo_color "c-b  Move backward"
# echo_color "c-p  Move up"
# echo_color "c-n  Move down"
# echo_color "c-a  Jump to beginning of line"
# echo_color "c-e  Jump to end of line"
# echo_color "c-d  Delete forward"
# echo_color "c-h  Delete backward"
# echo_color "c-k  Delete forward to end of line"
# echo_color "c-u  Delete entire line"
#
