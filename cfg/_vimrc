" PATHOGEN PLUGIN MANAGER 
" LOADS CUSTOM PLUGINS IN ~/.vim/bundle ...
call pathogen#runtime_append_all_bundles()   
call pathogen#helptags()

" VIM-PLUG - ALTERNATIVE PLUGIN MANAGER
" Cmds - :PlugInstall / :PlugClean / :PlugStatus / :PlugUpdate / :PlugUpgrade
" Docco at http://github.com/junegunn/vim-plug 
call plug#begin('~/.vim/plugged')
" -- SNIPMATE ----- 
Plug 'MarcWeber/vim-addon-mw-utils'      " support lib for snipmate
Plug 'tomtom/tlib_vim'                   " support lib for snipmate
Plug 'garbas/vim-snipmate'               " snippet plugin
" -- LSP ----- 
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
" -- FZF ----- 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" -- FILE UTILS ----- 
Plug 'junegunn/fzf.vim'                  " fuzzy file open
Plug 'scrooloose/nerdtree'               " file browser
Plug 'dsimidzija/vim-nerdtree-ignore'    " file browser
Plug 'vim-scripts/nerdtree-ack'          " search from directory
Plug 'mileszs/ack.vim'                   " file search
Plug 'tpope/vim-projectionist'           " src/test file nav
Plug 'jlanzarotta/bufexplorer'           " buffer manipulation
Plug 'vim-scripts/SyntaxRange'           " vimdeck syntax highlighting
" -- LANG ELIXIR -----
Plug 'powerman/vim-plugin-AnsiEsc'       " docco with ANSI colors
Plug 'elixir-lang/vim-elixir'            " syntax highlighting
Plug 'mattreduce/vim-mix'                " mix helpers
Plug 'andyl/vim-snipmate-elixir'         " snippets for elixir
Plug 'andyl/vim-projectionist-elixir'    " source/test file navigation
Plug 'andyl/vim-textobj-elixir'          " elixir text objects
Plug 'andyl/vim-refactoring-elixir'      " basic refactoring support
" -- LANG RUBY ----- 
Plug 'vim-ruby/vim-ruby'                 " syntax highlighting
Plug 'tpope/vim-rails'                   " rails support
Plug 'nelstrom/vim-textobj-rubyblock'    " ruby text objects
Plug 'bronson/vim-ruby-block-conv'       " toggle {} to begin/end
" -- LANG JAVASCRIPT -----
Plug 'mxw/vim-jsx'                       " ReactJS/JSX
Plug 'kchmck/vim-coffee-script'          " coffeescript
Plug 'tomlion/vim-solidity'              " solidity
" -- LANG CRYSTAL -----
Plug 'rhysd/vim-crystal'                 " syntax highlighting
" -- LANG RUST -----
Plug 'rust-lang/rust.vim'                " syntax highlighting
" -- EDITING UTILS -----
Plug 'dhruvasagar/vim-table-mode'        " vim table mode
Plug 'junegunn/vim-easy-align'           " column alignment
" -- TEXT MANIPULATION -----
Plug 'vim-scripts/tComment'              " toggle comments on/off
Plug 'kana/vim-textobj-user'             " customizable text objects
Plug 'tpope/vim-surround'                " edit containing objects
Plug 'tpope/vim-repeat'                  " repeat support for plugins
" -- CODING UTILITIES -----
Plug 'vim-scripts/taglist.vim'           " source code browsing
Plug 'milkypostman/vim-togglelist'       " toggle quicklist and location list
Plug 'tpope/vim-unimpaired'              " jump leading/trailing paren
Plug 'tmhedberg/matchit'                 " % matching
" -- FILE FORMATS -----
Plug 'vimoutliner/vimoutliner'           " outline files
Plug 'pearofducks/ansible-vim'           " ansible yaml files
Plug 'slim-template/vim-slim'            " slim files
Plug 'jtratner/vim-flavored-markdown'    " markdown files
" -- TMUX -----
Plug 'benmills/vimux'                    " tmux integration
" -- COLORSCHEMES -----
Plug 'junegunn/seoul256.vim'             " seoul256
Plug 'NLKNguyen/papercolor-theme'        " PaperColor
Plug 'noahfrederick/vim-hemisu'          " hemisu 
Plug 'sjl/badwolf'                       " badwolf
Plug 'tomasr/molokai'                    " molokai
Plug 'morhetz/gruvbox'                   " gruvbox
" -- LAYOUTS -----
Plug 'vim-airline/vim-airline'           " status bar
Plug 'vim-airline/vim-airline-themes'    " vim-airline themes
Plug 'andyl/zoomwintab.vim'              " pane zooming
Plug 'kshenoy/vim-signature'             " show marks
" -- MISC -----
Plug 'terryma/vim-multiple-cursors'      " multiple cursors
Plug 'itchyny/calendar.vim'              " vim calendars
Plug 'tpope/vim-fugitive'                " git integration
Plug 'mattn/gist-vim'                    " post github gists
Plug 'vim-scripts/bats.vim'              " bats editing
call plug#end()

" === FILE MODES
au BufRead,BufNewFile *.thor    set filetype=ruby
au BufRead,BufNewFile *.gtd     set filetype=gtd
au BufRead,BufNewFile *.gta     set filetype=gtd

" === ELIXIR CONFIG
augroup elixir_lsp
  au!
  au User lsp_setup call lsp#register_server({
        \ 'name': 'elixir-ls',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'env ERL_LIBS=/home/aleak/util/base_util/lsp mix elixir_ls.language_server']},
        \ 'whitelist': ['elixir', 'eelixir'],
        \ })
augroup END

" === LISTS
let g:toggle_list_no_mappings=1
nmap <F7> :call ToggleQuickfixList()<cr>
nmap <F9> :call ToggleLocationList()<cr>

" === CLEAN UP JUNK DATA FILE
au VimLeave * if filereadable(expand("~/.vim/.netrwhist"))|call delete(expand("~/.vim/.netrwhist"))|endif 

" === FILE BACKUPS - disable file backups
set updatecount=0     
set nobackup
set noswapfile

set shortmess+=I

" === SYNTASTIC 
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_enable_elixir_checker = 1
let g:syntastic_elixir_checkers = ['elixir']

" === MATCHIT
runtime macros/matchit.vim

" === ABBREV / TYPO FIXES
abbrev teh the
abbrev tihs this

" === WEB PREVIEW
command! Preview :!firefox %<cr>

" === WRITE THE CURRENT BUFFER, THEN CLOSE IT
command! Wc write|bdelete

" === CURSORLINE
" note: cursorline also set in the `focus` function
set cursorline
set nocursorcolumn
nmap <F2> :set cursorline! cursorline?<cr>
imap <F2> <esc>:set cursorline! cursorline?<cr>i<right>

" === SEARCH AND REPLACE
vmap <F3> :s///g<left><left>
nmap <F3> :%s///g<left><left>

" === SEARCH HIGHLIGHT
set hlsearch
nmap <leader>h :set hlsearch!<cr>
nmap <F4> :set hlsearch! hlsearch?<cr>
imap <F4> <esc>:set hlsearch! hlsearch?<cr>i<right>
nnoremap / :set hlsearch<cr>/

" search for selected text, forwards or backwards
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" === MISC STUFF
let mapleader=","
set directory=~/.vimtmp,/tmp,.
set splitright
set splitbelow
set number
set nowritebackup
set incsearch
set visualbell
set ignorecase
set smartcase
set nocompatible
set laststatus=2
set printoptions=duplex:long,number:y
let g:otl_text_view = 1
nmap <space> i~<esc>r
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [%{hostname()}]\ [%l,%v]\ [%p%%]\ [LEN=%L]\ [%{$PWDS}]
set title titlestring=<vim>\ %{$USER}@%{hostname()}\ %t\ %m%r%h%w

" === MODE TRANSITION
" use jk or kj as a single keystroke to escape
autocmd InsertLeave * :normal `^
imap kj <esc>
imap kk <esc>
imap jj <esc>
imap :w <esc>:w
imap :q <esc>:q

" === TABLE MODE
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'

" === COMPLETION
" from http://stackoverflow.com/questions/2269005/how-can-i-change-the-keybinding-used-to-autocomplete-in-vim
" <C-y> to trigger autocompletion
inoremap <C-y> <C-x><C-o>
" <C-space> instead of <C-n> 
inoremap <Nul> <C-n>

" === MOVE LINE UP/DOWN
nmap <A-Up> [e
nmap <A-Down> ]e

" === MOVE REGION UP/DOWN
vmap <A-Up> [egv
vmap <A-Down> ]egv

" === FOR EDITING HELP OUTLINES - OPENS TARGET FILE IN VERTICAL SPLIT WINDOW
map <F8> :vertical wincmd f<CR>

" === AUTORUN - autoexec vim script on VimEnter
fu! LoadAutorun()
  if filereadable(getcwd() . '/.autorun.vim')
    exec "source " . getcwd() . "/.autorun.vim"
  endif
endfunction

autocmd VimEnter * call LoadAutorun()

" === INDENTATION AND TABS
filetype plugin indent on
set softtabstop=2
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set backspace=start,indent

" === MARKDOWN
" tpope/markdown highlights in underscore in snake_case words
" jtratner/vim-flavored-markdown fixes this
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" === FORMATTING AND PAGINATION

" Underline the current line 
nmap <leader>u yyp<c-v>$r-
nmap <leader>U yyp<c-v>$r=

" Insert header line
nmap <leader>h o<Esc>65i-<Esc>
nmap <leader>H o<Esc>65i=<Esc>

" Pagination helpers (for putting page breaks in text printouts)
nmap <leader>pc gg:%s///g<cr>gg
nmap <leader>ps /<cr>zz
nmap <leader>pd 73jzz
nmap <leader>pi i<esc>

" === PRINT COMMANDS
nmap <leader>pp :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 %<cr>
nmap <leader>p1 :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --portrait  --columns=1 --font-size=9 %<cr>
nmap <leader>pl :! a2ps -c --highlight-level=none --sides=duplex -T 2 --line-numbers=1 --landscape --columns=1 --font-size=9 %<cr>

" === FZF - fast file finding
nmap <C-p> :<C-u>FZF<CR>

" === ACK.VIM 
nmap <leader>k :Ack 
let g:ackprg = 'rg --vimgrep --no-heading'

" === NERD TREE
let g:NERDTreeMapOpenVSplit = "v"
let g:NERDTreeMapOpenSplit  = "s"
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeSortHiddenFirst = 1
let g:NerdTreeIdle = 1

" returns true iff is NERDTree open/active
function! s:IsNTOpen()        
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! <SID>ToggleNerd()
  let g:NerdTreeIdle = 0
  if s:IsNTOpen() || strlen(expand('%')) == 0
    NERDTreeToggle
  else
    NERDTreeFind
  endif
  let g:NerdTreeIdle = 1
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a
" modifiable file, and we're not in vimdiff
function! <SID>SyncTree()
  if g:NerdTreeIdle && &modifiable && s:IsNTOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

nnoremap <silent> <leader>e :call <SID>ToggleNerd()<cr>

autocmd BufEnter * call <SID>SyncTree()

" === ViMux
function! s:IsVimuxOpen()
  return exists("g:VimuxRunnerIndex")
endfunction

function! <SID>ToggleVimuxTerminal()
  if s:IsVimuxOpen()
    call VimuxCloseRunner()
  else
    call VimuxRunCommand("clear")
  endif
endfunction

nnoremap <silent> <leader>c :call <SID>ToggleVimuxTerminal()<cr>

" === TMP FILE - copy between vim instances using tmp file
nmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>tp :r /tmp/vimtmp<cr>

" === VIM EASY ALIGN
vmap at :EasyAlign *\|<cr>
vmap ac <Plug>(EasyAlign)
nmap ac <Plug>(EasyAlign)

" at = align table
" usage: vipat
" ac = align character
" usage: vipac=

" === TAB MANIPULATION AND NAVIGATION
nmap <leader>tn :tabnew<CR>
nmap <leader>tx :tabclose<CR>
nmap <leader>th :tabp<CR>
nmap <leader>tl :tabn<CR>
nmap <leader>t1 1gt
nmap <leader>t2 2gt
nmap <leader>t3 3gt
nmap <leader>t4 4gt
nmap <leader>t5 5gt
nmap <leader>t6 6gt
nmap <leader>t7 7gt
nmap <leader>t8 8gt
nmap <leader>t9 9gt

" === PANE SPLITTING
nmap <leader>s :sp<cr>
nmap <leader>v :vsp<cr>
nmap <leader>q :q<cr>
nmap <leader>o :only<cr>

" === PANE ARRANGEMENT
" arrange split
nmap <leader>as <C-w>J<cr>
" arrange vertical
nmap <leader>av <C-w>L<cr>
" rotate panes
nmap <leader>ar <C-w>r<cr>

" === PANE NAVIGATION
nmap <silent> <C-k> :wincmd k<cr>
nmap <silent> <C-j> :wincmd j<cr>
nmap <silent> <C-h> :wincmd h<cr>
nmap <silent> <C-l> :wincmd l<cr>

" === PANE RESIZING (Up/Down)
fun! BarUp()
  let curwindow = winnr() " save current window
  wincmd k                " move to a upper-window
  if winnr() == curwindow " if top-most window
    resize -2             " shrink it
  else
    wincmd j              " else move to the lower-window
    resize +2             " grow it
  endif
endfun

fun! BarDown()
  let curwindow = winnr() " save current window
  wincmd j                " move to a lower-window
  if winnr() == curwindow " if bottom-most window
    resize -2             " shrink it
  else
    wincmd k              " else move to the upper-window
    resize +2             " grow it
  endif
endfun

nnoremap <silent> <C-Up> :call BarUp()<cr>
nnoremap <silent> <C-Down> :call BarDown()<cr>

" === PANE RESIZING (Left/Right)
fun! BarLeft()
  let curwindow = winnr() " === save current window
  wincmd h                " move to a left-window
  if winnr() == curwindow " if left-most window
    vertical resize -2    " shrink it
  else
    wincmd l              " else move to the right-window
    vertical resize +2    " grow it
  endif
endfun

fun! BarRight()
  let curwindow = winnr() " save current window
  wincmd l                " move to a right-window
  if winnr() == curwindow " if right-most window
    vertical resize -2    " shrink it
  else
    wincmd h              " else move to the left-window
    vertical resize +2    " grow it
  endif
endfun

nnoremap <silent> <C-Left> :call BarLeft()<cr>
nnoremap <silent> <C-Right> :call BarRight()<cr>

" === TAGS
let $CDIR=expand('%:p:h')
" set tags=$CDIR/.tags
" CTAGS-BUNDLER
set tags=tags,gems.tags
let Tlist_GainFocus_On_ToggleOpen=1
nmap <leader>g :TlistToggle<cr>     
nmap <leader>x :!ct<cr>:TlistUpdate<cr>

" === FILE NAVIGATION 
" Enhances vim.ruby - for use with 'gf'
" Adds Bundler paths. Run 'ct' to generate the .paths.vim
au BufNewFile,BufRead *.rb silent! source .paths.vim

" === EDITING ~/.vimrc
nmap <leader>ce :split  ~/.vimrc<CR>
nmap <leader>cs :source ~/.vimrc<CR>

" AUTO-RELOAD .VIMRC
" augroup reload_vimrc " {
"   autocmd!
"   autocmd BufWritePost $MYVIMRC source $MYVIMRC
" augroup END " }

" === SURROUND CUSTOMIZATION
" Select text in an ERb file with visual mode and then press s- or s=
" Or yss- to do entire line.
autocmd FileType eruby let g:surround_45 = "<% \r %>"    " -
autocmd FileType eruby let g:surround_61 = "<%= \r %>"   " =
autocmd FileType ruby  let g:surround_35  = "#{\r}"      " #

" === BUFFER MANIPULATION [BufExplorer]  
" (other commands from BufExplorer - be, bv, bs)
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bd :bd<cr>
nmap <leader>bx :bd<cr>
nmap <leader>bl :bnext<cr>
nmap <leader>bh :bprev<cr>

" === PANE ZOOMING
nmap <leader>z <C-w>o
vmap <leader>z <C-w>o

" === ZOOM STATE ON STATUS LINE
fun! SetZoomState()
  if g:airline_section_y != "ZOOM"
    let g:orig_zoom_state = g:airline_section_y
    let g:airline_section_y = "ZOOM"
    let g:airline_theme     = 'light'
  else
    let g:airline_section_y = g:orig_zoom_state
    let g:airline_theme = 'luna'
    let g:orig_zoom_state = ""
  endif
  AirlineRefresh
  AirlineRefresh
endfun

if !exists("g:ZoomWinFuncRef")
 let g:ZoomWinFuncRef = function("SetZoomState")
endif
 
" === VIM-AIRLINE 
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_theme = 'luna'
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#bufferline#enabled = 1
nmap <leader>1 :bl\|1bn<cr>
nmap <leader>2 :bl\|2bn<cr>
nmap <leader>3 :bl\|3bn<cr>
nmap <leader>4 :bl\|4bn<cr>
nmap <leader>5 :bl\|5bn<cr>
nmap <leader>6 :bl\|6bn<cr>
nmap <leader>7 :bl\|7bn<cr>
nmap <leader>8 :bl\|8bn<cr>
nmap <leader>9 :bl\|9bn<cr>

" === ENCODING
if !exists('g:encoding_set')
  set encoding=utf-8
endif
let g:encoding_set=1

" === NEOVIM SETTINGS
" if has('nvim')
"   set inccommand=nosplit
" endif

" === COLOR SCHEMES, FOCUS AND BLUR
" see https://github.com/morhetz/gruvbox

set t_Co=256
syntax on
set background=dark
let g:blur_bg=237

function! <SID>focus()
  set cc=""
  if &filetype == "nerdtree"
    return
  endif
  hi clear
  let defaultTypes = ["text", "otl", "wlog", "gtd"]
  if index(defaultTypes, &filetype)
    let g:gruvbox_contrast_dark='hard'
    set background=dark
    colorscheme gruvbox
  else
    set nocursorline
    colorscheme default
  end
  exec 'hi ColorColumn ctermbg=' . g:blur_bg
  AirlineRefresh
endfunction

function! <SID>blur()
  hi clear
  if &filetype == "nerdtree"
    set cc=""
  else
    let &colorcolumn=join(range(1,150),",")
  endif
  exec 'hi ColorColumn ctermbg=' . g:blur_bg
  AirlineRefresh
endfunction

autocmd BufEnter,FocusGained,VimEnter,WinEnter *      :call <SID>focus()
autocmd BufEnter,FocusGained,VimEnter,WinEnter *.wlog colorscheme worklog | AirlineRefresh
autocmd BufEnter,FocusGained,VimEnter,WinEnter *.otl  colorscheme otl     | AirlineRefresh
autocmd BufEnter,FocusGained,VimEnter,WinEnter *.gtd  colorscheme gtd     | AirlineRefresh

" === TERM-SPECIFIC ITEMS 
if exists('$TMUX')
  if !has('nvim')
    set term=screen-256color
  endif
endif

" === CURSOR CUSTOMIZATION
" http://vim.wikia.com/wiki/Change_cursor_color_in_different_modes
" http://stackoverflow.com/questions/6488683/how-do-i-change-the-vim-cursor-in-insert-normal-mode
" https://jonasjacek.github.io/colors/
" cursor shapes (where N = \033[N q): 
"   1 -> blinking block 
"   2 -> solid block 
"   3 -> blinking underscore 
"   4 -> solid underscore
"   5 -> blinking bar
"   6 -> solid bar
" test cursor shapes -> echo -ne "\e[5 q"
" test cursor colors -> echo -ne "\e]12;green\x7"
if &term == "xterm-256color"  " xterms are gnu-term and terminator
  let &t_SI = "\e[5 q"      " when entering insert mode
  let &t_SR = "\e[3 q"      " when entering replace mode
  let &t_EI = "\e[2 q"      " when entering normal mode
  set mouse=a
endif

" https://github.com/neovim/neovim/wiki/FAQ#how-can-i-change-the-cursor-shape-in-the-terminal
if &term == "nvim" 
  set guicursor=i:ver25-iCursor
endif

" See https://gist.github.com/1973419 (this works)
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
if &term == 'screen-256color'                                   " TMUX
  let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"                 " when entering replace mode
  let &t_SR = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"                 " when entering replace mode
  let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"                 " when entering replace mode
  nmap [1;5A [e
  nmap [1;5B ]e
  vmap [1;5A [egv
  vmap [1;5B ]egv
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif
 
" See http://arniealmighty.wordpress.com for screen/cursor color notes
" (doesn't seem to be working)
if &term == 'screen'                            " GNU Screen 
  let &t_SI = "\033P\033]12;green\007\033\\"    " when entering insert mode
  let &t_EI = "\033P\033]12;white\007\033\\"    " when entering normal mode
endif

" === STRIP TRAILING WHITESPACE 
" see http://vimcasts.org/episodes/tidying-whitespace/
" to show non-printable characters - :set list
" to hide non-printable characters - :set nolist

function! <SID>StripTrailingWhitespaces()
  " Prep: save last search and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business
  %s/\s\+$//e
  " Cleanup: restore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction

" call function before saving
autocmd BufWritePre *.rb,*.slim,*.rake,*.erb :call <SID>StripTrailingWhitespaces()

