" PATHOGEN PLUGIN MANAGER
" LOADS CUSTOM PLUGINS IN ~/.vim/bundle ...
filetype off 
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" VIM-PLUG - ALTERNATIVE PLUGIN MANAGER
" Cmds - :PlugInstall / :PlugStatus / :PlugUpdate / :PlugClean / :PlugUpgrade
" Docco at http://github.com/junegunn/vim-plug 
call plug#begin('~/.vim/plugged')
" snippets -----
Plug 'MarcWeber/vim-addon-mw-utils'   " support lib for snipmate
Plug 'tomtom/tlib_vim'                " support lib for snipmate
Plug 'garbas/vim-snipmate'            " snippet plugin
" file utils -----
Plug 'scrooloose/nerdtree'            " file browser
Plug 'ctrlpvim/ctrlp.vim'             " fuzzy file open
Plug 'tpope/vim-projectionist'        " src/test file nav
Plug 'jlanzarotta/bufexplorer'        " buffer manipulation
" lang:elixir -----
Plug 'elixir-lang/vim-elixir'         " syntax highlighting
Plug 'mattreduce/vim-mix'             " mix helpers
Plug 'slashmili/alchemist.vim'        " refactoring helpers
Plug 'powerman/vim-plugin-AnsiEsc'    " docco with ANSI colors
Plug 'carlosgaldino/elixir-snippets'  " snippets for elixir
" lang:ruby -----
Plug 'vim-ruby/vim-ruby'              " syntax highlighting
Plug 'tpope/vim-rails'                " rails support
Plug 'nelstrom/vim-textobj-rubyblock' " ruby text objects
Plug 'bronson/vim-ruby-block-conv'    " toggle {} to begin/end
" lang:javascript -----
Plug 'mxw/vim-jsx'                    " ReactJS/JSX
Plug 'kchmck/vim-coffee-script'       " coffeescript
" lang:crystal -----
Plug 'rhysd/vim-crystal'              " syntax highlighting
" lang:rust -----
Plug 'rust-lang/rust.vim'              " syntax highlighting
" editing utils -----
Plug 'vimoutliner/vimoutliner'        " vim outliner
Plug 'dhruvasagar/vim-table-mode'     " vim table mode
Plug 'junegunn/vim-easy-align'        " column alignment
" text manipulation -----
Plug 'vim-scripts/tComment'           " toggle comments on/off
Plug 'kana/vim-textobj-user'          " customizable text objects
Plug 'tpope/vim-surround'             " edit containing objects
Plug 'tpope/vim-repeat'               " repeat support for plugins
" coding utilities -----
Plug 'vim-scripts/taglist.vim'        " source code browsing
Plug 'scrooloose/syntastic'           " source code highlighting
Plug 'tpope/vim-unimpaired'           " jump leading/trailing paren
Plug 'tmhedberg/matchit'              " % matching
Plug 'mileszs/ack.vim'                " searching
" file formats -----
Plug 'pearofducks/ansible-vim'        " ansible yaml files
Plug 'slim-template/vim-slim'         " slim templates
Plug 'tpope/vim-markdown'             " markdown
" tmux -----
Plug 'benmills/vimux'                 " tmux integration
" layouts -----
Plug 'junegunn/seoul256.vim'          " color schemes
Plug 'vim-airline/vim-airline'        " status bar
Plug 'vim-airline/vim-airline-themes' " vim-airline themes
" misc -----
Plug 'tpope/vim-fugitive'             " git integration
Plug 'mattn/gist-vim'                 " post github gists
Plug 'vim-scripts/bats.vim'           " bats editing
call plug#end()

" FILE MODES
au BufRead,BufNewFile *.worklog set filetype=worklog
au BufRead,BufNewFile *.wlog    set filetype=worklog
au BufRead,BufNewFile *.thor    set filetype=ruby
au BufRead,BufNewFile *.gtd     set filetype=gtd
au BufRead,BufNewFile *.gta     set filetype=gtd

" ELIXIR CONFIG
let g:alchemist#elixir_erlang_src = "~/.beam_src"

" CLEAN UP JUNK DATA FILE
au VimLeave * if filereadable(expand("~/.vim/.netrwhist"))|call delete(expand("~/.vim/.netrwhist"))|endif 

" FILE BACKUPS - disable file backups
set updatecount=0     
set nobackup
set noswapfile

set shortmess+=I

" ACK.VIM

let g:ackprg = 'ag --nogroup --nocolor --column'

" MATCHIT
runtime macros/matchit.vim

" ABBREV / TYPO FIXES
abbrev teh the
abbrev tihs this

" WEB PREVIEW
command! Preview :!firefox %<cr>

" WRITE THE CURRENT BUFFER, THEN CLOSE IT
command! Wc write|bdelete

" SEARCH HIGHLIGHT
set hlsearch
nmap <leader>h :set hlsearch!<cr>
nmap <F4> :set hlsearch! hlsearch?<cr>
nnoremap / :set hlsearch<cr>/

" MISC STUFF
syntax on
set directory=~/.vimtmp,/tmp,.
set splitright
set splitbelow
map go :only<CR>:~vsp <cfile><CR>
set number
set incsearch
set visualbell
set ignorecase
set smartcase
set nocompatible
set laststatus=2
set printoptions=duplex:long,number:y
let g:otl_text_view = 1
let mapleader=","
" use jk or kj as a single keystroke to escape
imap kj <esc>
imap jk <esc>
imap kk <esc>
imap jj <esc>
imap :w <esc>:w
imap :q <esc>:q
nmap <space> i~<esc>r
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [%{hostname()}]\ [%l,%v]\ [%p%%]\ [LEN=%L]\ [%{$PWDS}]%{Zstate()}
set title titlestring=<vim>\ %{$USER}@%{hostname()}\ %t\ %m%r%h%w

let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'

" search for selected text, forwards or backwards
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" from http://stackoverflow.com/questions/2269005/how-can-i-change-the-keybinding-used-to-autocomplete-in-vim
inoremap <Nul> <C-n>

" MOVE LINE UP/DOWN
nmap <A-Up> [e
nmap <A-Down> ]e

" MOVE REGION UP/DOWN
vmap <A-Up> [egv
vmap <A-Down> ]egv

" FOR EDITING HELP OUTLINES - OPENS TARGET FILE IN VERTICAL SPLIT WINDOW
map <F8> :vertical wincmd f<CR>

" INDENTATION AND TABS
filetype plugin indent on
set softtabstop=2
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set backspace=start,indent

" PRINT COMMANDS
nmap <leader>pp :! a2ps -c --sides=duplex --line-numbers=1 %<cr>
nmap <leader>p1 :! a2ps -c --sides=duplex --line-numbers=1 --portrait  --columns=1 --font-size=9 %<cr>
nmap <leader>pl :! a2ps -c --sides=duplex --line-numbers=1 --landscape --columns=1 --font-size=9 %<cr>

" CTRLP - fast file finding
let g:ctrlp_max_files = 10000        " Set the max files
" if has("unix")                       " Optimize file searching 
"   let g:ctrlp_user_command = {
"     \\ 'types': {
"     \\ 1: ['.git/', 'cd %s && git ls-files']
"     \\ },
"     \\ 'fallback': 'find %s -type f | head -' . g:ctrlp_max_files
"     \\ }
" endif
nmap <leader>f :CtrlP<cr>

" MISC PLUGIN COMMANDS
nmap <leader>d :NERDTreeToggle<cr>

cmap w!! %!sudo tee > /dev/null % 

" BUFFER MANIPULATION
" (other commands from BufExplorer - be, bv, bs)
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bd :bd<cr>
nmap <leader>bx :bd<cr>

" TMP FILE - copy between vim instances using tmp file
nmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>ty y:call writefile(split(@0,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
vmap <leader>td d:call writefile(split(@1,'\n'), "/tmp/vimtmp")<cr>
nmap <leader>tp :r /tmp/vimtmp<cr>

" -----------------------------------------------------
" Vim Easy Align
vmap at :EasyAlign *\|<cr>
vmap ac <Plug>(EasyAlign)
nmap ac <Plug>(EasyAlign)

" at = align table
" usage: vipat
" ac = align character
" usage: vipac=

" Underline the current line with dashes in normal mode
nmap <leader>u yyp<c-v>$r-

" TAB MANIPULATION AND NAVIGATION
nmap <leader>tn :tabnew<CR>
nmap <leader>tx :tabclose<CR>
nmap <leader>th :tabp<CR>
nmap <leader>tl :tabn<CR>
nmap <leader>t1 1gt
nmap <leader>t2 2gt
nmap <leader>t3 3gt
nmap <leader>t4 4gt
nmap <leader>t5 5gt
nmap <leader>t6 6gt
nmap <leader>t7 7gt
nmap <leader>t8 8gt
nmap <leader>t9 9gt

" PANE SPLITTING
nmap <leader>s :sp<cr>
nmap <leader>v :vsp<cr>

" PANE NAVIGATION
nmap <silent> <C-k> :wincmd k<cr>
nmap <silent> <C-j> :wincmd j<cr>
nmap <silent> <C-h> :wincmd h<cr>
nmap <silent> <C-l> :wincmd l<cr>

" PANE RESIZING (Up/Down)
fun! BarUp()
  let curwindow = winnr() " save current window
  wincmd k                " move to a upper-window
  if winnr() == curwindow " if top-most window
    resize -2             " shrink it
  else
    wincmd j              " else move to the lower-window
    resize +2             " grow it
  endif
endfun

fun! BarDown()
  let curwindow = winnr() " save current window
  wincmd j                " move to a lower-window
  if winnr() == curwindow " if bottom-most window
    resize -2             " shrink it
  else
    wincmd k              " else move to the upper-window
    resize +2             " grow it
  endif
endfun

nnoremap <silent> <C-Up> :call BarUp()<cr>
nnoremap <silent> <C-Down> :call BarDown()<cr>

" PANE RESIZING (Left/Right)
fun! BarLeft()
  let curwindow = winnr() " save current window
  wincmd h                " move to a left-window
  if winnr() == curwindow " if left-most window
    vertical resize -2    " shrink it
  else
    wincmd l              " else move to the right-window
    vertical resize +2    " grow it
  endif
endfun

fun! BarRight()
  let curwindow = winnr() " save current window
  wincmd l                " move to a right-window
  if winnr() == curwindow " if right-most window
    vertical resize -2    " shrink it
  else
    wincmd h              " else move to the left-window
    vertical resize +2    " grow it
  endif
endfun

nnoremap <silent> <C-Left> :call BarLeft()<cr>
nnoremap <silent> <C-Right> :call BarRight()<cr>

" PANE ZOOMING
nmap <leader>z <C-w>o
vmap <leader>z <C-w>o

" ZOOM STATE ON STATUS LINE
let t:zstate=''

fun! ZoomState(state)
  if a:state
   let t:zstate='Z'
  else
   let t:zstate=''
  endif
endfun

fun! Zstate()
  if exists("t:zstate")
    return t:zstate
  else
    return ''
  endif
endfun

if !exists("g:ZoomWin_funcref")
 let g:ZoomWin_funcref= function("ZoomState")
endif
 
" TAGS
let $CDIR=expand('%:p:h')
" set tags=$CDIR/.tags
" CTAGS-BUNDLER
set tags=tags,gems.tags
let Tlist_GainFocus_On_ToggleOpen=1
nmap <leader>g :TlistToggle<cr>     
nmap <leader>x :!ct<cr>:TlistUpdate<cr>

" FILE NAVIGATION 
" Enhances vim.ruby - for use with 'gf'
" Adds Bundler paths. Run 'ct' to generate the .paths.vim
au BufNewFile,BufRead *.rb silent! source .paths.vim

" EDITING ~/.vimrc
nmap <leader>ce :split  ~/.vimrc<CR>
nmap <leader>cs :source ~/.vimrc<CR>

" AUTO-RELOAD .VIMRC
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" SURROUND CUSTOMIZATION
" Select text in an ERb file with visual mode and then press s- or s=
" Or yss- to do entire line.
autocmd FileType eruby let g:surround_45 = "<% \r %>"    " -
autocmd FileType eruby let g:surround_61 = "<%= \r %>"   " =
autocmd FileType ruby let g:surround_35  = "#{\r}"       " #

" VIM-AIRLINE / VIM-BUFFERLINE
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_theme = 'luna'
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#bufferline#enabled = 1
let g:bufferline_echo = 0
let g:bufferline_show_bufnr = 0
let g:bufferline_rotate = 2
nmap <leader>1 :bl\|1bn<cr>
nmap <leader>2 :bl\|2bn<cr>
nmap <leader>3 :bl\|3bn<cr>
nmap <leader>4 :bl\|4bn<cr>
nmap <leader>5 :bl\|5bn<cr>
nmap <leader>6 :bl\|6bn<cr>
nmap <leader>7 :bl\|7bn<cr>
nmap <leader>8 :bl\|8bn<cr>
nmap <leader>9 :bl\|9bn<cr>

" TERM-SPECIFIC ITEMS ------------------------------------------------

if exists('$TMUX')
  if !has('nvim')
    set term=screen-256color
  end
end

set encoding=utf-8
set t_Co=256

" See http://vim.wikia.com/wiki/Change_cursor_color_in_different_modes
if &term == "xterm-256color"              " xterms are gnu-term and terminator
  let &t_SI = "\<Esc>]12;green\x7"        " when entering insert mode
  let &t_EI = "\<Esc>]12;white\x7"        " when leaving insert mode
  set mouse=a
endif

" See http://arniealmighty.wordpress.com for screen/cursor color notes
" (doesn't seem to be working)
if &term == 'screen'                          " GNU Screen / TMUX
  let &t_SI = "\033P\033]12;green\007\033\\"  " when entering insert mode
  let &t_EI = "\033P\033]12;white\007\033\\"  " when leaving insert mode
endif

" See https://gist.github.com/1973419 (this works)
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
if &term == 'screen-256color'                                 " GNU Screen / TMUX
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]12;green\x7\<Esc>\\"  " when entering insert mode
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]12;white\x7\<Esc>\\"  " when entering insert mode
  nmap [1;5A [e
  nmap [1;5B ]e
  vmap [1;5A [egv
  vmap [1;5B ]egv
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

" VIMDIFF
if &diff
  map <leader>1 :diffget LOCAL<CR>
  map <leader>2 :diffget BASE<CR>
  map <leader>3 :diffget REMOTE<CR>
endif

" STRIP TRAILING WHITESPACE 
" see http://vimcasts.org/episodes/tidying-whitespace/
" to show non-printable characters - :set list
" to hide non-printable characters - :set nolist

" function definition
function! <SID>StripTrailingWhitespaces()
  " Prep: save last search and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business
  %s/\s\+$//e
  " Cleanup: restore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction

" call function before saving
autocmd BufWritePre *.rb,*.slim,*.rake,*.erb :call <SID>StripTrailingWhitespaces()

